/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.remove-watch-dir"
  | "project-config.add-watch-dir"
  | "extension.emeraldwalk.enableRunOnSave"
  | "extension.emeraldwalk.disableRunOnSave"

/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
  /**
   * Update config now
   * @value `project-config.manualUpdate`
   * @example
   * useCommand(commands.manualUpdate, async () => {
   *   //do actions or update config 
   * })
   */
  manualUpdate: "project-config.manualUpdate",
  /**
   * remove watch dir
   * @value `project-config.remove-watch-dir`
   * @example
   * useCommand(commands.removeWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  removeWatchDir: "project-config.remove-watch-dir",
  /**
   * add watch dir
   * @value `project-config.add-watch-dir`
   * @example
   * useCommand(commands.addWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  addWatchDir: "project-config.add-watch-dir",
  /**
   * Run On Save: Enable
   * @value `extension.emeraldwalk.enableRunOnSave`
   * @example
   * useCommand(commands.extensionEmeraldwalkEnableRunOnSave, async () => {
   *   //do actions or update config 
   * })
   */
  extensionEmeraldwalkEnableRunOnSave: "extension.emeraldwalk.enableRunOnSave",
  /**
   * Run On Save: Disable
   * @value `extension.emeraldwalk.disableRunOnSave`
   * @example
   * useCommand(commands.extensionEmeraldwalkDisableRunOnSave, async () => {
   *   //do actions or update config 
   * })
   */
  extensionEmeraldwalkDisableRunOnSave: "extension.emeraldwalk.disableRunOnSave",
} satisfies Record<string, CommandKey>
/**
 * Update config now
 * @value `project-config.manualUpdate`
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
  useCommand(commands.manualUpdate, callback)
}
/**
 * remove watch dir
 * @value `project-config.remove-watch-dir`
 */
export function useCommandRemoveWatchDir(callback: (...args: any[]) => any) {
  useCommand(commands.removeWatchDir, callback)
}
/**
 * add watch dir
 * @value `project-config.add-watch-dir`
 */
export function useCommandAddWatchDir(callback: (...args: any[]) => any) {
  useCommand(commands.addWatchDir, callback)
}
/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkEnableRunOnSave(callback: (...args: any[]) => any) {
  useCommand(commands.extensionEmeraldwalkEnableRunOnSave, callback)
}
/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkDisableRunOnSave(callback: (...args: any[]) => any) {
  useCommand(commands.extensionEmeraldwalkDisableRunOnSave, callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "ww_should_not_show_up"

/**
 * Config keys of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "test.position": ("after" | "before"),
}

/**
 * Config keys of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "test.position": ("after" | "before"),
}

/**
 * Config keys of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "test.position": ("after" | "before"),
}

/**
 * Config keys of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "test.position": ("after" | "before"),
}

/**
 * Config keys of `project-config.fileNestingUpdater`
 */
export interface ProjectConfigFileNestingUpdater {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "upstreamRepo": string,
}

/**
 * Config keys of `project-config.fileNestingUpdater`
 */
export interface ProjectConfigFileNestingUpdater {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "upstreamRepo": string,
}

/**
 * Config keys of `project-config.test`
 */
export interface ProjectConfigTest {
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "position": ("after" | "before"),
}

/**
 * Config keys of `project-config.test`
 */
export interface ProjectConfigTest {
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "position": ("after" | "before"),
}

/**
 * Config keys of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "xxx": boolean,
}

/**
 * Config keys of `emeraldwalk`
 */
export interface Emeraldwalk {
  /**
   * 
   * @default { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined }
   */
  "runonsave": {
      /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    'autoClearConsole': boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    'shell'?: string
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters': string[]
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters1': string[]
    /**
     * 
     * @default `undefined`
     */
    'commands'?: {
              /**
         * Regex for matching files to run commands on 
         * 
         * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
         * 
         * e.g.
         * "match": "some\\\\directory\\\\.*"
         * @default `".*"`
         */
        'match': string
        /**
         * Regex for matching files *not* to run commands on.
         * @default `".*"`
         */
        'notMatch': string
        /**
         * Command to execute on save.
         * @default `"echo ${file}"`
         */
        'cmd': string
        /**
         * Run command asynchronously.
         * @default `false`
         */
        'isAsync': boolean 
      }[] 
  },
}
