// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.remove-watch-dir"
  | "project-config.add-watch-dir"

/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
  /**
   * Update config now
   * @value `project-config.manualUpdate`
   * @example
   * useCommand(commands.manualUpdate, async () => {
   *   //do actions or update config 
   * })
   */
  manualUpdate: "project-config.manualUpdate",
  /**
   * remove watch dir
   * @value `project-config.remove-watch-dir`
   * @example
   * useCommand(commands.removeWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  removeWatchDir: "project-config.remove-watch-dir",
  /**
   * add watch dir
   * @value `project-config.add-watch-dir`
   * @example
   * useCommand(commands.addWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  addWatchDir: "project-config.add-watch-dir",
} satisfies Record<string, CommandKey>

/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "ww_should_not_show_up"

/**
 * Config keys of `configuration of project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @key `project-config.fileNestingUpdater.upstreamBranch`
   * @default `"main"`
   * @type `string`
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @key `project-config.fileNestingUpdater.upstreamRepo`
   * @default `"antfu/vscode-file-nesting-config"`
   * @type `string`
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @key `project-config.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @key `project-config.test.position`
   * @default `"before"`
   * @type `string`
   */
  "test.position": ("after" | "before"),
}

/**
 * Scoped defaults of `configuration of project-config`
 */
const _projectConfig = {
/**
 * scope: `configuration of project-config`
 */
  scope: "project-config",
/**
 * Keys' defaults of `configuration of project-config`
 */
  defaults: {
    "fileNestingUpdater.upstreamBranch": "main",
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    "test.annotations": true,
    "test.position": "before",
  } satisfies ProjectConfig,
}

/**
 * Reactive ConfigObject of `configuration of project-config`
 * @example
 * let configValue = projectConfigConfigObject.fileNestingUpdater.upstreamBranch //get value 
 * projectConfigConfigObject.fileNestingUpdater.upstreamBranch = true // set value
 * projectConfigConfigObject.$update("fileNestingUpdater.upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const projectConfigConfigObject = defineConfigObject<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of project-config`
 * @example
 * let configValue:string =projectConfigConfigs.fileNestingUpdater.upstreamBranch.value //get value 
 * projectConfigConfigs.fileNestingUpdater.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * projectConfigConfigs.fileNestingUpdater.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const projectConfigConfigs = defineConfigs<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)

/**
 * Config keys of `configuration of project-config.fileNestingUpdater`
 */
export interface FileNestingUpdater {
  /**
   * The branch name of upstream repo
   * @key `project-config.fileNestingUpdater.upstreamBranch`
   * @default `"main"`
   * @type `string`
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @key `project-config.fileNestingUpdater.upstreamRepo`
   * @default `"antfu/vscode-file-nesting-config"`
   * @type `string`
   */
  "upstreamRepo": string,
}

/**
 * Scoped defaults of `configuration of project-config.fileNestingUpdater`
 */
const _fileNestingUpdater = {
/**
 * scope: `configuration of project-config.fileNestingUpdater`
 */
  scope: "project-config.fileNestingUpdater",
/**
 * Keys' defaults of `configuration of project-config.fileNestingUpdater`
 */
  defaults: {
    "upstreamBranch": "main",
    "upstreamRepo": "antfu/vscode-file-nesting-config",
  } satisfies FileNestingUpdater,
}

/**
 * Reactive ConfigObject of `configuration of project-config.fileNestingUpdater`
 * @example
 * let configValue = fileNestingUpdaterConfigObject.upstreamBranch //get value 
 * fileNestingUpdaterConfigObject.upstreamBranch = true // set value
 * fileNestingUpdaterConfigObject.$update("upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const fileNestingUpdaterConfigObject = defineConfigObject<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of project-config.fileNestingUpdater`
 * @example
 * let configValue:string =fileNestingUpdaterConfigs.upstreamBranch.value //get value 
 * fileNestingUpdaterConfigs.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * fileNestingUpdaterConfigs.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const fileNestingUpdaterConfigs = defineConfigs<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)

/**
 * Config keys of `configuration of project-config.test`
 */
export interface Test {
  /**
   * Enabled project-config inline annotations
   * @key `project-config.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @key `project-config.test.position`
   * @default `"before"`
   * @type `string`
   */
  "position": ("after" | "before"),
}

/**
 * Scoped defaults of `configuration of project-config.test`
 */
const _test = {
/**
 * scope: `configuration of project-config.test`
 */
  scope: "project-config.test",
/**
 * Keys' defaults of `configuration of project-config.test`
 */
  defaults: {
    "annotations": true,
    "position": "before",
  } satisfies Test,
}

/**
 * Reactive ConfigObject of `configuration of project-config.test`
 * @example
 * let configValue = testConfigObject.annotations //get value 
 * testConfigObject.annotations = true // set value
 * testConfigObject.$update("annotations", !configValue, ConfigurationTarget.Workspace, true)
 */
export const testConfigObject = defineConfigObject<Test>(
  _test.scope,
  _test.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of project-config.test`
 * @example
 * let configValue:boolean =testConfigs.annotations.value //get value 
 * testConfigs.annotations.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * testConfigs.annotations.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const testConfigs = defineConfigs<Test>(
  _test.scope,
  _test.defaults
)

/**
 * Config keys of `configuration of root`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   * @key `xxx`
   * @default `true`
   * @type `boolean`
   */
  "xxx": boolean,
  /**
   * Enabled project-config inline annotations
   * @key `yyyy`
   * @default `true`
   * @type `boolean`
   */
  "yyyy": boolean,
}

/**
 * Scoped defaults of `configuration of root`
 */
const _root = {
/**
 * scope: `configuration of root`
 */
  scope: "",
/**
 * Keys' defaults of `configuration of root`
 */
  defaults: {
    "xxx": true,
    "yyyy": true,
  } satisfies Root,
}

/**
 * Reactive ConfigObject of `configuration of root`
 * @example
 * let configValue = rootConfigObject.xxx //get value 
 * rootConfigObject.xxx = true // set value
 * rootConfigObject.$update("xxx", !configValue, ConfigurationTarget.Workspace, true)
 */
export const rootConfigObject = defineConfigObject<Root>(
  _root.scope,
  _root.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of root`
 * @example
 * let configValue:boolean =rootConfigs.xxx.value //get value 
 * rootConfigs.xxx.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * rootConfigs.xxx.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const rootConfigs = defineConfigs<Root>(
  _root.scope,
  _root.defaults
)

/**
 * Config keys of `configuration of project-config2`
 */
export interface ProjectConfig2 {
  /**
   * Enabled project-config inline annotations
   * @key `project-config2.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "test.annotations": boolean,
}

/**
 * Scoped defaults of `configuration of project-config2`
 */
const _projectConfig2 = {
/**
 * scope: `configuration of project-config2`
 */
  scope: "project-config2",
/**
 * Keys' defaults of `configuration of project-config2`
 */
  defaults: {
    "test.annotations": true,
  } satisfies ProjectConfig2,
}

/**
 * Reactive ConfigObject of `configuration of project-config2`
 * @example
 * let configValue = projectConfig2ConfigObject.test.annotations //get value 
 * projectConfig2ConfigObject.test.annotations = true // set value
 * projectConfig2ConfigObject.$update("test.annotations", !configValue, ConfigurationTarget.Workspace, true)
 */
export const projectConfig2ConfigObject = defineConfigObject<ProjectConfig2>(
  _projectConfig2.scope,
  _projectConfig2.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of project-config2`
 * @example
 * let configValue:boolean =projectConfig2Configs.test.annotations.value //get value 
 * projectConfig2Configs.test.annotations.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * projectConfig2Configs.test.annotations.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const projectConfig2Configs = defineConfigs<ProjectConfig2>(
  _projectConfig2.scope,
  _projectConfig2.defaults
)

/**
 * Config keys of `configuration of project-config2.test`
 */
export interface ProjectConfig2Test {
  /**
   * Enabled project-config inline annotations
   * @key `project-config2.test.annotations`
   * @default `true`
   * @type `boolean`
   */
  "annotations": boolean,
}

/**
 * Scoped defaults of `configuration of project-config2.test`
 */
const _projectConfig2Test = {
/**
 * scope: `configuration of project-config2.test`
 */
  scope: "project-config2.test",
/**
 * Keys' defaults of `configuration of project-config2.test`
 */
  defaults: {
    "annotations": true,
  } satisfies ProjectConfig2Test,
}

/**
 * Reactive ConfigObject of `configuration of project-config2.test`
 * @example
 * let configValue = projectConfig2TestConfigObject.annotations //get value 
 * projectConfig2TestConfigObject.annotations = true // set value
 * projectConfig2TestConfigObject.$update("annotations", !configValue, ConfigurationTarget.Workspace, true)
 */
export const projectConfig2TestConfigObject = defineConfigObject<ProjectConfig2Test>(
  _projectConfig2Test.scope,
  _projectConfig2Test.defaults
)
/**
 * Reactive ToConfigRefs of `configuration of project-config2.test`
 * @example
 * let configValue:boolean =projectConfig2TestConfigs.annotations.value //get value 
 * projectConfig2TestConfigs.annotations.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * projectConfig2TestConfigs.annotations.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const projectConfig2TestConfigs = defineConfigs<ProjectConfig2Test>(
  _projectConfig2Test.scope,
  _projectConfig2Test.defaults
)
