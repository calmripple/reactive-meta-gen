/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.remove-watch-dir"
  | "project-config.add-watch-dir"
  | "extension.emeraldwalk.enableRunOnSave"
  | "extension.emeraldwalk.disableRunOnSave"

export function useCommandKey(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(commandFullKey, callback)
}

/**
 * Update config now
 * @value `project-config.manualUpdate`
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
  return useCommandKey("project-config.manualUpdate", callback)
}

/**
 * remove watch dir
 * @value `project-config.remove-watch-dir`
 */
export function useCommandRemoveWatchDir(callback: (...args: any[]) => any) {
  return useCommandKey("project-config.remove-watch-dir", callback)
}

/**
 * add watch dir
 * @value `project-config.add-watch-dir`
 */
export function useCommandAddWatchDir(callback: (...args: any[]) => any) {
  return useCommandKey("project-config.add-watch-dir", callback)
}

/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkEnableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandKey("extension.emeraldwalk.enableRunOnSave", callback)
}

/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkDisableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandKey("extension.emeraldwalk.disableRunOnSave", callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "ww_should_not_show_up"

/**
 * Section Type of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   */
  "test.position": ("after" | "before"),
}

/**
 * Section Type of `project-config.fileNestingUpdater`
 */
export interface ProjectConfigFileNestingUpdater {
  /**
   * The branch name of upstream repo
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   */
  "upstreamRepo": string,
}

/**
 * Section Type of `project-config.test`
 */
export interface ProjectConfigTest {
  /**
   * Enabled project-config inline annotations
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   */
  "position": ("after" | "before"),
}

/**
 * Section Type of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   */
  "xxx": boolean,
}

/**
 * Section Type of `emeraldwalk`
 */
export interface Emeraldwalk {
  "runonsave": {
      /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    'autoClearConsole': boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    'shell'?: string
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters': string[]
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters1': string[]
    /**
     * 
     * @default `undefined`
     */
    'commands'?: {
              /**
         * Regex for matching files to run commands on 
         * 
         * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
         * 
         * e.g.
         * "match": "some\\\\directory\\\\.*"
         * @default `".*"`
         */
        'match': string
        /**
         * Regex for matching files *not* to run commands on.
         * @default `".*"`
         */
        'notMatch': string
        /**
         * Command to execute on save.
         * @default `"echo ${file}"`
         */
        'cmd': string
        /**
         * Run command asynchronously.
         * @default `false`
         */
        'isAsync': boolean 
      }[] 
  },
}
const projectConfigConfig = {

  "project-config": {
    /**
     * The branch name of upstream repo
     */
    "fileNestingUpdater.upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    /**
     * Enabled project-config inline annotations
     */
    "test.annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "test.position": "before",
  } satisfies ProjectConfig,


  "project-config.fileNestingUpdater": {
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": "antfu/vscode-file-nesting-config",
  } satisfies ProjectConfigFileNestingUpdater,


  "project-config.test": {
    /**
     * Enabled project-config inline annotations
     */
    "annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "position": "before",
  } satisfies ProjectConfigTest,


  "": {
    /**
     * Enabled project-config inline annotations
     */
    "xxx": true,
  } satisfies Root,


  "emeraldwalk": {
    "runonsave": { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined },
  } satisfies Emeraldwalk,

}
export type ConfigKey = "project-config" | "project-config.fileNestingUpdater" | "project-config.test" | "" | "emeraldwalk"

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}
    
/**
 * ConfigObject of `project-config`
 * @example
 * const configValue = configObjectProjectConfig.fileNestingUpdater.upstreamBranch //get value 
 * configObjectProjectConfig.fileNestingUpdater.upstreamBranch = true // set value
 * configObjectProjectConfig.$update("fileNestingUpdater.upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectProjectConfig = useConfigObject("project-config")
/**
 * ToConfigRefs of `project-config`
 * @example
 * const configValue:string =configProjectConfig.fileNestingUpdater.upstreamBranch.value //get value 
 * configProjectConfig.fileNestingUpdater.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configProjectConfig.fileNestingUpdater.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configProjectConfig = useConfig("project-config")
/**
 * ConfigObject of `project-config.fileNestingUpdater`
 * @example
 * const configValue = configObjectProjectConfigFileNestingUpdater.upstreamBranch //get value 
 * configObjectProjectConfigFileNestingUpdater.upstreamBranch = true // set value
 * configObjectProjectConfigFileNestingUpdater.$update("upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectProjectConfigFileNestingUpdater = useConfigObject("project-config.fileNestingUpdater")
/**
 * ToConfigRefs of `project-config.fileNestingUpdater`
 * @example
 * const configValue:string =configProjectConfigFileNestingUpdater.upstreamBranch.value //get value 
 * configProjectConfigFileNestingUpdater.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configProjectConfigFileNestingUpdater.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configProjectConfigFileNestingUpdater = useConfig("project-config.fileNestingUpdater")
/**
 * ConfigObject of `project-config.test`
 * @example
 * const configValue = configObjectProjectConfigTest.annotations //get value 
 * configObjectProjectConfigTest.annotations = true // set value
 * configObjectProjectConfigTest.$update("annotations", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectProjectConfigTest = useConfigObject("project-config.test")
/**
 * ToConfigRefs of `project-config.test`
 * @example
 * const configValue:boolean =configProjectConfigTest.annotations.value //get value 
 * configProjectConfigTest.annotations.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configProjectConfigTest.annotations.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configProjectConfigTest = useConfig("project-config.test")
/**
 * ConfigObject of `virtual(Keys in the root)`
 * @example
 * const configValue = configObjectRoot.xxx //get value 
 * configObjectRoot.xxx = true // set value
 * configObjectRoot.$update("xxx", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectRoot = useConfigObject("")
/**
 * ToConfigRefs of `virtual(Keys in the root)`
 * @example
 * const configValue:boolean =configRoot.xxx.value //get value 
 * configRoot.xxx.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configRoot.xxx.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configRoot = useConfig("")
/**
 * ConfigObject of `emeraldwalk`
 * @example
 * const configValue = configObjectEmeraldwalk.runonsave //get value 
 * configObjectEmeraldwalk.runonsave = true // set value
 * configObjectEmeraldwalk.$update("runonsave", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectEmeraldwalk = useConfigObject("emeraldwalk")
/**
 * ToConfigRefs of `emeraldwalk`
 * @example
 * const configValue:object =configEmeraldwalk.runonsave.value //get value 
 * configEmeraldwalk.runonsave.value = { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined } // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configEmeraldwalk.runonsave.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configEmeraldwalk = useConfig("emeraldwalk")
