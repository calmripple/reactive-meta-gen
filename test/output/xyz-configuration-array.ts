/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand, useCommands } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = "cnjimbo.project-config"

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "base"
  | "manualUpdate"
  | "project-config.manualUpdate"
  | "project-config.remove-watch-dir"
  | "remove-watch-dir"
  | "project-config.add-watch-dir"
  | "extension.emeraldwalk.enableRunOnSave"
  | "extension.emeraldwalk.disableRunOnSave"

export function useCommandBase(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(commandFullKey, callback)
}

export function useCommandsBase(commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void {
  return useCommands(commands)
}


/**
 * Update config now
 * @value `base` identifier of the command 
 */
export function useCommandBase_2(callback: (...args: any[]) => any) {
  return useCommandBase("base", callback)
}

/**
 * Update config now
 * @value `manualUpdate` identifier of the command 
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
  return useCommandBase("manualUpdate", callback)
}

/**
 * Update config now
 * @value `project-config.manualUpdate` identifier of the command 
 */
export function useCommandProjectConfigManualUpdate(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.manualUpdate", callback)
}

/**
 * remove watch dir
 * @value `project-config.remove-watch-dir` identifier of the command 
 */
export function useCommandRemoveWatchDir(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.remove-watch-dir", callback)
}

/**
 * remove watch dir
 * @value `remove-watch-dir` identifier of the command 
 */
export function useCommandRemoveWatchDir_2(callback: (...args: any[]) => any) {
  return useCommandBase("remove-watch-dir", callback)
}

/**
 * add watch dir
 * @value `project-config.add-watch-dir` identifier of the command 
 */
export function useCommandAddWatchDir(callback: (...args: any[]) => any) {
  return useCommandBase("project-config.add-watch-dir", callback)
}

/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave` identifier of the command 
 */
export function useCommandExtensionEmeraldwalkEnableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandBase("extension.emeraldwalk.enableRunOnSave", callback)
}

/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave` identifier of the command 
 */
export function useCommandExtensionEmeraldwalkDisableRunOnSave(callback: (...args: any[]) => any) {
  return useCommandBase("extension.emeraldwalk.disableRunOnSave", callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "ww_should_not_show_up"

/**
 * Section Type of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   */
  "test.position": ("after" | "before"),
}

/**
 * Section Type of `project-config.fileNestingUpdater`
 */
export interface FileNestingUpdater {
  /**
   * The branch name of upstream repo
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   */
  "upstreamRepo": string,
}

/**
 * Section Type of `project-config.test`
 */
export interface Test {
  /**
   * Enabled project-config inline annotations
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   */
  "position": ("after" | "before"),
}

/**
 * Section Type of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   */
  "xxx": boolean,
}

/**
 * Section Type of `emeraldwalk`
 */
export interface Emeraldwalk {
  "runonsave": {
      /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    'autoClearConsole': boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    'shell'?: string
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters': string[]
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters1': string[]
    /**
     * 
     * @default `undefined`
     */
    'commands'?: {
              /**
         * Regex for matching files to run commands on 
         * 
         * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
         * 
         * e.g.
         * "match": "some\\\\directory\\\\.*"
         * @default `".*"`
         */
        'match': string
        /**
         * Regex for matching files *not* to run commands on.
         * @default `".*"`
         */
        'notMatch': string
        /**
         * Command to execute on save.
         * @default `"echo ${file}"`
         */
        'cmd': string
        /**
         * Run command asynchronously.
         * @default `false`
         */
        'isAsync': boolean 
      }[] 
  },
}

const projectConfigConfig = {

  /**
   * Section defaults of `project-config`
   */
  "project-config": {
    /**
     * The branch name of upstream repo
     */
    "fileNestingUpdater.upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    /**
     * Enabled project-config inline annotations
     */
    "test.annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "test.position": "before",
  } satisfies ProjectConfig as ProjectConfig,


  /**
   * Section defaults of `project-config.fileNestingUpdater`
   */
  "project-config.fileNestingUpdater": {
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": "antfu/vscode-file-nesting-config",
  } satisfies FileNestingUpdater as FileNestingUpdater,


  /**
   * Section defaults of `project-config.test`
   */
  "project-config.test": {
    /**
     * Enabled project-config inline annotations
     */
    "annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "position": "before",
  } satisfies Test as Test,


  /**
   * Section defaults of `virtual(Keys in the root)`
   */
  "": {
    /**
     * Enabled project-config inline annotations
     */
    "xxx": true,
  } satisfies Root as Root,


  /**
   * Section defaults of `emeraldwalk`
   */
  "emeraldwalk": {
    "runonsave": { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined },
  } satisfies Emeraldwalk as Emeraldwalk,

}
export type ConfigKey = "project-config" | "project-config.fileNestingUpdater" | "project-config.test" | "" | "emeraldwalk"

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}
    
/**
 * ConfigObject of `project-config`
 * @example
 * const oldVal = configObjectProjectConfig.fileNestingUpdater.upstreamBranch //get value 
 * configObjectProjectConfig.$update("fileNestingUpdater.upstreamBranch", oldVal) //update value
 */
export const configObjectProjectConfig = useConfigObject("project-config")
/**
 * ToConfigRefs of `project-config`
 * @example
 * const oldVal:string =configProjectConfig.fileNestingUpdater.upstreamBranch.value //get value 
 * configProjectConfig.fileNestingUpdater.upstreamBranch.update(oldVal) //update value
 */
export const configProjectConfig = useConfig("project-config")
/**
 * ConfigObject of `project-config.fileNestingUpdater`
 * @example
 * const oldVal = configObjectFileNestingUpdater.upstreamBranch //get value 
 * configObjectFileNestingUpdater.$update("upstreamBranch", oldVal) //update value
 */
export const configObjectFileNestingUpdater = useConfigObject("project-config.fileNestingUpdater")
/**
 * ToConfigRefs of `project-config.fileNestingUpdater`
 * @example
 * const oldVal:string =configFileNestingUpdater.upstreamBranch.value //get value 
 * configFileNestingUpdater.upstreamBranch.update(oldVal) //update value
 */
export const configFileNestingUpdater = useConfig("project-config.fileNestingUpdater")
/**
 * ConfigObject of `project-config.test`
 * @example
 * const oldVal = configObjectTest.annotations //get value 
 * configObjectTest.$update("annotations", oldVal) //update value
 */
export const configObjectTest = useConfigObject("project-config.test")
/**
 * ToConfigRefs of `project-config.test`
 * @example
 * const oldVal:boolean =configTest.annotations.value //get value 
 * configTest.annotations.update(oldVal) //update value
 */
export const configTest = useConfig("project-config.test")
/**
 * ConfigObject of `virtual(Keys in the root)`
 * @example
 * const oldVal = configObjectRoot.xxx //get value 
 * configObjectRoot.$update("xxx", oldVal) //update value
 */
export const configObjectRoot = useConfigObject("")
/**
 * ToConfigRefs of `virtual(Keys in the root)`
 * @example
 * const oldVal:boolean =configRoot.xxx.value //get value 
 * configRoot.xxx.update(oldVal) //update value
 */
export const configRoot = useConfig("")
/**
 * ConfigObject of `emeraldwalk`
 * @example
 * const oldVal = configObjectEmeraldwalk.runonsave //get value 
 * configObjectEmeraldwalk.$update("runonsave", oldVal) //update value
 */
export const configObjectEmeraldwalk = useConfigObject("emeraldwalk")
/**
 * ToConfigRefs of `emeraldwalk`
 * @example
 * const oldVal:object =configEmeraldwalk.runonsave.value //get value 
 * configEmeraldwalk.runonsave.update(oldVal) //update value
 */
export const configEmeraldwalk = useConfig("emeraldwalk")
