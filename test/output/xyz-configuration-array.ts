/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "cnjimbo"
export const name = "project-config"
export const version = "1.1.2"
export const displayName = "Project Config Updater"
export const description = "Export current settings to workspace config file "
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "project-config.manualUpdate"
  | "project-config.remove-watch-dir"
  | "project-config.add-watch-dir"
  | "extension.emeraldwalk.enableRunOnSave"
  | "extension.emeraldwalk.disableRunOnSave"

/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
  /**
   * Update config now
   * @value `project-config.manualUpdate`
   * @example
   * useCommand(commands.manualUpdate, async () => {
   *   //do actions or update config 
   * })
   */
  manualUpdate: "project-config.manualUpdate",
  /**
   * remove watch dir
   * @value `project-config.remove-watch-dir`
   * @example
   * useCommand(commands.removeWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  removeWatchDir: "project-config.remove-watch-dir",
  /**
   * add watch dir
   * @value `project-config.add-watch-dir`
   * @example
   * useCommand(commands.addWatchDir, async () => {
   *   //do actions or update config 
   * })
   */
  addWatchDir: "project-config.add-watch-dir",
  /**
   * Run On Save: Enable
   * @value `extension.emeraldwalk.enableRunOnSave`
   * @example
   * useCommand(commands.extensionEmeraldwalkEnableRunOnSave, async () => {
   *   //do actions or update config 
   * })
   */
  extensionEmeraldwalkEnableRunOnSave: "extension.emeraldwalk.enableRunOnSave",
  /**
   * Run On Save: Disable
   * @value `extension.emeraldwalk.disableRunOnSave`
   * @example
   * useCommand(commands.extensionEmeraldwalkDisableRunOnSave, async () => {
   *   //do actions or update config 
   * })
   */
  extensionEmeraldwalkDisableRunOnSave: "extension.emeraldwalk.disableRunOnSave",
} satisfies Record<string, CommandKey>
/**
 * Update config now
 * @value `project-config.manualUpdate`
 */
export function useCommandManualUpdate(callback: (...args: any[]) => any) {
  useCommand(commands.manualUpdate, callback)
}
/**
 * remove watch dir
 * @value `project-config.remove-watch-dir`
 */
export function useCommandRemoveWatchDir(callback: (...args: any[]) => any) {
  useCommand(commands.removeWatchDir, callback)
}
/**
 * add watch dir
 * @value `project-config.add-watch-dir`
 */
export function useCommandAddWatchDir(callback: (...args: any[]) => any) {
  useCommand(commands.addWatchDir, callback)
}
/**
 * Run On Save: Enable
 * @value `extension.emeraldwalk.enableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkEnableRunOnSave(callback: (...args: any[]) => any) {
  useCommand(commands.extensionEmeraldwalkEnableRunOnSave, callback)
}
/**
 * Run On Save: Disable
 * @value `extension.emeraldwalk.disableRunOnSave`
 */
export function useCommandExtensionEmeraldwalkDisableRunOnSave(callback: (...args: any[]) => any) {
  useCommand(commands.extensionEmeraldwalkDisableRunOnSave, callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "ww_should_not_show_up"

/**
 * Config keys of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "fileNestingUpdater.upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "fileNestingUpdater.upstreamRepo": string,
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "test.annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "test.position": ("after" | "before"),
}

/**
 * Scoped defaults of `project-config`
 */
const _projectConfig = {
  /**
   * scope: `project-config`
   */
  scope: "project-config",
  /**
   * Keys' defaults of `project-config`
   */
  defaults: {
    /**
     * The branch name of upstream repo
     */
    "fileNestingUpdater.upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "fileNestingUpdater.upstreamRepo": "antfu/vscode-file-nesting-config",
    /**
     * Enabled project-config inline annotations
     */
    "test.annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "test.position": "before",
  } satisfies ProjectConfig,
}

/**
 * Reactive ConfigObject of `project-config`
 * @example
 * const configValue = useConfigObjectProjectConfig.fileNestingUpdater.upstreamBranch //get value 
 * useConfigObjectProjectConfig.fileNestingUpdater.upstreamBranch = true // set value
 * useConfigObjectProjectConfig.$update("fileNestingUpdater.upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const useConfigObjectProjectConfig = defineConfigObject<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)
/**
 * Reactive ToConfigRefs of `project-config`
 * @example
 * const configValue:string =useConfigsProjectConfig.fileNestingUpdater.upstreamBranch.value //get value 
 * useConfigsProjectConfig.fileNestingUpdater.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * useConfigsProjectConfig.fileNestingUpdater.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const useConfigsProjectConfig = defineConfigs<ProjectConfig>(
  _projectConfig.scope,
  _projectConfig.defaults
)

/**
 * Config keys of `project-config.fileNestingUpdater`
 */
export interface FileNestingUpdater {
  /**
   * The branch name of upstream repo
   * @default "main"
   */
  "upstreamBranch": string,
  /**
   * The upstream repo you want to update from
   * @default "antfu/vscode-file-nesting-config"
   */
  "upstreamRepo": string,
}

/**
 * Scoped defaults of `project-config.fileNestingUpdater`
 */
const _fileNestingUpdater = {
  /**
   * scope: `project-config.fileNestingUpdater`
   */
  scope: "project-config.fileNestingUpdater",
  /**
   * Keys' defaults of `project-config.fileNestingUpdater`
   */
  defaults: {
    /**
     * The branch name of upstream repo
     */
    "upstreamBranch": "main",
    /**
     * The upstream repo you want to update from
     */
    "upstreamRepo": "antfu/vscode-file-nesting-config",
  } satisfies FileNestingUpdater,
}

/**
 * Reactive ConfigObject of `project-config.fileNestingUpdater`
 * @example
 * const configValue = useConfigObjectFileNestingUpdater.upstreamBranch //get value 
 * useConfigObjectFileNestingUpdater.upstreamBranch = true // set value
 * useConfigObjectFileNestingUpdater.$update("upstreamBranch", !configValue, ConfigurationTarget.Workspace, true)
 */
export const useConfigObjectFileNestingUpdater = defineConfigObject<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)
/**
 * Reactive ToConfigRefs of `project-config.fileNestingUpdater`
 * @example
 * const configValue:string =useConfigsFileNestingUpdater.upstreamBranch.value //get value 
 * useConfigsFileNestingUpdater.upstreamBranch.value = "main" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * useConfigsFileNestingUpdater.upstreamBranch.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const useConfigsFileNestingUpdater = defineConfigs<FileNestingUpdater>(
  _fileNestingUpdater.scope,
  _fileNestingUpdater.defaults
)

/**
 * Config keys of `project-config.test`
 */
export interface Test {
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "annotations": boolean,
  /**
   * Position the icon before or after the icon name
   * @default "before"
   */
  "position": ("after" | "before"),
}

/**
 * Scoped defaults of `project-config.test`
 */
const _test = {
  /**
   * scope: `project-config.test`
   */
  scope: "project-config.test",
  /**
   * Keys' defaults of `project-config.test`
   */
  defaults: {
    /**
     * Enabled project-config inline annotations
     */
    "annotations": true,
    /**
     * Position the icon before or after the icon name
     */
    "position": "before",
  } satisfies Test,
}

/**
 * Reactive ConfigObject of `project-config.test`
 * @example
 * const configValue = useConfigObjectTest.annotations //get value 
 * useConfigObjectTest.annotations = true // set value
 * useConfigObjectTest.$update("annotations", !configValue, ConfigurationTarget.Workspace, true)
 */
export const useConfigObjectTest = defineConfigObject<Test>(
  _test.scope,
  _test.defaults
)
/**
 * Reactive ToConfigRefs of `project-config.test`
 * @example
 * const configValue:boolean =useConfigsTest.annotations.value //get value 
 * useConfigsTest.annotations.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * useConfigsTest.annotations.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const useConfigsTest = defineConfigs<Test>(
  _test.scope,
  _test.defaults
)

/**
 * Config keys of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   * @default true
   */
  "xxx": boolean,
}

/**
 * Scoped defaults of `virtual(Keys in the root)`
 */
const _root = {
  /**
   * scope: `virtual(Keys in the root)`
   */
  scope: "",
  /**
   * Keys' defaults of `virtual(Keys in the root)`
   */
  defaults: {
    /**
     * Enabled project-config inline annotations
     */
    "xxx": true,
  } satisfies Root,
}

/**
 * Reactive ConfigObject of `virtual(Keys in the root)`
 * @example
 * const configValue = useConfigObjectRoot.xxx //get value 
 * useConfigObjectRoot.xxx = true // set value
 * useConfigObjectRoot.$update("xxx", !configValue, ConfigurationTarget.Workspace, true)
 */
export const useConfigObjectRoot = defineConfigObject<Root>(
  _root.scope,
  _root.defaults
)
/**
 * Reactive ToConfigRefs of `virtual(Keys in the root)`
 * @example
 * const configValue:boolean =useConfigsRoot.xxx.value //get value 
 * useConfigsRoot.xxx.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * useConfigsRoot.xxx.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const useConfigsRoot = defineConfigs<Root>(
  _root.scope,
  _root.defaults
)

/**
 * Config keys of `emeraldwalk`
 */
export interface Emeraldwalk {
  /**
   * 
   * @default { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined }
   */
  "runonsave": {
      /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    'autoClearConsole': boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    'shell'?: string
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters': string[]
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    'delimiters1': string[]
    /**
     * 
     * @default `undefined`
     */
    'commands'?: {
              /**
         * Regex for matching files to run commands on 
         * 
         * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
         * 
         * e.g.
         * "match": "some\\\\directory\\\\.*"
         * @default `".*"`
         */
        'match': string
        /**
         * Regex for matching files *not* to run commands on.
         * @default `".*"`
         */
        'notMatch': string
        /**
         * Command to execute on save.
         * @default `"echo ${file}"`
         */
        'cmd': string
        /**
         * Run command asynchronously.
         * @default `false`
         */
        'isAsync': boolean 
      }[] 
  },
}

/**
 * Scoped defaults of `emeraldwalk`
 */
const _emeraldwalk = {
  /**
   * scope: `emeraldwalk`
   */
  scope: "emeraldwalk",
  /**
   * Keys' defaults of `emeraldwalk`
   */
  defaults: {
    "runonsave": { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined },
  } satisfies Emeraldwalk,
}

/**
 * Reactive ConfigObject of `emeraldwalk`
 * @example
 * const configValue = useConfigObjectEmeraldwalk.runonsave //get value 
 * useConfigObjectEmeraldwalk.runonsave = true // set value
 * useConfigObjectEmeraldwalk.$update("runonsave", !configValue, ConfigurationTarget.Workspace, true)
 */
export const useConfigObjectEmeraldwalk = defineConfigObject<Emeraldwalk>(
  _emeraldwalk.scope,
  _emeraldwalk.defaults
)
/**
 * Reactive ToConfigRefs of `emeraldwalk`
 * @example
 * const configValue:object =useConfigsEmeraldwalk.runonsave.value //get value 
 * useConfigsEmeraldwalk.runonsave.value = { "autoClearConsole": false, "shell": undefined, "delimiters": [":","--","-","/"], "delimiters1": [":","--","-","/"], "commands": undefined } // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * useConfigsEmeraldwalk.runonsave.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const useConfigsEmeraldwalk = defineConfigs<Emeraldwalk>(
  _emeraldwalk.scope,
  _emeraldwalk.defaults
)
