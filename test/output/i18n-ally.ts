// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs } from 'reactive-vscode'

export const publisher = "lokalise"
export const name = "i18n-ally"
export const version = "2.12.0"
export const displayName = "i18n Ally"
export const description = "🌍 All in one i18n extension for VS Code"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "i18n-ally.config-locales"
  | "i18n-ally.config-locales-auto"
  | "i18n-ally.config-display-language"
  | "i18n-ally.config-source-language"
  | "i18n-ally.set-display-language"
  | "i18n-ally.set-source-language"
  | "i18n-ally.copy-key"
  | "i18n-ally.translate-key"
  | "i18n-ally.edit-key"
  | "i18n-ally.open-key"
  | "i18n-ally.delete-key"
  | "i18n-ally.rename-key"
  | "i18n-ally.extract-text"
  | "i18n-ally.extract-hard-strings-batch"
  | "i18n-ally.detect_hard_strings"
  | "i18n-ally.open-url"
  | "i18n-ally.fulfill-keys"
  | "i18n-ally.refresh-usage"
  | "i18n-ally.support"
  | "i18n-ally.locale-visibility-show"
  | "i18n-ally.locale-visibility-hide"
  | "i18n-ally.new-key"
  | "i18n-ally.duplicate-key"
  | "i18n-ally.mark-key-as-in-use"
  | "i18n-ally.open-in-editor"
  | "i18n-ally.open-editor"
  | "i18n-ally.review.comment"
  | "i18n-ally.review.approve"
  | "i18n-ally.review.request-change"
  | "i18n-ally.review.edit"
  | "i18n-ally.review.resolve"
  | "i18n-ally.review.resolve-thread"
  | "i18n-ally.review.apply-translation"
  | "i18n-ally.review.apply-suggestion"
  | "i18n-ally.insert-key"
  | "i18n-ally.deepl-usage"
  | "i18n-ally.go-to-range"
  | "i18n-ally.go-to-next-usage"
  | "i18n-ally.go-to-prev-usage"
  | "i18n-ally.open-docs-hard-string"
  | "i18n-ally.extract-disable-auto-detect"
  | "i18n-ally.extract-enable-auto-detect"

/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commands = {
  /**
   * %command.config_locales%
   * @value `i18n-ally.config-locales`
   * @example
   * useCommand(commands.configLocales, async () => {
   *   //do actions or update config 
   * })
   */
  configLocales: "i18n-ally.config-locales",
  /**
   * %command.config_locales_auto%
   * @value `i18n-ally.config-locales-auto`
   * @example
   * useCommand(commands.configLocalesAuto, async () => {
   *   //do actions or update config 
   * })
   */
  configLocalesAuto: "i18n-ally.config-locales-auto",
  /**
   * %command.config_display_language%
   * @value `i18n-ally.config-display-language`
   * @example
   * useCommand(commands.configDisplayLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  configDisplayLanguage: "i18n-ally.config-display-language",
  /**
   * %command.config_source_language%
   * @value `i18n-ally.config-source-language`
   * @example
   * useCommand(commands.configSourceLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  configSourceLanguage: "i18n-ally.config-source-language",
  /**
   * %command.set_display_language%
   * @value `i18n-ally.set-display-language`
   * @example
   * useCommand(commands.setDisplayLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  setDisplayLanguage: "i18n-ally.set-display-language",
  /**
   * %command.set_source_language%
   * @value `i18n-ally.set-source-language`
   * @example
   * useCommand(commands.setSourceLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  setSourceLanguage: "i18n-ally.set-source-language",
  /**
   * %command.copy_key%
   * @value `i18n-ally.copy-key`
   * @example
   * useCommand(commands.copyKey, async () => {
   *   //do actions or update config 
   * })
   */
  copyKey: "i18n-ally.copy-key",
  /**
   * %command.translate_key%
   * @value `i18n-ally.translate-key`
   * @example
   * useCommand(commands.translateKey, async () => {
   *   //do actions or update config 
   * })
   */
  translateKey: "i18n-ally.translate-key",
  /**
   * %command.edit_key%
   * @value `i18n-ally.edit-key`
   * @example
   * useCommand(commands.editKey, async () => {
   *   //do actions or update config 
   * })
   */
  editKey: "i18n-ally.edit-key",
  /**
   * %command.open_key%
   * @value `i18n-ally.open-key`
   * @example
   * useCommand(commands.openKey, async () => {
   *   //do actions or update config 
   * })
   */
  openKey: "i18n-ally.open-key",
  /**
   * %command.delete_key%
   * @value `i18n-ally.delete-key`
   * @example
   * useCommand(commands.deleteKey, async () => {
   *   //do actions or update config 
   * })
   */
  deleteKey: "i18n-ally.delete-key",
  /**
   * %command.rename_key%
   * @value `i18n-ally.rename-key`
   * @example
   * useCommand(commands.renameKey, async () => {
   *   //do actions or update config 
   * })
   */
  renameKey: "i18n-ally.rename-key",
  /**
   * %refactor.extract_text%
   * @value `i18n-ally.extract-text`
   * @example
   * useCommand(commands.extractText, async () => {
   *   //do actions or update config 
   * })
   */
  extractText: "i18n-ally.extract-text",
  /**
   * Extract all hard-coded strings (experimental)
   * @value `i18n-ally.extract-hard-strings-batch`
   * @example
   * useCommand(commands.extractHardStringsBatch, async () => {
   *   //do actions or update config 
   * })
   */
  extractHardStringsBatch: "i18n-ally.extract-hard-strings-batch",
  /**
   * Detect hard-coded strings in current file (experimental)
   * @value `i18n-ally.detect_hard_strings`
   * @example
   * useCommand(commands.detectHardStrings, async () => {
   *   //do actions or update config 
   * })
   */
  detectHardStrings: "i18n-ally.detect_hard_strings",
  /**
   * %command.open_url%
   * @value `i18n-ally.open-url`
   * @example
   * useCommand(commands.openUrl, async () => {
   *   //do actions or update config 
   * })
   */
  openUrl: "i18n-ally.open-url",
  /**
   * %command.fulfill_keys%
   * @value `i18n-ally.fulfill-keys`
   * @example
   * useCommand(commands.fulfillKeys, async () => {
   *   //do actions or update config 
   * })
   */
  fulfillKeys: "i18n-ally.fulfill-keys",
  /**
   * %command.refresh_usage%
   * @value `i18n-ally.refresh-usage`
   * @example
   * useCommand(commands.refreshUsage, async () => {
   *   //do actions or update config 
   * })
   */
  refreshUsage: "i18n-ally.refresh-usage",
  /**
   * %feedback.support%
   * @value `i18n-ally.support`
   * @example
   * useCommand(commands.support, async () => {
   *   //do actions or update config 
   * })
   */
  support: "i18n-ally.support",
  /**
   * %command.locale_visibility_show%
   * @value `i18n-ally.locale-visibility-show`
   * @example
   * useCommand(commands.localeVisibilityShow, async () => {
   *   //do actions or update config 
   * })
   */
  localeVisibilityShow: "i18n-ally.locale-visibility-show",
  /**
   * %command.locale_visibility_hide%
   * @value `i18n-ally.locale-visibility-hide`
   * @example
   * useCommand(commands.localeVisibilityHide, async () => {
   *   //do actions or update config 
   * })
   */
  localeVisibilityHide: "i18n-ally.locale-visibility-hide",
  /**
   * %command.new_key%
   * @value `i18n-ally.new-key`
   * @example
   * useCommand(commands.newKey, async () => {
   *   //do actions or update config 
   * })
   */
  newKey: "i18n-ally.new-key",
  /**
   * %command.duplicate_key%
   * @value `i18n-ally.duplicate-key`
   * @example
   * useCommand(commands.duplicateKey, async () => {
   *   //do actions or update config 
   * })
   */
  duplicateKey: "i18n-ally.duplicate-key",
  /**
   * %command.mark_key_as_in_use%
   * @value `i18n-ally.mark-key-as-in-use`
   * @example
   * useCommand(commands.markKeyAsInUse, async () => {
   *   //do actions or update config 
   * })
   */
  markKeyAsInUse: "i18n-ally.mark-key-as-in-use",
  /**
   * %command.open_in_editor%
   * @value `i18n-ally.open-in-editor`
   * @example
   * useCommand(commands.openInEditor, async () => {
   *   //do actions or update config 
   * })
   */
  openInEditor: "i18n-ally.open-in-editor",
  /**
   * %command.open_editor%
   * @value `i18n-ally.open-editor`
   * @example
   * useCommand(commands.openEditor, async () => {
   *   //do actions or update config 
   * })
   */
  openEditor: "i18n-ally.open-editor",
  /**
   * %review.leave_comment%
   * @value `i18n-ally.review.comment`
   * @example
   * useCommand(commands.reviewComment, async () => {
   *   //do actions or update config 
   * })
   */
  reviewComment: "i18n-ally.review.comment",
  /**
   * %review.approve%
   * @value `i18n-ally.review.approve`
   * @example
   * useCommand(commands.reviewApprove, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApprove: "i18n-ally.review.approve",
  /**
   * %review.request_change%
   * @value `i18n-ally.review.request-change`
   * @example
   * useCommand(commands.reviewRequestChange, async () => {
   *   //do actions or update config 
   * })
   */
  reviewRequestChange: "i18n-ally.review.request-change",
  /**
   * %review.edit%
   * @value `i18n-ally.review.edit`
   * @example
   * useCommand(commands.reviewEdit, async () => {
   *   //do actions or update config 
   * })
   */
  reviewEdit: "i18n-ally.review.edit",
  /**
   * %review.resolve%
   * @value `i18n-ally.review.resolve`
   * @example
   * useCommand(commands.reviewResolve, async () => {
   *   //do actions or update config 
   * })
   */
  reviewResolve: "i18n-ally.review.resolve",
  /**
   * %review.resolve_all%
   * @value `i18n-ally.review.resolve-thread`
   * @example
   * useCommand(commands.reviewResolveThread, async () => {
   *   //do actions or update config 
   * })
   */
  reviewResolveThread: "i18n-ally.review.resolve-thread",
  /**
   * %review.apply_translation_candidate%
   * @value `i18n-ally.review.apply-translation`
   * @example
   * useCommand(commands.reviewApplyTranslation, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApplyTranslation: "i18n-ally.review.apply-translation",
  /**
   * %review.apply_suggestion%
   * @value `i18n-ally.review.apply-suggestion`
   * @example
   * useCommand(commands.reviewApplySuggestion, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApplySuggestion: "i18n-ally.review.apply-suggestion",
  /**
   * %command.insert_key%
   * @value `i18n-ally.insert-key`
   * @example
   * useCommand(commands.insertKey, async () => {
   *   //do actions or update config 
   * })
   */
  insertKey: "i18n-ally.insert-key",
  /**
   * %command.deepl_usage%
   * @value `i18n-ally.deepl-usage`
   * @example
   * useCommand(commands.deeplUsage, async () => {
   *   //do actions or update config 
   * })
   */
  deeplUsage: "i18n-ally.deepl-usage",
  /**
   * %command.go_to_range%
   * @value `i18n-ally.go-to-range`
   * @example
   * useCommand(commands.goToRange, async () => {
   *   //do actions or update config 
   * })
   */
  goToRange: "i18n-ally.go-to-range",
  /**
   * %command.go_to_next_usage%
   * @value `i18n-ally.go-to-next-usage`
   * @example
   * useCommand(commands.goToNextUsage, async () => {
   *   //do actions or update config 
   * })
   */
  goToNextUsage: "i18n-ally.go-to-next-usage",
  /**
   * %command.go_to_prev_usage%
   * @value `i18n-ally.go-to-prev-usage`
   * @example
   * useCommand(commands.goToPrevUsage, async () => {
   *   //do actions or update config 
   * })
   */
  goToPrevUsage: "i18n-ally.go-to-prev-usage",
  /**
   * %command.show_docs%
   * @value `i18n-ally.open-docs-hard-string`
   * @example
   * useCommand(commands.openDocsHardString, async () => {
   *   //do actions or update config 
   * })
   */
  openDocsHardString: "i18n-ally.open-docs-hard-string",
  /**
   * %command.extract.disable-auto-detect%
   * @value `i18n-ally.extract-disable-auto-detect`
   * @example
   * useCommand(commands.extractDisableAutoDetect, async () => {
   *   //do actions or update config 
   * })
   */
  extractDisableAutoDetect: "i18n-ally.extract-disable-auto-detect",
  /**
   * %command.extract.enable-auto-detect%
   * @value `i18n-ally.extract-enable-auto-detect`
   * @example
   * useCommand(commands.extractEnableAutoDetect, async () => {
   *   //do actions or update config 
   * })
   */
  extractEnableAutoDetect: "i18n-ally.extract-enable-auto-detect",
} satisfies Record<string, CommandKey>

/**
 * Config keys of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * 
   * @key `0`
   * @default `{ "i18n-ally.disabled": false, "i18n-ally.autoDetection": true, "i18n-ally.localesPaths": undefined, "i18n-ally.encoding": "utf-8", "i18n-ally.sourceLanguage": undefined, "i18n-ally.displayLanguage": undefined, "i18n-ally.ignoredLocales": undefined, "i18n-ally.keystyle": undefined, "i18n-ally.dirStructure": undefined, "i18n-ally.annotations": true, "i18n-ally.annotationInPlace": true, "i18n-ally.annotationMaxLength": 40, "i18n-ally.annotationDelimiter": "·", "i18n-ally.includeSubfolders": true, "i18n-ally.fullReloadOnChanged": false, "i18n-ally.showFlags": true, "i18n-ally.enabledFrameworks": undefined, "i18n-ally.enabledParsers": undefined, "i18n-ally.keysInUse": undefined, "i18n-ally.sortKeys": false, "i18n-ally.sortCompare": "binary", "i18n-ally.sortLocale": undefined, "i18n-ally.preferredDelimiter": "-", "i18n-ally.readonly": false, "i18n-ally.keepFulfilled": false, "i18n-ally.localeCountryMap": {}, "i18n-ally.indent": 2, "i18n-ally.disablePathParsing": false, "i18n-ally.tabStyle": "space", "i18n-ally.namespace": undefined, "i18n-ally.pathMatcher": undefined, "i18n-ally.languageTagSystem": "bcp47", "i18n-ally.ignoreFiles": undefined, "i18n-ally.theme.annotation": "rgba(153, 153, 153, .8)", "i18n-ally.theme.annotationMissing": "rgba(153, 153, 153, .3)", "i18n-ally.theme.annotationBorder": "rgba(153, 153, 153, .2)", "i18n-ally.theme.annotationMissingBorder": "rgba(153, 153, 153, .2)", "i18n-ally.regex.key": undefined, "i18n-ally.regex.usageMatch": undefined, "i18n-ally.regex.usageMatchAppend": undefined, "i18n-ally.refactor.templates": undefined, "i18n-ally.translate.saveAsCandidates": false, "i18n-ally.translate.fallbackToKey": false, "i18n-ally.translate.engines": ["google"], "i18n-ally.translate.parallels": 5, "i18n-ally.translate.promptSource": false, "i18n-ally.translate.overrideExisting": false, "i18n-ally.translate.google.apiKey": null, "i18n-ally.translate.deepl.apiKey": null, "i18n-ally.translate.baidu.appid": null, "i18n-ally.translate.baidu.apiSecret": null, "i18n-ally.translate.deepl.enableLog": false, "i18n-ally.translate.deepl.useFreeApiEntry": false, "i18n-ally.translate.libre.apiRoot": "http://localhost:5000", "i18n-ally.translate.openai.apiKey": null, "i18n-ally.translate.openai.apiRoot": "https://api.openai.com", "i18n-ally.translate.openai.apiModel": "gpt-3.5-turbo", "i18n-ally.usage.scanningIgnore": undefined, "i18n-ally.usage.derivedKeyRules": null, "i18n-ally.frameworks.ruby-rails.scopeRoot": "app/views", "i18n-ally.parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js", "i18n-ally.parsers.typescript.compilerOptions": {}, "i18n-ally.parsers.extendFileExtensions": {}, "i18n-ally.review.enabled": true, "i18n-ally.review.gutters": true, "i18n-ally.review.user.name": undefined, "i18n-ally.review.user.email": undefined, "i18n-ally.review.removeCommentOnResolved": false, "i18n-ally.editor.preferEditor": false, "i18n-ally.extract.keygenStrategy": "slug", "i18n-ally.extract.keygenStyle": "default", "i18n-ally.extract.keyPrefix": "", "i18n-ally.extract.keyMaxLength": null, "i18n-ally.extract.targetPickingStrategy": "none", "i18n-ally.extract.parsers.html": {}, "i18n-ally.extract.parsers.babel": {}, "i18n-ally.extract.autoDetect": false, "i18n-ally.extract.ignored": undefined, "i18n-ally.extract.ignoredByFiles": {}, "i18n-ally.parserOptions": undefined, "i18n-ally.defaultNamespace": undefined, "i18n-ally.derivedKeyRules": undefined, "i18n-ally.filenameMatchRegex": undefined, "i18n-ally.fileNamespace": undefined, "i18n-ally.keyMatchRegex": undefined, "vue-i18n-ally.localesPaths": undefined, "vue-i18n-ally.encoding": undefined, "vue-i18n-ally.sourceLanguage": undefined, "vue-i18n-ally.displayLanguage": undefined, "vue-i18n-ally.ignoredLocales": undefined, "vue-i18n-ally.keystyle": undefined, "vue-i18n-ally.dirStructure": undefined, "vue-i18n-ally.annotations": undefined, "vue-i18n-ally.annotationMaxLength": undefined, "vue-i18n-ally.annotationDelimiter": undefined, "vue-i18n-ally.filenameMatchRegex": undefined, "vue-i18n-ally.includeSubfolders": undefined, "vue-i18n-ally.fullReloadOnChanged": undefined, "vue-i18n-ally.sortKeys": undefined, "vue-i18n-ally.preferredDelimiter": undefined, "vue-i18n-ally.readonly": undefined }`
   * @type `object`
   */
  "0": { 
    /**
     * %config.disabled%
     * @key `i18n-ally.disabled`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.disabled': boolean
    /**
     * %config.auto_detection%
     * @key `i18n-ally.autoDetection`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.autoDetection': boolean
    /**
     * %config.locales_paths%
     * @key `i18n-ally.localesPaths`
     * @default `undefined`
     * @type `string,array`
     */
    'i18n-ally.localesPaths'?: (string | (string | undefined)[] | undefined)
    /**
     * %config.encoding%
     * @key `i18n-ally.encoding`
     * @default `"utf-8"`
     * @type `string`
     */
    'i18n-ally.encoding': string
    /**
     * %config.source_language%
     * @key `i18n-ally.sourceLanguage`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.sourceLanguage'?: (string | undefined)
    /**
     * %config.display_language%
     * @key `i18n-ally.displayLanguage`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.displayLanguage'?: (string | undefined)
    /**
     * %config.ignored_locales%
     * @key `i18n-ally.ignoredLocales`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.ignoredLocales'?: (unknown[] | undefined)
    /**
     * %config.keystyle%
     * @key `i18n-ally.keystyle`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.keystyle'?: ("auto" | "nested" | "flat" | undefined)
    /**
     * %config.dir_structure%
     * @key `i18n-ally.dirStructure`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.dirStructure'?: ("auto" | "file" | "dir" | undefined)
    /**
     * %config.annotations%
     * @key `i18n-ally.annotations`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.annotations': boolean
    /**
     * %config.annotation_in_place%
     * @key `i18n-ally.annotationInPlace`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.annotationInPlace': boolean
    /**
     * %config.annotation_max_length%
     * @key `i18n-ally.annotationMaxLength`
     * @default `40`
     * @type `number`
     */
    'i18n-ally.annotationMaxLength': number
    /**
     * %config.annotation_delimiter%
     * @key `i18n-ally.annotationDelimiter`
     * @default `"·"`
     * @type `string`
     */
    'i18n-ally.annotationDelimiter': string
    /**
     * %config.include_subfolders%
     * @key `i18n-ally.includeSubfolders`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.includeSubfolders': boolean
    /**
     * %config.full_reload_on_changed%
     * @key `i18n-ally.fullReloadOnChanged`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.fullReloadOnChanged': boolean
    /**
     * %config.show_flags%
     * @key `i18n-ally.showFlags`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.showFlags': boolean
    /**
     * %config.enabled_frameworks%
     * @key `i18n-ally.enabledFrameworks`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.enabledFrameworks'?: (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international" | undefined)[] | undefined)
    /**
     * %config.enabled_parsers%
     * @key `i18n-ally.enabledParsers`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.enabledParsers'?: (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl" | undefined)[] | undefined)
    /**
     * %config.keys_in_use%
     * @key `i18n-ally.keysInUse`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.keysInUse'?: ((string | undefined)[] | undefined)
    /**
     * %config.sort_keys%
     * @key `i18n-ally.sortKeys`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.sortKeys': boolean
    /**
     * %config.sort_compare%
     * @key `i18n-ally.sortCompare`
     * @default `"binary"`
     * @type `string`
     */
    'i18n-ally.sortCompare': ("binary" | "locale")
    /**
     * %config.sort_locale%
     * @key `i18n-ally.sortLocale`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.sortLocale'?: (string | undefined)
    /**
     * %config.preferred_delimiter%
     * @key `i18n-ally.preferredDelimiter`
     * @default `"-"`
     * @type `string`
     */
    'i18n-ally.preferredDelimiter': string
    /**
     * %config.readonly%
     * @key `i18n-ally.readonly`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.readonly': boolean
    /**
     * %config.keep_fulfill%
     * @key `i18n-ally.keepFulfilled`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.keepFulfilled': boolean
    /**
     * %config.locale_country_map%
     * @key `i18n-ally.localeCountryMap`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.localeCountryMap': Record<string, unknown>
    /**
     * %config.indent%
     * @key `i18n-ally.indent`
     * @default `2`
     * @type `number`
     */
    'i18n-ally.indent': number
    /**
     * %config.disable_path_parsing%
     * @key `i18n-ally.disablePathParsing`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.disablePathParsing': boolean
    /**
     * %config.tab_style%
     * @key `i18n-ally.tabStyle`
     * @default `"space"`
     * @type `string`
     */
    'i18n-ally.tabStyle': ("space" | "tab")
    /**
     * %config.namespace%
     * @key `i18n-ally.namespace`
     * @default `undefined`
     * @type `boolean`
     */
    'i18n-ally.namespace'?: (boolean | undefined)
    /**
     * %config.path_matcher%
     * @key `i18n-ally.pathMatcher`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.pathMatcher'?: (string | undefined)
    /**
     * %config.language_tag_system%
     * @key `i18n-ally.languageTagSystem`
     * @default `"bcp47"`
     * @type `string`
     */
    'i18n-ally.languageTagSystem': ("bcp47" | "legacy" | "none")
    /**
     * %config.ignore_files%
     * @key `i18n-ally.ignoreFiles`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.ignoreFiles'?: ((string | undefined)[] | undefined)
    /**
     * 
     * @key `i18n-ally.theme.annotation`
     * @default `"rgba(153, 153, 153, .8)"`
     * @type `string`
     */
    'i18n-ally.theme.annotation': string
    /**
     * 
     * @key `i18n-ally.theme.annotationMissing`
     * @default `"rgba(153, 153, 153, .3)"`
     * @type `string`
     */
    'i18n-ally.theme.annotationMissing': string
    /**
     * 
     * @key `i18n-ally.theme.annotationBorder`
     * @default `"rgba(153, 153, 153, .2)"`
     * @type `string`
     */
    'i18n-ally.theme.annotationBorder': string
    /**
     * 
     * @key `i18n-ally.theme.annotationMissingBorder`
     * @default `"rgba(153, 153, 153, .2)"`
     * @type `string`
     */
    'i18n-ally.theme.annotationMissingBorder': string
    /**
     * %config.regex_key%
     * @key `i18n-ally.regex.key`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.regex.key'?: (string | undefined)
    /**
     * %config.regex_usage_match%
     * @key `i18n-ally.regex.usageMatch`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.regex.usageMatch'?: ((string | undefined)[] | undefined)
    /**
     * %config.regex_usage_match_append%
     * @key `i18n-ally.regex.usageMatchAppend`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.regex.usageMatchAppend'?: ((string | undefined)[] | undefined)
    /**
     * %config.refactor_templates%
     * @key `i18n-ally.refactor.templates`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.refactor.templates'?: ({ 
    /**
     * 
     * @key `source`
     * @default `undefined`
     * @type `string`
     */
    'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text" | undefined)
    /**
     * 
     * @key `template`
     * @default `undefined`
     * @type `string`
     */
    'template'?: (string | undefined)
    /**
     * 
     * @key `templates`
     * @default `undefined`
     * @type `array`
     */
    'templates'?: ((string | undefined)[] | undefined)
    /**
     * 
     * @key `include`
     * @default `undefined`
     * @type `array`
     */
    'include'?: ((string | undefined)[] | undefined)
    /**
     * 
     * @key `exclude`
     * @default `undefined`
     * @type `array`
     */
    'exclude'?: ((string | undefined)[] | undefined) }[] | undefined)
    /**
     * %config.translate_save_as_candidates%
     * @key `i18n-ally.translate.saveAsCandidates`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.saveAsCandidates': boolean
    /**
     * %config.translate.fallbackToKey%
     * @key `i18n-ally.translate.fallbackToKey`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.fallbackToKey': boolean
    /**
     * %config.translate.engines%
     * @key `i18n-ally.translate.engines`
     * @default `["google"]`
     * @type `array`
     */
    'i18n-ally.translate.engines': ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai" | undefined)[]
    /**
     * %config.translate.parallels%
     * @key `i18n-ally.translate.parallels`
     * @default `5`
     * @type `number`
     */
    'i18n-ally.translate.parallels': number
    /**
     * %config.prompt_translating_source%
     * @key `i18n-ally.translate.promptSource`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.promptSource': boolean
    /**
     * %config.translate_override_existing%
     * @key `i18n-ally.translate.overrideExisting`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.overrideExisting': boolean
    /**
     * %config.google_api_key%
     * @key `i18n-ally.translate.google.apiKey`
     * @default `null`
     * @type `string`
     */
    'i18n-ally.translate.google.apiKey': (string | null)
    /**
     * %config.deepl_api_key%
     * @key `i18n-ally.translate.deepl.apiKey`
     * @default `null`
     * @type `string`
     */
    'i18n-ally.translate.deepl.apiKey': (string | null)
    /**
     * %config.baidu_appid%
     * @key `i18n-ally.translate.baidu.appid`
     * @default `null`
     * @type `string`
     */
    'i18n-ally.translate.baidu.appid': (string | null)
    /**
     * %config.baidu_app_secret%
     * @key `i18n-ally.translate.baidu.apiSecret`
     * @default `null`
     * @type `string`
     */
    'i18n-ally.translate.baidu.apiSecret': (string | null)
    /**
     * %config.deepl_log%
     * @key `i18n-ally.translate.deepl.enableLog`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.deepl.enableLog': boolean
    /**
     * %config.deepl_use_free_api_entry%
     * @key `i18n-ally.translate.deepl.useFreeApiEntry`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.translate.deepl.useFreeApiEntry': boolean
    /**
     * %config.libretranslate_api_root%
     * @key `i18n-ally.translate.libre.apiRoot`
     * @default `"http://localhost:5000"`
     * @type `string`
     */
    'i18n-ally.translate.libre.apiRoot': string
    /**
     * %config.openai_api_key%
     * @key `i18n-ally.translate.openai.apiKey`
     * @default `null`
     * @type `string`
     */
    'i18n-ally.translate.openai.apiKey': (string | null)
    /**
     * %config.openai_api_root%
     * @key `i18n-ally.translate.openai.apiRoot`
     * @default `"https://api.openai.com"`
     * @type `string`
     */
    'i18n-ally.translate.openai.apiRoot': string
    /**
     * %config.openai_api_model%
     * @key `i18n-ally.translate.openai.apiModel`
     * @default `"gpt-3.5-turbo"`
     * @type `string`
     */
    'i18n-ally.translate.openai.apiModel': ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613")
    /**
     * %config.usage.scanning_ignore%
     * @key `i18n-ally.usage.scanningIgnore`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.usage.scanningIgnore'?: ((string | undefined)[] | undefined)
    /**
     * %config.derived_keys%
     * @key `i18n-ally.usage.derivedKeyRules`
     * @default `null`
     * @type `array`
     */
    'i18n-ally.usage.derivedKeyRules': ((string | undefined)[] | null)
    /**
     * 
     * @key `i18n-ally.frameworks.ruby-rails.scopeRoot`
     * @default `"app/views"`
     * @type `string`
     */
    'i18n-ally.frameworks.ruby-rails.scopeRoot': string
    /**
     * 
     * @key `i18n-ally.parsers.typescript.tsNodePath`
     * @default `"node_modules/ts-node/dist/bin.js"`
     * @type `string`
     */
    'i18n-ally.parsers.typescript.tsNodePath': string
    /**
     * 
     * @key `i18n-ally.parsers.typescript.compilerOptions`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.parsers.typescript.compilerOptions': Record<string, unknown>
    /**
     * 
     * @key `i18n-ally.parsers.extendFileExtensions`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.parsers.extendFileExtensions': Record<string, unknown>
    /**
     * %config.review_enabled%
     * @key `i18n-ally.review.enabled`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.review.enabled': boolean
    /**
     * %config.review_gutters%
     * @key `i18n-ally.review.gutters`
     * @default `true`
     * @type `boolean`
     */
    'i18n-ally.review.gutters': boolean
    /**
     * %config.review_username%
     * @key `i18n-ally.review.user.name`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.review.user.name'?: (string | undefined)
    /**
     * %config.review_email%
     * @key `i18n-ally.review.user.email`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.review.user.email'?: (string | undefined)
    /**
     * %config.review_remove_on_resolved%
     * @key `i18n-ally.review.removeCommentOnResolved`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.review.removeCommentOnResolved': boolean
    /**
     * %config.editor_prefer_editor%
     * @key `i18n-ally.editor.preferEditor`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.editor.preferEditor': boolean
    /**
     * %config.keygen_strategy%
     * @key `i18n-ally.extract.keygenStrategy`
     * @default `"slug"`
     * @type `string`
     */
    'i18n-ally.extract.keygenStrategy': ("slug" | "random" | "empty" | "source")
    /**
     * %config.keygen_style%
     * @key `i18n-ally.extract.keygenStyle`
     * @default `"default"`
     * @type `string`
     */
    'i18n-ally.extract.keygenStyle': ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS")
    /**
     * %config.key_prefix%
     * @key `i18n-ally.extract.keyPrefix`
     * @default `""`
     * @type `string`
     */
    'i18n-ally.extract.keyPrefix': string
    /**
     * %config.key_max_length%
     * @key `i18n-ally.extract.keyMaxLength`
     * @default `null`
     * @type `number`
     */
    'i18n-ally.extract.keyMaxLength': (number | null)
    /**
     * %config.target_picking_strategy%
     * @key `i18n-ally.extract.targetPickingStrategy`
     * @default `"none"`
     * @type `string`
     */
    'i18n-ally.extract.targetPickingStrategy': ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous")
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     * @key `i18n-ally.extract.parsers.html`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.extract.parsers.html': Record<string, unknown>
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     * @key `i18n-ally.extract.parsers.babel`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.extract.parsers.babel': Record<string, unknown>
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     * @key `i18n-ally.extract.autoDetect`
     * @default `false`
     * @type `boolean`
     */
    'i18n-ally.extract.autoDetect': boolean
    /**
     * Strings to be ignored on hard-coded strings detection
     * @key `i18n-ally.extract.ignored`
     * @default `undefined`
     * @type `array`
     */
    'i18n-ally.extract.ignored'?: ((string | undefined)[] | undefined)
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     * @key `i18n-ally.extract.ignoredByFiles`
     * @default `{}`
     * @type `object`
     */
    'i18n-ally.extract.ignoredByFiles': Record<string, unknown>
    /**
     * 
     * @key `i18n-ally.parserOptions`
     * @default `undefined`
     * @type `object`
     */
    'i18n-ally.parserOptions'?: Record<string, unknown>
    /**
     * %config.default_namespace%
     * @key `i18n-ally.defaultNamespace`
     * @default `undefined`
     * @type `string`
     */
    'i18n-ally.defaultNamespace'?: (string | undefined)
    /**
     * 
     * @key `i18n-ally.derivedKeyRules`
     * @default `undefined`
     * @type `undefined`
     */
    'i18n-ally.derivedKeyRules'?: (unknown | undefined)
    /**
     * 
     * @key `i18n-ally.filenameMatchRegex`
     * @default `undefined`
     * @type `undefined`
     */
    'i18n-ally.filenameMatchRegex'?: (unknown | undefined)
    /**
     * 
     * @key `i18n-ally.fileNamespace`
     * @default `undefined`
     * @type `undefined`
     */
    'i18n-ally.fileNamespace'?: (unknown | undefined)
    /**
     * 
     * @key `i18n-ally.keyMatchRegex`
     * @default `undefined`
     * @type `undefined`
     */
    'i18n-ally.keyMatchRegex'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.localesPaths`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.localesPaths'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.encoding`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.encoding'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.sourceLanguage`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.sourceLanguage'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.displayLanguage`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.displayLanguage'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.ignoredLocales`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.ignoredLocales'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.keystyle`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.keystyle'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.dirStructure`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.dirStructure'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.annotations`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.annotations'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.annotationMaxLength`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.annotationMaxLength'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.annotationDelimiter`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.annotationDelimiter'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.filenameMatchRegex`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.filenameMatchRegex'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.includeSubfolders`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.includeSubfolders'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.fullReloadOnChanged`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.fullReloadOnChanged'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.sortKeys`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.sortKeys'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.preferredDelimiter`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.preferredDelimiter'?: (unknown | undefined)
    /**
     * 
     * @key `vue-i18n-ally.readonly`
     * @default `undefined`
     * @type `undefined`
     */
    'vue-i18n-ally.readonly'?: (unknown | undefined) },
}

/**
 * Scoped defaults of `virtual(Keys in the root)`
 */
const _root = {
/**
 * scope: `virtual(Keys in the root)`
 */
  scope: "",
/**
 * Keys' defaults of `virtual(Keys in the root)`
 */
  defaults: {
    "0": { "i18n-ally.disabled": false, "i18n-ally.autoDetection": true, "i18n-ally.localesPaths": undefined, "i18n-ally.encoding": "utf-8", "i18n-ally.sourceLanguage": undefined, "i18n-ally.displayLanguage": undefined, "i18n-ally.ignoredLocales": undefined, "i18n-ally.keystyle": undefined, "i18n-ally.dirStructure": undefined, "i18n-ally.annotations": true, "i18n-ally.annotationInPlace": true, "i18n-ally.annotationMaxLength": 40, "i18n-ally.annotationDelimiter": "·", "i18n-ally.includeSubfolders": true, "i18n-ally.fullReloadOnChanged": false, "i18n-ally.showFlags": true, "i18n-ally.enabledFrameworks": undefined, "i18n-ally.enabledParsers": undefined, "i18n-ally.keysInUse": undefined, "i18n-ally.sortKeys": false, "i18n-ally.sortCompare": "binary", "i18n-ally.sortLocale": undefined, "i18n-ally.preferredDelimiter": "-", "i18n-ally.readonly": false, "i18n-ally.keepFulfilled": false, "i18n-ally.localeCountryMap": {}, "i18n-ally.indent": 2, "i18n-ally.disablePathParsing": false, "i18n-ally.tabStyle": "space", "i18n-ally.namespace": undefined, "i18n-ally.pathMatcher": undefined, "i18n-ally.languageTagSystem": "bcp47", "i18n-ally.ignoreFiles": undefined, "i18n-ally.theme.annotation": "rgba(153, 153, 153, .8)", "i18n-ally.theme.annotationMissing": "rgba(153, 153, 153, .3)", "i18n-ally.theme.annotationBorder": "rgba(153, 153, 153, .2)", "i18n-ally.theme.annotationMissingBorder": "rgba(153, 153, 153, .2)", "i18n-ally.regex.key": undefined, "i18n-ally.regex.usageMatch": undefined, "i18n-ally.regex.usageMatchAppend": undefined, "i18n-ally.refactor.templates": undefined, "i18n-ally.translate.saveAsCandidates": false, "i18n-ally.translate.fallbackToKey": false, "i18n-ally.translate.engines": ["google"], "i18n-ally.translate.parallels": 5, "i18n-ally.translate.promptSource": false, "i18n-ally.translate.overrideExisting": false, "i18n-ally.translate.google.apiKey": null, "i18n-ally.translate.deepl.apiKey": null, "i18n-ally.translate.baidu.appid": null, "i18n-ally.translate.baidu.apiSecret": null, "i18n-ally.translate.deepl.enableLog": false, "i18n-ally.translate.deepl.useFreeApiEntry": false, "i18n-ally.translate.libre.apiRoot": "http://localhost:5000", "i18n-ally.translate.openai.apiKey": null, "i18n-ally.translate.openai.apiRoot": "https://api.openai.com", "i18n-ally.translate.openai.apiModel": "gpt-3.5-turbo", "i18n-ally.usage.scanningIgnore": undefined, "i18n-ally.usage.derivedKeyRules": null, "i18n-ally.frameworks.ruby-rails.scopeRoot": "app/views", "i18n-ally.parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js", "i18n-ally.parsers.typescript.compilerOptions": {}, "i18n-ally.parsers.extendFileExtensions": {}, "i18n-ally.review.enabled": true, "i18n-ally.review.gutters": true, "i18n-ally.review.user.name": undefined, "i18n-ally.review.user.email": undefined, "i18n-ally.review.removeCommentOnResolved": false, "i18n-ally.editor.preferEditor": false, "i18n-ally.extract.keygenStrategy": "slug", "i18n-ally.extract.keygenStyle": "default", "i18n-ally.extract.keyPrefix": "", "i18n-ally.extract.keyMaxLength": null, "i18n-ally.extract.targetPickingStrategy": "none", "i18n-ally.extract.parsers.html": {}, "i18n-ally.extract.parsers.babel": {}, "i18n-ally.extract.autoDetect": false, "i18n-ally.extract.ignored": undefined, "i18n-ally.extract.ignoredByFiles": {}, "i18n-ally.parserOptions": undefined, "i18n-ally.defaultNamespace": undefined, "i18n-ally.derivedKeyRules": undefined, "i18n-ally.filenameMatchRegex": undefined, "i18n-ally.fileNamespace": undefined, "i18n-ally.keyMatchRegex": undefined, "vue-i18n-ally.localesPaths": undefined, "vue-i18n-ally.encoding": undefined, "vue-i18n-ally.sourceLanguage": undefined, "vue-i18n-ally.displayLanguage": undefined, "vue-i18n-ally.ignoredLocales": undefined, "vue-i18n-ally.keystyle": undefined, "vue-i18n-ally.dirStructure": undefined, "vue-i18n-ally.annotations": undefined, "vue-i18n-ally.annotationMaxLength": undefined, "vue-i18n-ally.annotationDelimiter": undefined, "vue-i18n-ally.filenameMatchRegex": undefined, "vue-i18n-ally.includeSubfolders": undefined, "vue-i18n-ally.fullReloadOnChanged": undefined, "vue-i18n-ally.sortKeys": undefined, "vue-i18n-ally.preferredDelimiter": undefined, "vue-i18n-ally.readonly": undefined },
  } satisfies Root,
}

/**
 * Reactive ConfigObject of `virtual(Keys in the root)`
 * @example
 * let configValue = rootConfigObject.0 //get value 
 * rootConfigObject.0 = true // set value
 * rootConfigObject.$update("0", !configValue, ConfigurationTarget.Workspace, true)
 */
export const rootConfigObject = defineConfigObject<Root>(
  _root.scope,
  _root.defaults
)
/**
 * Reactive ToConfigRefs of `virtual(Keys in the root)`
 * @example
 * let configValue:object =rootConfigs.0.value //get value 
 * rootConfigs.0.value = { "i18n-ally.disabled": false, "i18n-ally.autoDetection": true, "i18n-ally.localesPaths": undefined, "i18n-ally.encoding": "utf-8", "i18n-ally.sourceLanguage": undefined, "i18n-ally.displayLanguage": undefined, "i18n-ally.ignoredLocales": undefined, "i18n-ally.keystyle": undefined, "i18n-ally.dirStructure": undefined, "i18n-ally.annotations": true, "i18n-ally.annotationInPlace": true, "i18n-ally.annotationMaxLength": 40, "i18n-ally.annotationDelimiter": "·", "i18n-ally.includeSubfolders": true, "i18n-ally.fullReloadOnChanged": false, "i18n-ally.showFlags": true, "i18n-ally.enabledFrameworks": undefined, "i18n-ally.enabledParsers": undefined, "i18n-ally.keysInUse": undefined, "i18n-ally.sortKeys": false, "i18n-ally.sortCompare": "binary", "i18n-ally.sortLocale": undefined, "i18n-ally.preferredDelimiter": "-", "i18n-ally.readonly": false, "i18n-ally.keepFulfilled": false, "i18n-ally.localeCountryMap": {}, "i18n-ally.indent": 2, "i18n-ally.disablePathParsing": false, "i18n-ally.tabStyle": "space", "i18n-ally.namespace": undefined, "i18n-ally.pathMatcher": undefined, "i18n-ally.languageTagSystem": "bcp47", "i18n-ally.ignoreFiles": undefined, "i18n-ally.theme.annotation": "rgba(153, 153, 153, .8)", "i18n-ally.theme.annotationMissing": "rgba(153, 153, 153, .3)", "i18n-ally.theme.annotationBorder": "rgba(153, 153, 153, .2)", "i18n-ally.theme.annotationMissingBorder": "rgba(153, 153, 153, .2)", "i18n-ally.regex.key": undefined, "i18n-ally.regex.usageMatch": undefined, "i18n-ally.regex.usageMatchAppend": undefined, "i18n-ally.refactor.templates": undefined, "i18n-ally.translate.saveAsCandidates": false, "i18n-ally.translate.fallbackToKey": false, "i18n-ally.translate.engines": ["google"], "i18n-ally.translate.parallels": 5, "i18n-ally.translate.promptSource": false, "i18n-ally.translate.overrideExisting": false, "i18n-ally.translate.google.apiKey": null, "i18n-ally.translate.deepl.apiKey": null, "i18n-ally.translate.baidu.appid": null, "i18n-ally.translate.baidu.apiSecret": null, "i18n-ally.translate.deepl.enableLog": false, "i18n-ally.translate.deepl.useFreeApiEntry": false, "i18n-ally.translate.libre.apiRoot": "http://localhost:5000", "i18n-ally.translate.openai.apiKey": null, "i18n-ally.translate.openai.apiRoot": "https://api.openai.com", "i18n-ally.translate.openai.apiModel": "gpt-3.5-turbo", "i18n-ally.usage.scanningIgnore": undefined, "i18n-ally.usage.derivedKeyRules": null, "i18n-ally.frameworks.ruby-rails.scopeRoot": "app/views", "i18n-ally.parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js", "i18n-ally.parsers.typescript.compilerOptions": {}, "i18n-ally.parsers.extendFileExtensions": {}, "i18n-ally.review.enabled": true, "i18n-ally.review.gutters": true, "i18n-ally.review.user.name": undefined, "i18n-ally.review.user.email": undefined, "i18n-ally.review.removeCommentOnResolved": false, "i18n-ally.editor.preferEditor": false, "i18n-ally.extract.keygenStrategy": "slug", "i18n-ally.extract.keygenStyle": "default", "i18n-ally.extract.keyPrefix": "", "i18n-ally.extract.keyMaxLength": null, "i18n-ally.extract.targetPickingStrategy": "none", "i18n-ally.extract.parsers.html": {}, "i18n-ally.extract.parsers.babel": {}, "i18n-ally.extract.autoDetect": false, "i18n-ally.extract.ignored": undefined, "i18n-ally.extract.ignoredByFiles": {}, "i18n-ally.parserOptions": undefined, "i18n-ally.defaultNamespace": undefined, "i18n-ally.derivedKeyRules": undefined, "i18n-ally.filenameMatchRegex": undefined, "i18n-ally.fileNamespace": undefined, "i18n-ally.keyMatchRegex": undefined, "vue-i18n-ally.localesPaths": undefined, "vue-i18n-ally.encoding": undefined, "vue-i18n-ally.sourceLanguage": undefined, "vue-i18n-ally.displayLanguage": undefined, "vue-i18n-ally.ignoredLocales": undefined, "vue-i18n-ally.keystyle": undefined, "vue-i18n-ally.dirStructure": undefined, "vue-i18n-ally.annotations": undefined, "vue-i18n-ally.annotationMaxLength": undefined, "vue-i18n-ally.annotationDelimiter": undefined, "vue-i18n-ally.filenameMatchRegex": undefined, "vue-i18n-ally.includeSubfolders": undefined, "vue-i18n-ally.fullReloadOnChanged": undefined, "vue-i18n-ally.sortKeys": undefined, "vue-i18n-ally.preferredDelimiter": undefined, "vue-i18n-ally.readonly": undefined } // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * rootConfigs.0.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const rootConfigs = defineConfigs<Root>(
  _root.scope,
  _root.defaults
)
