// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "lokalise"
export const name = "i18n-ally"
export const version = "2.12.0"
export const displayName = "i18n Ally"
export const description = "🌍 All in one i18n extension for VS Code"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "i18n-ally.config-locales"
  | "i18n-ally.config-locales-auto"
  | "i18n-ally.config-display-language"
  | "i18n-ally.config-source-language"
  | "i18n-ally.set-display-language"
  | "i18n-ally.set-source-language"
  | "i18n-ally.copy-key"
  | "i18n-ally.translate-key"
  | "i18n-ally.edit-key"
  | "i18n-ally.open-key"
  | "i18n-ally.delete-key"
  | "i18n-ally.rename-key"
  | "i18n-ally.extract-text"
  | "i18n-ally.extract-hard-strings-batch"
  | "i18n-ally.detect_hard_strings"
  | "i18n-ally.open-url"
  | "i18n-ally.fulfill-keys"
  | "i18n-ally.refresh-usage"
  | "i18n-ally.support"
  | "i18n-ally.locale-visibility-show"
  | "i18n-ally.locale-visibility-hide"
  | "i18n-ally.new-key"
  | "i18n-ally.duplicate-key"
  | "i18n-ally.mark-key-as-in-use"
  | "i18n-ally.open-in-editor"
  | "i18n-ally.open-editor"
  | "i18n-ally.review.comment"
  | "i18n-ally.review.approve"
  | "i18n-ally.review.request-change"
  | "i18n-ally.review.edit"
  | "i18n-ally.review.resolve"
  | "i18n-ally.review.resolve-thread"
  | "i18n-ally.review.apply-translation"
  | "i18n-ally.review.apply-suggestion"
  | "i18n-ally.insert-key"
  | "i18n-ally.deepl-usage"
  | "i18n-ally.go-to-range"
  | "i18n-ally.go-to-next-usage"
  | "i18n-ally.go-to-prev-usage"
  | "i18n-ally.open-docs-hard-string"
  | "i18n-ally.extract-disable-auto-detect"
  | "i18n-ally.extract-enable-auto-detect"

/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commands = {
  /**
   * %command.config_locales%
   * @value `i18n-ally.config-locales`
   * @example
   * useCommand(commands.configLocales, async () => {
   *   //do actions or update config 
   * })
   */
  configLocales: "i18n-ally.config-locales",
  /**
   * %command.config_locales_auto%
   * @value `i18n-ally.config-locales-auto`
   * @example
   * useCommand(commands.configLocalesAuto, async () => {
   *   //do actions or update config 
   * })
   */
  configLocalesAuto: "i18n-ally.config-locales-auto",
  /**
   * %command.config_display_language%
   * @value `i18n-ally.config-display-language`
   * @example
   * useCommand(commands.configDisplayLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  configDisplayLanguage: "i18n-ally.config-display-language",
  /**
   * %command.config_source_language%
   * @value `i18n-ally.config-source-language`
   * @example
   * useCommand(commands.configSourceLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  configSourceLanguage: "i18n-ally.config-source-language",
  /**
   * %command.set_display_language%
   * @value `i18n-ally.set-display-language`
   * @example
   * useCommand(commands.setDisplayLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  setDisplayLanguage: "i18n-ally.set-display-language",
  /**
   * %command.set_source_language%
   * @value `i18n-ally.set-source-language`
   * @example
   * useCommand(commands.setSourceLanguage, async () => {
   *   //do actions or update config 
   * })
   */
  setSourceLanguage: "i18n-ally.set-source-language",
  /**
   * %command.copy_key%
   * @value `i18n-ally.copy-key`
   * @example
   * useCommand(commands.copyKey, async () => {
   *   //do actions or update config 
   * })
   */
  copyKey: "i18n-ally.copy-key",
  /**
   * %command.translate_key%
   * @value `i18n-ally.translate-key`
   * @example
   * useCommand(commands.translateKey, async () => {
   *   //do actions or update config 
   * })
   */
  translateKey: "i18n-ally.translate-key",
  /**
   * %command.edit_key%
   * @value `i18n-ally.edit-key`
   * @example
   * useCommand(commands.editKey, async () => {
   *   //do actions or update config 
   * })
   */
  editKey: "i18n-ally.edit-key",
  /**
   * %command.open_key%
   * @value `i18n-ally.open-key`
   * @example
   * useCommand(commands.openKey, async () => {
   *   //do actions or update config 
   * })
   */
  openKey: "i18n-ally.open-key",
  /**
   * %command.delete_key%
   * @value `i18n-ally.delete-key`
   * @example
   * useCommand(commands.deleteKey, async () => {
   *   //do actions or update config 
   * })
   */
  deleteKey: "i18n-ally.delete-key",
  /**
   * %command.rename_key%
   * @value `i18n-ally.rename-key`
   * @example
   * useCommand(commands.renameKey, async () => {
   *   //do actions or update config 
   * })
   */
  renameKey: "i18n-ally.rename-key",
  /**
   * %refactor.extract_text%
   * @value `i18n-ally.extract-text`
   * @example
   * useCommand(commands.extractText, async () => {
   *   //do actions or update config 
   * })
   */
  extractText: "i18n-ally.extract-text",
  /**
   * Extract all hard-coded strings (experimental)
   * @value `i18n-ally.extract-hard-strings-batch`
   * @example
   * useCommand(commands.extractHardStringsBatch, async () => {
   *   //do actions or update config 
   * })
   */
  extractHardStringsBatch: "i18n-ally.extract-hard-strings-batch",
  /**
   * Detect hard-coded strings in current file (experimental)
   * @value `i18n-ally.detect_hard_strings`
   * @example
   * useCommand(commands.detectHardStrings, async () => {
   *   //do actions or update config 
   * })
   */
  detectHardStrings: "i18n-ally.detect_hard_strings",
  /**
   * %command.open_url%
   * @value `i18n-ally.open-url`
   * @example
   * useCommand(commands.openUrl, async () => {
   *   //do actions or update config 
   * })
   */
  openUrl: "i18n-ally.open-url",
  /**
   * %command.fulfill_keys%
   * @value `i18n-ally.fulfill-keys`
   * @example
   * useCommand(commands.fulfillKeys, async () => {
   *   //do actions or update config 
   * })
   */
  fulfillKeys: "i18n-ally.fulfill-keys",
  /**
   * %command.refresh_usage%
   * @value `i18n-ally.refresh-usage`
   * @example
   * useCommand(commands.refreshUsage, async () => {
   *   //do actions or update config 
   * })
   */
  refreshUsage: "i18n-ally.refresh-usage",
  /**
   * %feedback.support%
   * @value `i18n-ally.support`
   * @example
   * useCommand(commands.support, async () => {
   *   //do actions or update config 
   * })
   */
  support: "i18n-ally.support",
  /**
   * %command.locale_visibility_show%
   * @value `i18n-ally.locale-visibility-show`
   * @example
   * useCommand(commands.localeVisibilityShow, async () => {
   *   //do actions or update config 
   * })
   */
  localeVisibilityShow: "i18n-ally.locale-visibility-show",
  /**
   * %command.locale_visibility_hide%
   * @value `i18n-ally.locale-visibility-hide`
   * @example
   * useCommand(commands.localeVisibilityHide, async () => {
   *   //do actions or update config 
   * })
   */
  localeVisibilityHide: "i18n-ally.locale-visibility-hide",
  /**
   * %command.new_key%
   * @value `i18n-ally.new-key`
   * @example
   * useCommand(commands.newKey, async () => {
   *   //do actions or update config 
   * })
   */
  newKey: "i18n-ally.new-key",
  /**
   * %command.duplicate_key%
   * @value `i18n-ally.duplicate-key`
   * @example
   * useCommand(commands.duplicateKey, async () => {
   *   //do actions or update config 
   * })
   */
  duplicateKey: "i18n-ally.duplicate-key",
  /**
   * %command.mark_key_as_in_use%
   * @value `i18n-ally.mark-key-as-in-use`
   * @example
   * useCommand(commands.markKeyAsInUse, async () => {
   *   //do actions or update config 
   * })
   */
  markKeyAsInUse: "i18n-ally.mark-key-as-in-use",
  /**
   * %command.open_in_editor%
   * @value `i18n-ally.open-in-editor`
   * @example
   * useCommand(commands.openInEditor, async () => {
   *   //do actions or update config 
   * })
   */
  openInEditor: "i18n-ally.open-in-editor",
  /**
   * %command.open_editor%
   * @value `i18n-ally.open-editor`
   * @example
   * useCommand(commands.openEditor, async () => {
   *   //do actions or update config 
   * })
   */
  openEditor: "i18n-ally.open-editor",
  /**
   * %review.leave_comment%
   * @value `i18n-ally.review.comment`
   * @example
   * useCommand(commands.reviewComment, async () => {
   *   //do actions or update config 
   * })
   */
  reviewComment: "i18n-ally.review.comment",
  /**
   * %review.approve%
   * @value `i18n-ally.review.approve`
   * @example
   * useCommand(commands.reviewApprove, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApprove: "i18n-ally.review.approve",
  /**
   * %review.request_change%
   * @value `i18n-ally.review.request-change`
   * @example
   * useCommand(commands.reviewRequestChange, async () => {
   *   //do actions or update config 
   * })
   */
  reviewRequestChange: "i18n-ally.review.request-change",
  /**
   * %review.edit%
   * @value `i18n-ally.review.edit`
   * @example
   * useCommand(commands.reviewEdit, async () => {
   *   //do actions or update config 
   * })
   */
  reviewEdit: "i18n-ally.review.edit",
  /**
   * %review.resolve%
   * @value `i18n-ally.review.resolve`
   * @example
   * useCommand(commands.reviewResolve, async () => {
   *   //do actions or update config 
   * })
   */
  reviewResolve: "i18n-ally.review.resolve",
  /**
   * %review.resolve_all%
   * @value `i18n-ally.review.resolve-thread`
   * @example
   * useCommand(commands.reviewResolveThread, async () => {
   *   //do actions or update config 
   * })
   */
  reviewResolveThread: "i18n-ally.review.resolve-thread",
  /**
   * %review.apply_translation_candidate%
   * @value `i18n-ally.review.apply-translation`
   * @example
   * useCommand(commands.reviewApplyTranslation, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApplyTranslation: "i18n-ally.review.apply-translation",
  /**
   * %review.apply_suggestion%
   * @value `i18n-ally.review.apply-suggestion`
   * @example
   * useCommand(commands.reviewApplySuggestion, async () => {
   *   //do actions or update config 
   * })
   */
  reviewApplySuggestion: "i18n-ally.review.apply-suggestion",
  /**
   * %command.insert_key%
   * @value `i18n-ally.insert-key`
   * @example
   * useCommand(commands.insertKey, async () => {
   *   //do actions or update config 
   * })
   */
  insertKey: "i18n-ally.insert-key",
  /**
   * %command.deepl_usage%
   * @value `i18n-ally.deepl-usage`
   * @example
   * useCommand(commands.deeplUsage, async () => {
   *   //do actions or update config 
   * })
   */
  deeplUsage: "i18n-ally.deepl-usage",
  /**
   * %command.go_to_range%
   * @value `i18n-ally.go-to-range`
   * @example
   * useCommand(commands.goToRange, async () => {
   *   //do actions or update config 
   * })
   */
  goToRange: "i18n-ally.go-to-range",
  /**
   * %command.go_to_next_usage%
   * @value `i18n-ally.go-to-next-usage`
   * @example
   * useCommand(commands.goToNextUsage, async () => {
   *   //do actions or update config 
   * })
   */
  goToNextUsage: "i18n-ally.go-to-next-usage",
  /**
   * %command.go_to_prev_usage%
   * @value `i18n-ally.go-to-prev-usage`
   * @example
   * useCommand(commands.goToPrevUsage, async () => {
   *   //do actions or update config 
   * })
   */
  goToPrevUsage: "i18n-ally.go-to-prev-usage",
  /**
   * %command.show_docs%
   * @value `i18n-ally.open-docs-hard-string`
   * @example
   * useCommand(commands.openDocsHardString, async () => {
   *   //do actions or update config 
   * })
   */
  openDocsHardString: "i18n-ally.open-docs-hard-string",
  /**
   * %command.extract.disable-auto-detect%
   * @value `i18n-ally.extract-disable-auto-detect`
   * @example
   * useCommand(commands.extractDisableAutoDetect, async () => {
   *   //do actions or update config 
   * })
   */
  extractDisableAutoDetect: "i18n-ally.extract-disable-auto-detect",
  /**
   * %command.extract.enable-auto-detect%
   * @value `i18n-ally.extract-enable-auto-detect`
   * @example
   * useCommand(commands.extractEnableAutoDetect, async () => {
   *   //do actions or update config 
   * })
   */
  extractEnableAutoDetect: "i18n-ally.extract-enable-auto-detect",
} satisfies Record<string, CommandKey>
/**
 * %command.config_locales%
 * @value `i18n-ally.config-locales`
 */
export function useCommandConfigLocales(callback: (...args: any[]) => any) {
  useCommand(commands.configLocales, callback)
}
/**
 * %command.config_locales_auto%
 * @value `i18n-ally.config-locales-auto`
 */
export function useCommandConfigLocalesAuto(callback: (...args: any[]) => any) {
  useCommand(commands.configLocalesAuto, callback)
}
/**
 * %command.config_display_language%
 * @value `i18n-ally.config-display-language`
 */
export function useCommandConfigDisplayLanguage(callback: (...args: any[]) => any) {
  useCommand(commands.configDisplayLanguage, callback)
}
/**
 * %command.config_source_language%
 * @value `i18n-ally.config-source-language`
 */
export function useCommandConfigSourceLanguage(callback: (...args: any[]) => any) {
  useCommand(commands.configSourceLanguage, callback)
}
/**
 * %command.set_display_language%
 * @value `i18n-ally.set-display-language`
 */
export function useCommandSetDisplayLanguage(callback: (...args: any[]) => any) {
  useCommand(commands.setDisplayLanguage, callback)
}
/**
 * %command.set_source_language%
 * @value `i18n-ally.set-source-language`
 */
export function useCommandSetSourceLanguage(callback: (...args: any[]) => any) {
  useCommand(commands.setSourceLanguage, callback)
}
/**
 * %command.copy_key%
 * @value `i18n-ally.copy-key`
 */
export function useCommandCopyKey(callback: (...args: any[]) => any) {
  useCommand(commands.copyKey, callback)
}
/**
 * %command.translate_key%
 * @value `i18n-ally.translate-key`
 */
export function useCommandTranslateKey(callback: (...args: any[]) => any) {
  useCommand(commands.translateKey, callback)
}
/**
 * %command.edit_key%
 * @value `i18n-ally.edit-key`
 */
export function useCommandEditKey(callback: (...args: any[]) => any) {
  useCommand(commands.editKey, callback)
}
/**
 * %command.open_key%
 * @value `i18n-ally.open-key`
 */
export function useCommandOpenKey(callback: (...args: any[]) => any) {
  useCommand(commands.openKey, callback)
}
/**
 * %command.delete_key%
 * @value `i18n-ally.delete-key`
 */
export function useCommandDeleteKey(callback: (...args: any[]) => any) {
  useCommand(commands.deleteKey, callback)
}
/**
 * %command.rename_key%
 * @value `i18n-ally.rename-key`
 */
export function useCommandRenameKey(callback: (...args: any[]) => any) {
  useCommand(commands.renameKey, callback)
}
/**
 * %refactor.extract_text%
 * @value `i18n-ally.extract-text`
 */
export function useCommandExtractText(callback: (...args: any[]) => any) {
  useCommand(commands.extractText, callback)
}
/**
 * Extract all hard-coded strings (experimental)
 * @value `i18n-ally.extract-hard-strings-batch`
 */
export function useCommandExtractHardStringsBatch(callback: (...args: any[]) => any) {
  useCommand(commands.extractHardStringsBatch, callback)
}
/**
 * Detect hard-coded strings in current file (experimental)
 * @value `i18n-ally.detect_hard_strings`
 */
export function useCommandDetectHardStrings(callback: (...args: any[]) => any) {
  useCommand(commands.detectHardStrings, callback)
}
/**
 * %command.open_url%
 * @value `i18n-ally.open-url`
 */
export function useCommandOpenUrl(callback: (...args: any[]) => any) {
  useCommand(commands.openUrl, callback)
}
/**
 * %command.fulfill_keys%
 * @value `i18n-ally.fulfill-keys`
 */
export function useCommandFulfillKeys(callback: (...args: any[]) => any) {
  useCommand(commands.fulfillKeys, callback)
}
/**
 * %command.refresh_usage%
 * @value `i18n-ally.refresh-usage`
 */
export function useCommandRefreshUsage(callback: (...args: any[]) => any) {
  useCommand(commands.refreshUsage, callback)
}
/**
 * %feedback.support%
 * @value `i18n-ally.support`
 */
export function useCommandSupport(callback: (...args: any[]) => any) {
  useCommand(commands.support, callback)
}
/**
 * %command.locale_visibility_show%
 * @value `i18n-ally.locale-visibility-show`
 */
export function useCommandLocaleVisibilityShow(callback: (...args: any[]) => any) {
  useCommand(commands.localeVisibilityShow, callback)
}
/**
 * %command.locale_visibility_hide%
 * @value `i18n-ally.locale-visibility-hide`
 */
export function useCommandLocaleVisibilityHide(callback: (...args: any[]) => any) {
  useCommand(commands.localeVisibilityHide, callback)
}
/**
 * %command.new_key%
 * @value `i18n-ally.new-key`
 */
export function useCommandNewKey(callback: (...args: any[]) => any) {
  useCommand(commands.newKey, callback)
}
/**
 * %command.duplicate_key%
 * @value `i18n-ally.duplicate-key`
 */
export function useCommandDuplicateKey(callback: (...args: any[]) => any) {
  useCommand(commands.duplicateKey, callback)
}
/**
 * %command.mark_key_as_in_use%
 * @value `i18n-ally.mark-key-as-in-use`
 */
export function useCommandMarkKeyAsInUse(callback: (...args: any[]) => any) {
  useCommand(commands.markKeyAsInUse, callback)
}
/**
 * %command.open_in_editor%
 * @value `i18n-ally.open-in-editor`
 */
export function useCommandOpenInEditor(callback: (...args: any[]) => any) {
  useCommand(commands.openInEditor, callback)
}
/**
 * %command.open_editor%
 * @value `i18n-ally.open-editor`
 */
export function useCommandOpenEditor(callback: (...args: any[]) => any) {
  useCommand(commands.openEditor, callback)
}
/**
 * %review.leave_comment%
 * @value `i18n-ally.review.comment`
 */
export function useCommandReviewComment(callback: (...args: any[]) => any) {
  useCommand(commands.reviewComment, callback)
}
/**
 * %review.approve%
 * @value `i18n-ally.review.approve`
 */
export function useCommandReviewApprove(callback: (...args: any[]) => any) {
  useCommand(commands.reviewApprove, callback)
}
/**
 * %review.request_change%
 * @value `i18n-ally.review.request-change`
 */
export function useCommandReviewRequestChange(callback: (...args: any[]) => any) {
  useCommand(commands.reviewRequestChange, callback)
}
/**
 * %review.edit%
 * @value `i18n-ally.review.edit`
 */
export function useCommandReviewEdit(callback: (...args: any[]) => any) {
  useCommand(commands.reviewEdit, callback)
}
/**
 * %review.resolve%
 * @value `i18n-ally.review.resolve`
 */
export function useCommandReviewResolve(callback: (...args: any[]) => any) {
  useCommand(commands.reviewResolve, callback)
}
/**
 * %review.resolve_all%
 * @value `i18n-ally.review.resolve-thread`
 */
export function useCommandReviewResolveThread(callback: (...args: any[]) => any) {
  useCommand(commands.reviewResolveThread, callback)
}
/**
 * %review.apply_translation_candidate%
 * @value `i18n-ally.review.apply-translation`
 */
export function useCommandReviewApplyTranslation(callback: (...args: any[]) => any) {
  useCommand(commands.reviewApplyTranslation, callback)
}
/**
 * %review.apply_suggestion%
 * @value `i18n-ally.review.apply-suggestion`
 */
export function useCommandReviewApplySuggestion(callback: (...args: any[]) => any) {
  useCommand(commands.reviewApplySuggestion, callback)
}
/**
 * %command.insert_key%
 * @value `i18n-ally.insert-key`
 */
export function useCommandInsertKey(callback: (...args: any[]) => any) {
  useCommand(commands.insertKey, callback)
}
/**
 * %command.deepl_usage%
 * @value `i18n-ally.deepl-usage`
 */
export function useCommandDeeplUsage(callback: (...args: any[]) => any) {
  useCommand(commands.deeplUsage, callback)
}
/**
 * %command.go_to_range%
 * @value `i18n-ally.go-to-range`
 */
export function useCommandGoToRange(callback: (...args: any[]) => any) {
  useCommand(commands.goToRange, callback)
}
/**
 * %command.go_to_next_usage%
 * @value `i18n-ally.go-to-next-usage`
 */
export function useCommandGoToNextUsage(callback: (...args: any[]) => any) {
  useCommand(commands.goToNextUsage, callback)
}
/**
 * %command.go_to_prev_usage%
 * @value `i18n-ally.go-to-prev-usage`
 */
export function useCommandGoToPrevUsage(callback: (...args: any[]) => any) {
  useCommand(commands.goToPrevUsage, callback)
}
/**
 * %command.show_docs%
 * @value `i18n-ally.open-docs-hard-string`
 */
export function useCommandOpenDocsHardString(callback: (...args: any[]) => any) {
  useCommand(commands.openDocsHardString, callback)
}
/**
 * %command.extract.disable-auto-detect%
 * @value `i18n-ally.extract-disable-auto-detect`
 */
export function useCommandExtractDisableAutoDetect(callback: (...args: any[]) => any) {
  useCommand(commands.extractDisableAutoDetect, callback)
}
/**
 * %command.extract.enable-auto-detect%
 * @value `i18n-ally.extract-enable-auto-detect`
 */
export function useCommandExtractEnableAutoDetect(callback: (...args: any[]) => any) {
  useCommand(commands.extractEnableAutoDetect, callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "i18n-ally.derivedKeyRules"
  | "i18n-ally.filenameMatchRegex"
  | "i18n-ally.fileNamespace"
  | "i18n-ally.keyMatchRegex"
  | "vue-i18n-ally.localesPaths"
  | "vue-i18n-ally.encoding"
  | "vue-i18n-ally.sourceLanguage"
  | "vue-i18n-ally.displayLanguage"
  | "vue-i18n-ally.ignoredLocales"
  | "vue-i18n-ally.keystyle"
  | "vue-i18n-ally.dirStructure"
  | "vue-i18n-ally.annotations"
  | "vue-i18n-ally.annotationMaxLength"
  | "vue-i18n-ally.annotationDelimiter"
  | "vue-i18n-ally.filenameMatchRegex"
  | "vue-i18n-ally.includeSubfolders"
  | "vue-i18n-ally.fullReloadOnChanged"
  | "vue-i18n-ally.sortKeys"
  | "vue-i18n-ally.preferredDelimiter"
  | "vue-i18n-ally.readonly"

/**
 * Config keys of `i18n-ally`
 */
export interface I18nAlly {
  /**
   * %config.disabled%
   * @default false
   */
  "disabled": boolean,
  /**
   * %config.auto_detection%
   * @default true
   */
  "autoDetection": boolean,
  /**
   * %config.locales_paths%
   * @default undefined
   */
  "localesPaths"?: (string | string[] | undefined),
  /**
   * %config.encoding%
   * @default "utf-8"
   */
  "encoding": string,
  /**
   * %config.source_language%
   * @default undefined
   */
  "sourceLanguage"?: (string | undefined),
  /**
   * %config.display_language%
   * @default undefined
   */
  "displayLanguage"?: (string | undefined),
  /**
   * %config.ignored_locales%
   * @default undefined
   */
  "ignoredLocales"?: (unknown[] | undefined),
  /**
   * %config.keystyle%
   * @default undefined
   */
  "keystyle"?: ("auto" | "nested" | "flat" | undefined),
  /**
   * %config.dir_structure%
   * @default undefined
   */
  "dirStructure"?: ("auto" | "file" | "dir" | undefined),
  /**
   * %config.annotations%
   * @default true
   */
  "annotations": boolean,
  /**
   * %config.annotation_in_place%
   * @default true
   */
  "annotationInPlace": boolean,
  /**
   * %config.annotation_max_length%
   * @default 40
   */
  "annotationMaxLength": number,
  /**
   * %config.annotation_delimiter%
   * @default "·"
   */
  "annotationDelimiter": string,
  /**
   * %config.include_subfolders%
   * @default true
   */
  "includeSubfolders": boolean,
  /**
   * %config.full_reload_on_changed%
   * @default false
   */
  "fullReloadOnChanged": boolean,
  /**
   * %config.show_flags%
   * @default true
   */
  "showFlags": boolean,
  /**
   * %config.enabled_frameworks%
   * @default undefined
   */
  "enabledFrameworks"?: (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined),
  /**
   * %config.enabled_parsers%
   * @default undefined
   */
  "enabledParsers"?: (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined),
  /**
   * %config.keys_in_use%
   * @default undefined
   */
  "keysInUse"?: (string[] | undefined),
  /**
   * %config.sort_keys%
   * @default false
   */
  "sortKeys": boolean,
  /**
   * %config.sort_compare%
   * @default "binary"
   */
  "sortCompare": ("binary" | "locale"),
  /**
   * %config.sort_locale%
   * @default undefined
   */
  "sortLocale"?: (string | undefined),
  /**
   * %config.preferred_delimiter%
   * @default "-"
   */
  "preferredDelimiter": string,
  /**
   * %config.readonly%
   * @default false
   */
  "readonly": boolean,
  /**
   * %config.keep_fulfill%
   * @default false
   */
  "keepFulfilled": boolean,
  /**
   * %config.locale_country_map%
   * @default {}
   */
  "localeCountryMap": Record<string, unknown>,
  /**
   * %config.indent%
   * @default 2
   */
  "indent": number,
  /**
   * %config.disable_path_parsing%
   * @default false
   */
  "disablePathParsing": boolean,
  /**
   * %config.tab_style%
   * @default "space"
   */
  "tabStyle": ("space" | "tab"),
  /**
   * %config.namespace%
   * @default undefined
   */
  "namespace"?: (boolean | undefined),
  /**
   * %config.path_matcher%
   * @default undefined
   */
  "pathMatcher"?: (string | undefined),
  /**
   * %config.language_tag_system%
   * @default "bcp47"
   */
  "languageTagSystem": ("bcp47" | "legacy" | "none"),
  /**
   * %config.ignore_files%
   * @default undefined
   */
  "ignoreFiles"?: (string[] | undefined),
  /**
   * 
   * @default "rgba(153, 153, 153, .8)"
   */
  "theme.annotation": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .3)"
   */
  "theme.annotationMissing": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .2)"
   */
  "theme.annotationBorder": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .2)"
   */
  "theme.annotationMissingBorder": string,
  /**
   * %config.regex_key%
   * @default undefined
   */
  "regex.key"?: (string | undefined),
  /**
   * %config.regex_usage_match%
   * @default undefined
   */
  "regex.usageMatch"?: (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   * @default undefined
   */
  "regex.usageMatchAppend"?: (string[] | undefined),
  /**
   * %config.refactor_templates%
   * @default undefined
   */
  "refactor.templates"?: ({
          /**
       * 
       * @default `undefined`
       */
      'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text")
      /**
       * 
       * @default `undefined`
       */
      'template'?: string
      /**
       * 
       * @default `undefined`
       */
      'templates'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'include'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'exclude'?: string[] 
    }[] | undefined),
  /**
   * %config.translate_save_as_candidates%
   * @default false
   */
  "translate.saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   * @default false
   */
  "translate.fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   * @default ["google"]
   */
  "translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   * @default 5
   */
  "translate.parallels": number,
  /**
   * %config.prompt_translating_source%
   * @default false
   */
  "translate.promptSource": boolean,
  /**
   * %config.translate_override_existing%
   * @default false
   */
  "translate.overrideExisting": boolean,
  /**
   * %config.google_api_key%
   * @default null
   */
  "translate.google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   * @default null
   */
  "translate.deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   * @default null
   */
  "translate.baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @default null
   */
  "translate.baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   * @default false
   */
  "translate.deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @default false
   */
  "translate.deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   * @default "http://localhost:5000"
   */
  "translate.libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   * @default null
   */
  "translate.openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @default "https://api.openai.com"
   */
  "translate.openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   * @default "gpt-3.5-turbo"
   */
  "translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
  /**
   * %config.usage.scanning_ignore%
   * @default undefined
   */
  "usage.scanningIgnore"?: (string[] | undefined),
  /**
   * %config.derived_keys%
   * @default null
   */
  "usage.derivedKeyRules": (string[] | null),
  /**
   * 
   * @default "app/views"
   */
  "frameworks.ruby-rails.scopeRoot": string,
  /**
   * 
   * @default "node_modules/ts-node/dist/bin.js"
   */
  "parsers.typescript.tsNodePath": string,
  /**
   * 
   * @default {}
   */
  "parsers.typescript.compilerOptions": Record<string, unknown>,
  /**
   * 
   * @default {}
   */
  "parsers.extendFileExtensions": Record<string, unknown>,
  /**
   * %config.review_enabled%
   * @default true
   */
  "review.enabled": boolean,
  /**
   * %config.review_gutters%
   * @default true
   */
  "review.gutters": boolean,
  /**
   * %config.review_username%
   * @default undefined
   */
  "review.user.name"?: (string | undefined),
  /**
   * %config.review_email%
   * @default undefined
   */
  "review.user.email"?: (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   * @default false
   */
  "review.removeCommentOnResolved": boolean,
  /**
   * %config.editor_prefer_editor%
   * @default false
   */
  "editor.preferEditor": boolean,
  /**
   * %config.keygen_strategy%
   * @default "slug"
   */
  "extract.keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   * @default "default"
   */
  "extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   * @default ""
   */
  "extract.keyPrefix": string,
  /**
   * %config.key_max_length%
   * @default null
   */
  "extract.keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   * @default "none"
   */
  "extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "extract.parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "extract.parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   * @default false
   */
  "extract.autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   * @default undefined
   */
  "extract.ignored"?: (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   * @default {}
   */
  "extract.ignoredByFiles": Record<string, unknown>,
  /**
   * 
   * @default undefined
   */
  "parserOptions"?: Record<string, unknown>,
  /**
   * %config.default_namespace%
   * @default undefined
   */
  "defaultNamespace"?: (string | undefined),
}

/**
 * Scoped defaults of `i18n-ally`
 */
const _i18nAlly = {
  /**
   * scope: `i18n-ally`
   */
  scope: "i18n-ally",
  /**
   * Keys' defaults of `i18n-ally`
   */
  defaults: {
    /**
     * %config.disabled%
     */
    "disabled": false,
    /**
     * %config.auto_detection%
     */
    "autoDetection": true,
    /**
     * %config.locales_paths%
     */
    "localesPaths": undefined,
    /**
     * %config.encoding%
     */
    "encoding": "utf-8",
    /**
     * %config.source_language%
     */
    "sourceLanguage": undefined,
    /**
     * %config.display_language%
     */
    "displayLanguage": undefined,
    /**
     * %config.ignored_locales%
     */
    "ignoredLocales": undefined,
    /**
     * %config.keystyle%
     */
    "keystyle": undefined,
    /**
     * %config.dir_structure%
     */
    "dirStructure": undefined,
    /**
     * %config.annotations%
     */
    "annotations": true,
    /**
     * %config.annotation_in_place%
     */
    "annotationInPlace": true,
    /**
     * %config.annotation_max_length%
     */
    "annotationMaxLength": 40,
    /**
     * %config.annotation_delimiter%
     */
    "annotationDelimiter": "·",
    /**
     * %config.include_subfolders%
     */
    "includeSubfolders": true,
    /**
     * %config.full_reload_on_changed%
     */
    "fullReloadOnChanged": false,
    /**
     * %config.show_flags%
     */
    "showFlags": true,
    /**
     * %config.enabled_frameworks%
     */
    "enabledFrameworks": undefined,
    /**
     * %config.enabled_parsers%
     */
    "enabledParsers": undefined,
    /**
     * %config.keys_in_use%
     */
    "keysInUse": undefined,
    /**
     * %config.sort_keys%
     */
    "sortKeys": false,
    /**
     * %config.sort_compare%
     */
    "sortCompare": "binary",
    /**
     * %config.sort_locale%
     */
    "sortLocale": undefined,
    /**
     * %config.preferred_delimiter%
     */
    "preferredDelimiter": "-",
    /**
     * %config.readonly%
     */
    "readonly": false,
    /**
     * %config.keep_fulfill%
     */
    "keepFulfilled": false,
    /**
     * %config.locale_country_map%
     */
    "localeCountryMap": {},
    /**
     * %config.indent%
     */
    "indent": 2,
    /**
     * %config.disable_path_parsing%
     */
    "disablePathParsing": false,
    /**
     * %config.tab_style%
     */
    "tabStyle": "space",
    /**
     * %config.namespace%
     */
    "namespace": undefined,
    /**
     * %config.path_matcher%
     */
    "pathMatcher": undefined,
    /**
     * %config.language_tag_system%
     */
    "languageTagSystem": "bcp47",
    /**
     * %config.ignore_files%
     */
    "ignoreFiles": undefined,
    "theme.annotation": "rgba(153, 153, 153, .8)",
    "theme.annotationMissing": "rgba(153, 153, 153, .3)",
    "theme.annotationBorder": "rgba(153, 153, 153, .2)",
    "theme.annotationMissingBorder": "rgba(153, 153, 153, .2)",
    /**
     * %config.regex_key%
     */
    "regex.key": undefined,
    /**
     * %config.regex_usage_match%
     */
    "regex.usageMatch": undefined,
    /**
     * %config.regex_usage_match_append%
     */
    "regex.usageMatchAppend": undefined,
    /**
     * %config.refactor_templates%
     */
    "refactor.templates": undefined,
    /**
     * %config.translate_save_as_candidates%
     */
    "translate.saveAsCandidates": false,
    /**
     * %config.translate.fallbackToKey%
     */
    "translate.fallbackToKey": false,
    /**
     * %config.translate.engines%
     */
    "translate.engines": ["google"],
    /**
     * %config.translate.parallels%
     */
    "translate.parallels": 5,
    /**
     * %config.prompt_translating_source%
     */
    "translate.promptSource": false,
    /**
     * %config.translate_override_existing%
     */
    "translate.overrideExisting": false,
    /**
     * %config.google_api_key%
     */
    "translate.google.apiKey": null,
    /**
     * %config.deepl_api_key%
     */
    "translate.deepl.apiKey": null,
    /**
     * %config.baidu_appid%
     */
    "translate.baidu.appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "translate.baidu.apiSecret": null,
    /**
     * %config.deepl_log%
     */
    "translate.deepl.enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "translate.deepl.useFreeApiEntry": false,
    /**
     * %config.libretranslate_api_root%
     */
    "translate.libre.apiRoot": "http://localhost:5000",
    /**
     * %config.openai_api_key%
     */
    "translate.openai.apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "translate.openai.apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "translate.openai.apiModel": "gpt-3.5-turbo",
    /**
     * %config.usage.scanning_ignore%
     */
    "usage.scanningIgnore": undefined,
    /**
     * %config.derived_keys%
     */
    "usage.derivedKeyRules": null,
    "frameworks.ruby-rails.scopeRoot": "app/views",
    "parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "parsers.typescript.compilerOptions": {},
    "parsers.extendFileExtensions": {},
    /**
     * %config.review_enabled%
     */
    "review.enabled": true,
    /**
     * %config.review_gutters%
     */
    "review.gutters": true,
    /**
     * %config.review_username%
     */
    "review.user.name": undefined,
    /**
     * %config.review_email%
     */
    "review.user.email": undefined,
    /**
     * %config.review_remove_on_resolved%
     */
    "review.removeCommentOnResolved": false,
    /**
     * %config.editor_prefer_editor%
     */
    "editor.preferEditor": false,
    /**
     * %config.keygen_strategy%
     */
    "extract.keygenStrategy": "slug",
    /**
     * %config.keygen_style%
     */
    "extract.keygenStyle": "default",
    /**
     * %config.key_prefix%
     */
    "extract.keyPrefix": "",
    /**
     * %config.key_max_length%
     */
    "extract.keyMaxLength": null,
    /**
     * %config.target_picking_strategy%
     */
    "extract.targetPickingStrategy": "none",
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.babel": {},
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "extract.autoDetect": false,
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "extract.ignored": undefined,
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "extract.ignoredByFiles": {},
    "parserOptions": undefined,
    /**
     * %config.default_namespace%
     */
    "defaultNamespace": undefined,
  } satisfies I18nAlly,
}

/**
 * Reactive ConfigObject of `i18n-ally`
 * @example
 * let configValue = i18nAllyConfigObject.disabled //get value 
 * i18nAllyConfigObject.disabled = true // set value
 * i18nAllyConfigObject.$update("disabled", !configValue, ConfigurationTarget.Workspace, true)
 */
export const i18nAllyConfigObject = defineConfigObject<I18nAlly>(
  _i18nAlly.scope,
  _i18nAlly.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally`
 * @example
 * let configValue:boolean =i18nAllyConfigs.disabled.value //get value 
 * i18nAllyConfigs.disabled.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * i18nAllyConfigs.disabled.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const i18nAllyConfigs = defineConfigs<I18nAlly>(
  _i18nAlly.scope,
  _i18nAlly.defaults
)

/**
 * Config keys of `i18n-ally.theme`
 */
export interface Theme {
  /**
   * 
   * @default "rgba(153, 153, 153, .8)"
   */
  "annotation": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .3)"
   */
  "annotationMissing": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .2)"
   */
  "annotationBorder": string,
  /**
   * 
   * @default "rgba(153, 153, 153, .2)"
   */
  "annotationMissingBorder": string,
}

/**
 * Scoped defaults of `i18n-ally.theme`
 */
const _theme = {
  /**
   * scope: `i18n-ally.theme`
   */
  scope: "i18n-ally.theme",
  /**
   * Keys' defaults of `i18n-ally.theme`
   */
  defaults: {
    "annotation": "rgba(153, 153, 153, .8)",
    "annotationMissing": "rgba(153, 153, 153, .3)",
    "annotationBorder": "rgba(153, 153, 153, .2)",
    "annotationMissingBorder": "rgba(153, 153, 153, .2)",
  } satisfies Theme,
}

/**
 * Reactive ConfigObject of `i18n-ally.theme`
 * @example
 * let configValue = themeConfigObject.annotation //get value 
 * themeConfigObject.annotation = true // set value
 * themeConfigObject.$update("annotation", !configValue, ConfigurationTarget.Workspace, true)
 */
export const themeConfigObject = defineConfigObject<Theme>(
  _theme.scope,
  _theme.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.theme`
 * @example
 * let configValue:string =themeConfigs.annotation.value //get value 
 * themeConfigs.annotation.value = "rgba(153, 153, 153, .8)" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * themeConfigs.annotation.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const themeConfigs = defineConfigs<Theme>(
  _theme.scope,
  _theme.defaults
)

/**
 * Config keys of `i18n-ally.regex`
 */
export interface Regex {
  /**
   * %config.regex_key%
   * @default undefined
   */
  "key"?: (string | undefined),
  /**
   * %config.regex_usage_match%
   * @default undefined
   */
  "usageMatch"?: (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   * @default undefined
   */
  "usageMatchAppend"?: (string[] | undefined),
}

/**
 * Scoped defaults of `i18n-ally.regex`
 */
const _regex = {
  /**
   * scope: `i18n-ally.regex`
   */
  scope: "i18n-ally.regex",
  /**
   * Keys' defaults of `i18n-ally.regex`
   */
  defaults: {
    /**
     * %config.regex_key%
     */
    "key": undefined,
    /**
     * %config.regex_usage_match%
     */
    "usageMatch": undefined,
    /**
     * %config.regex_usage_match_append%
     */
    "usageMatchAppend": undefined,
  } satisfies Regex,
}

/**
 * Reactive ConfigObject of `i18n-ally.regex`
 * @example
 * let configValue = regexConfigObject.key //get value 
 * regexConfigObject.key = true // set value
 * regexConfigObject.$update("key", !configValue, ConfigurationTarget.Workspace, true)
 */
export const regexConfigObject = defineConfigObject<Regex>(
  _regex.scope,
  _regex.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.regex`
 * @example
 * let configValue:string =regexConfigs.key.value //get value 
 * regexConfigs.key.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * regexConfigs.key.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const regexConfigs = defineConfigs<Regex>(
  _regex.scope,
  _regex.defaults
)

/**
 * Config keys of `i18n-ally.refactor`
 */
export interface Refactor {
  /**
   * %config.refactor_templates%
   * @default undefined
   */
  "templates"?: ({
          /**
       * 
       * @default `undefined`
       */
      'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text")
      /**
       * 
       * @default `undefined`
       */
      'template'?: string
      /**
       * 
       * @default `undefined`
       */
      'templates'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'include'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'exclude'?: string[] 
    }[] | undefined),
}

/**
 * Scoped defaults of `i18n-ally.refactor`
 */
const _refactor = {
  /**
   * scope: `i18n-ally.refactor`
   */
  scope: "i18n-ally.refactor",
  /**
   * Keys' defaults of `i18n-ally.refactor`
   */
  defaults: {
    /**
     * %config.refactor_templates%
     */
    "templates": undefined,
  } satisfies Refactor,
}

/**
 * Reactive ConfigObject of `i18n-ally.refactor`
 * @example
 * let configValue = refactorConfigObject.templates //get value 
 * refactorConfigObject.templates = true // set value
 * refactorConfigObject.$update("templates", !configValue, ConfigurationTarget.Workspace, true)
 */
export const refactorConfigObject = defineConfigObject<Refactor>(
  _refactor.scope,
  _refactor.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.refactor`
 * @example
 * let configValue:array =refactorConfigs.templates.value //get value 
 * refactorConfigs.templates.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * refactorConfigs.templates.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const refactorConfigs = defineConfigs<Refactor>(
  _refactor.scope,
  _refactor.defaults
)

/**
 * Config keys of `i18n-ally.translate`
 */
export interface Translate {
  /**
   * %config.translate_save_as_candidates%
   * @default false
   */
  "saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   * @default false
   */
  "fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   * @default ["google"]
   */
  "engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   * @default 5
   */
  "parallels": number,
  /**
   * %config.prompt_translating_source%
   * @default false
   */
  "promptSource": boolean,
  /**
   * %config.translate_override_existing%
   * @default false
   */
  "overrideExisting": boolean,
  /**
   * %config.google_api_key%
   * @default null
   */
  "google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   * @default null
   */
  "deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   * @default null
   */
  "baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @default null
   */
  "baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   * @default false
   */
  "deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @default false
   */
  "deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   * @default "http://localhost:5000"
   */
  "libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   * @default null
   */
  "openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @default "https://api.openai.com"
   */
  "openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   * @default "gpt-3.5-turbo"
   */
  "openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * Scoped defaults of `i18n-ally.translate`
 */
const _translate = {
  /**
   * scope: `i18n-ally.translate`
   */
  scope: "i18n-ally.translate",
  /**
   * Keys' defaults of `i18n-ally.translate`
   */
  defaults: {
    /**
     * %config.translate_save_as_candidates%
     */
    "saveAsCandidates": false,
    /**
     * %config.translate.fallbackToKey%
     */
    "fallbackToKey": false,
    /**
     * %config.translate.engines%
     */
    "engines": ["google"],
    /**
     * %config.translate.parallels%
     */
    "parallels": 5,
    /**
     * %config.prompt_translating_source%
     */
    "promptSource": false,
    /**
     * %config.translate_override_existing%
     */
    "overrideExisting": false,
    /**
     * %config.google_api_key%
     */
    "google.apiKey": null,
    /**
     * %config.deepl_api_key%
     */
    "deepl.apiKey": null,
    /**
     * %config.baidu_appid%
     */
    "baidu.appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "baidu.apiSecret": null,
    /**
     * %config.deepl_log%
     */
    "deepl.enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "deepl.useFreeApiEntry": false,
    /**
     * %config.libretranslate_api_root%
     */
    "libre.apiRoot": "http://localhost:5000",
    /**
     * %config.openai_api_key%
     */
    "openai.apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "openai.apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "openai.apiModel": "gpt-3.5-turbo",
  } satisfies Translate,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate`
 * @example
 * let configValue = translateConfigObject.saveAsCandidates //get value 
 * translateConfigObject.saveAsCandidates = true // set value
 * translateConfigObject.$update("saveAsCandidates", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateConfigObject = defineConfigObject<Translate>(
  _translate.scope,
  _translate.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate`
 * @example
 * let configValue:boolean =translateConfigs.saveAsCandidates.value //get value 
 * translateConfigs.saveAsCandidates.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateConfigs.saveAsCandidates.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateConfigs = defineConfigs<Translate>(
  _translate.scope,
  _translate.defaults
)

/**
 * Config keys of `i18n-ally.translate.google`
 */
export interface TranslateGoogle {
  /**
   * %config.google_api_key%
   * @default null
   */
  "apiKey": (string | null),
}

/**
 * Scoped defaults of `i18n-ally.translate.google`
 */
const _translateGoogle = {
  /**
   * scope: `i18n-ally.translate.google`
   */
  scope: "i18n-ally.translate.google",
  /**
   * Keys' defaults of `i18n-ally.translate.google`
   */
  defaults: {
    /**
     * %config.google_api_key%
     */
    "apiKey": null,
  } satisfies TranslateGoogle,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate.google`
 * @example
 * let configValue = translateGoogleConfigObject.apiKey //get value 
 * translateGoogleConfigObject.apiKey = true // set value
 * translateGoogleConfigObject.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateGoogleConfigObject = defineConfigObject<TranslateGoogle>(
  _translateGoogle.scope,
  _translateGoogle.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate.google`
 * @example
 * let configValue:string =translateGoogleConfigs.apiKey.value //get value 
 * translateGoogleConfigs.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateGoogleConfigs.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateGoogleConfigs = defineConfigs<TranslateGoogle>(
  _translateGoogle.scope,
  _translateGoogle.defaults
)

/**
 * Config keys of `i18n-ally.translate.deepl`
 */
export interface TranslateDeepl {
  /**
   * %config.deepl_api_key%
   * @default null
   */
  "apiKey": (string | null),
  /**
   * %config.deepl_log%
   * @default false
   */
  "enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   * @default false
   */
  "useFreeApiEntry": boolean,
}

/**
 * Scoped defaults of `i18n-ally.translate.deepl`
 */
const _translateDeepl = {
  /**
   * scope: `i18n-ally.translate.deepl`
   */
  scope: "i18n-ally.translate.deepl",
  /**
   * Keys' defaults of `i18n-ally.translate.deepl`
   */
  defaults: {
    /**
     * %config.deepl_api_key%
     */
    "apiKey": null,
    /**
     * %config.deepl_log%
     */
    "enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "useFreeApiEntry": false,
  } satisfies TranslateDeepl,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate.deepl`
 * @example
 * let configValue = translateDeeplConfigObject.apiKey //get value 
 * translateDeeplConfigObject.apiKey = true // set value
 * translateDeeplConfigObject.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateDeeplConfigObject = defineConfigObject<TranslateDeepl>(
  _translateDeepl.scope,
  _translateDeepl.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate.deepl`
 * @example
 * let configValue:string =translateDeeplConfigs.apiKey.value //get value 
 * translateDeeplConfigs.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateDeeplConfigs.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateDeeplConfigs = defineConfigs<TranslateDeepl>(
  _translateDeepl.scope,
  _translateDeepl.defaults
)

/**
 * Config keys of `i18n-ally.translate.baidu`
 */
export interface TranslateBaidu {
  /**
   * %config.baidu_appid%
   * @default null
   */
  "appid": (string | null),
  /**
   * %config.baidu_app_secret%
   * @default null
   */
  "apiSecret": (string | null),
}

/**
 * Scoped defaults of `i18n-ally.translate.baidu`
 */
const _translateBaidu = {
  /**
   * scope: `i18n-ally.translate.baidu`
   */
  scope: "i18n-ally.translate.baidu",
  /**
   * Keys' defaults of `i18n-ally.translate.baidu`
   */
  defaults: {
    /**
     * %config.baidu_appid%
     */
    "appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "apiSecret": null,
  } satisfies TranslateBaidu,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate.baidu`
 * @example
 * let configValue = translateBaiduConfigObject.appid //get value 
 * translateBaiduConfigObject.appid = true // set value
 * translateBaiduConfigObject.$update("appid", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateBaiduConfigObject = defineConfigObject<TranslateBaidu>(
  _translateBaidu.scope,
  _translateBaidu.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate.baidu`
 * @example
 * let configValue:string =translateBaiduConfigs.appid.value //get value 
 * translateBaiduConfigs.appid.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateBaiduConfigs.appid.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateBaiduConfigs = defineConfigs<TranslateBaidu>(
  _translateBaidu.scope,
  _translateBaidu.defaults
)

/**
 * Config keys of `i18n-ally.translate.libre`
 */
export interface TranslateLibre {
  /**
   * %config.libretranslate_api_root%
   * @default "http://localhost:5000"
   */
  "apiRoot": string,
}

/**
 * Scoped defaults of `i18n-ally.translate.libre`
 */
const _translateLibre = {
  /**
   * scope: `i18n-ally.translate.libre`
   */
  scope: "i18n-ally.translate.libre",
  /**
   * Keys' defaults of `i18n-ally.translate.libre`
   */
  defaults: {
    /**
     * %config.libretranslate_api_root%
     */
    "apiRoot": "http://localhost:5000",
  } satisfies TranslateLibre,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate.libre`
 * @example
 * let configValue = translateLibreConfigObject.apiRoot //get value 
 * translateLibreConfigObject.apiRoot = true // set value
 * translateLibreConfigObject.$update("apiRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateLibreConfigObject = defineConfigObject<TranslateLibre>(
  _translateLibre.scope,
  _translateLibre.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate.libre`
 * @example
 * let configValue:string =translateLibreConfigs.apiRoot.value //get value 
 * translateLibreConfigs.apiRoot.value = "http://localhost:5000" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateLibreConfigs.apiRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateLibreConfigs = defineConfigs<TranslateLibre>(
  _translateLibre.scope,
  _translateLibre.defaults
)

/**
 * Config keys of `i18n-ally.translate.openai`
 */
export interface TranslateOpenai {
  /**
   * %config.openai_api_key%
   * @default null
   */
  "apiKey": (string | null),
  /**
   * %config.openai_api_root%
   * @default "https://api.openai.com"
   */
  "apiRoot": string,
  /**
   * %config.openai_api_model%
   * @default "gpt-3.5-turbo"
   */
  "apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * Scoped defaults of `i18n-ally.translate.openai`
 */
const _translateOpenai = {
  /**
   * scope: `i18n-ally.translate.openai`
   */
  scope: "i18n-ally.translate.openai",
  /**
   * Keys' defaults of `i18n-ally.translate.openai`
   */
  defaults: {
    /**
     * %config.openai_api_key%
     */
    "apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "apiModel": "gpt-3.5-turbo",
  } satisfies TranslateOpenai,
}

/**
 * Reactive ConfigObject of `i18n-ally.translate.openai`
 * @example
 * let configValue = translateOpenaiConfigObject.apiKey //get value 
 * translateOpenaiConfigObject.apiKey = true // set value
 * translateOpenaiConfigObject.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const translateOpenaiConfigObject = defineConfigObject<TranslateOpenai>(
  _translateOpenai.scope,
  _translateOpenai.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.translate.openai`
 * @example
 * let configValue:string =translateOpenaiConfigs.apiKey.value //get value 
 * translateOpenaiConfigs.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * translateOpenaiConfigs.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const translateOpenaiConfigs = defineConfigs<TranslateOpenai>(
  _translateOpenai.scope,
  _translateOpenai.defaults
)

/**
 * Config keys of `i18n-ally.usage`
 */
export interface Usage {
  /**
   * %config.usage.scanning_ignore%
   * @default undefined
   */
  "scanningIgnore"?: (string[] | undefined),
  /**
   * %config.derived_keys%
   * @default null
   */
  "derivedKeyRules": (string[] | null),
}

/**
 * Scoped defaults of `i18n-ally.usage`
 */
const _usage = {
  /**
   * scope: `i18n-ally.usage`
   */
  scope: "i18n-ally.usage",
  /**
   * Keys' defaults of `i18n-ally.usage`
   */
  defaults: {
    /**
     * %config.usage.scanning_ignore%
     */
    "scanningIgnore": undefined,
    /**
     * %config.derived_keys%
     */
    "derivedKeyRules": null,
  } satisfies Usage,
}

/**
 * Reactive ConfigObject of `i18n-ally.usage`
 * @example
 * let configValue = usageConfigObject.scanningIgnore //get value 
 * usageConfigObject.scanningIgnore = true // set value
 * usageConfigObject.$update("scanningIgnore", !configValue, ConfigurationTarget.Workspace, true)
 */
export const usageConfigObject = defineConfigObject<Usage>(
  _usage.scope,
  _usage.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.usage`
 * @example
 * let configValue:array =usageConfigs.scanningIgnore.value //get value 
 * usageConfigs.scanningIgnore.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * usageConfigs.scanningIgnore.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const usageConfigs = defineConfigs<Usage>(
  _usage.scope,
  _usage.defaults
)

/**
 * Config keys of `i18n-ally.frameworks`
 */
export interface Frameworks {
  /**
   * 
   * @default "app/views"
   */
  "ruby-rails.scopeRoot": string,
}

/**
 * Scoped defaults of `i18n-ally.frameworks`
 */
const _frameworks = {
  /**
   * scope: `i18n-ally.frameworks`
   */
  scope: "i18n-ally.frameworks",
  /**
   * Keys' defaults of `i18n-ally.frameworks`
   */
  defaults: {
    "ruby-rails.scopeRoot": "app/views",
  } satisfies Frameworks,
}

/**
 * Reactive ConfigObject of `i18n-ally.frameworks`
 * @example
 * let configValue = frameworksConfigObject.ruby-rails.scopeRoot //get value 
 * frameworksConfigObject.ruby-rails.scopeRoot = true // set value
 * frameworksConfigObject.$update("ruby-rails.scopeRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const frameworksConfigObject = defineConfigObject<Frameworks>(
  _frameworks.scope,
  _frameworks.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.frameworks`
 * @example
 * let configValue:string =frameworksConfigs.ruby-rails.scopeRoot.value //get value 
 * frameworksConfigs.ruby-rails.scopeRoot.value = "app/views" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * frameworksConfigs.ruby-rails.scopeRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const frameworksConfigs = defineConfigs<Frameworks>(
  _frameworks.scope,
  _frameworks.defaults
)

/**
 * Config keys of `i18n-ally.frameworks.ruby-rails`
 */
export interface FrameworksRubyRails {
  /**
   * 
   * @default "app/views"
   */
  "scopeRoot": string,
}

/**
 * Scoped defaults of `i18n-ally.frameworks.ruby-rails`
 */
const _frameworksRubyRails = {
  /**
   * scope: `i18n-ally.frameworks.ruby-rails`
   */
  scope: "i18n-ally.frameworks.ruby-rails",
  /**
   * Keys' defaults of `i18n-ally.frameworks.ruby-rails`
   */
  defaults: {
    "scopeRoot": "app/views",
  } satisfies FrameworksRubyRails,
}

/**
 * Reactive ConfigObject of `i18n-ally.frameworks.ruby-rails`
 * @example
 * let configValue = frameworksRubyRailsConfigObject.scopeRoot //get value 
 * frameworksRubyRailsConfigObject.scopeRoot = true // set value
 * frameworksRubyRailsConfigObject.$update("scopeRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const frameworksRubyRailsConfigObject = defineConfigObject<FrameworksRubyRails>(
  _frameworksRubyRails.scope,
  _frameworksRubyRails.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.frameworks.ruby-rails`
 * @example
 * let configValue:string =frameworksRubyRailsConfigs.scopeRoot.value //get value 
 * frameworksRubyRailsConfigs.scopeRoot.value = "app/views" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * frameworksRubyRailsConfigs.scopeRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const frameworksRubyRailsConfigs = defineConfigs<FrameworksRubyRails>(
  _frameworksRubyRails.scope,
  _frameworksRubyRails.defaults
)

/**
 * Config keys of `i18n-ally.parsers`
 */
export interface Parsers {
  /**
   * 
   * @default "node_modules/ts-node/dist/bin.js"
   */
  "typescript.tsNodePath": string,
  /**
   * 
   * @default {}
   */
  "typescript.compilerOptions": Record<string, unknown>,
  /**
   * 
   * @default {}
   */
  "extendFileExtensions": Record<string, unknown>,
}

/**
 * Scoped defaults of `i18n-ally.parsers`
 */
const _parsers = {
  /**
   * scope: `i18n-ally.parsers`
   */
  scope: "i18n-ally.parsers",
  /**
   * Keys' defaults of `i18n-ally.parsers`
   */
  defaults: {
    "typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "typescript.compilerOptions": {},
    "extendFileExtensions": {},
  } satisfies Parsers,
}

/**
 * Reactive ConfigObject of `i18n-ally.parsers`
 * @example
 * let configValue = parsersConfigObject.typescript.tsNodePath //get value 
 * parsersConfigObject.typescript.tsNodePath = true // set value
 * parsersConfigObject.$update("typescript.tsNodePath", !configValue, ConfigurationTarget.Workspace, true)
 */
export const parsersConfigObject = defineConfigObject<Parsers>(
  _parsers.scope,
  _parsers.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.parsers`
 * @example
 * let configValue:string =parsersConfigs.typescript.tsNodePath.value //get value 
 * parsersConfigs.typescript.tsNodePath.value = "node_modules/ts-node/dist/bin.js" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * parsersConfigs.typescript.tsNodePath.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const parsersConfigs = defineConfigs<Parsers>(
  _parsers.scope,
  _parsers.defaults
)

/**
 * Config keys of `i18n-ally.parsers.typescript`
 */
export interface ParsersTypescript {
  /**
   * 
   * @default "node_modules/ts-node/dist/bin.js"
   */
  "tsNodePath": string,
  /**
   * 
   * @default {}
   */
  "compilerOptions": Record<string, unknown>,
}

/**
 * Scoped defaults of `i18n-ally.parsers.typescript`
 */
const _parsersTypescript = {
  /**
   * scope: `i18n-ally.parsers.typescript`
   */
  scope: "i18n-ally.parsers.typescript",
  /**
   * Keys' defaults of `i18n-ally.parsers.typescript`
   */
  defaults: {
    "tsNodePath": "node_modules/ts-node/dist/bin.js",
    "compilerOptions": {},
  } satisfies ParsersTypescript,
}

/**
 * Reactive ConfigObject of `i18n-ally.parsers.typescript`
 * @example
 * let configValue = parsersTypescriptConfigObject.tsNodePath //get value 
 * parsersTypescriptConfigObject.tsNodePath = true // set value
 * parsersTypescriptConfigObject.$update("tsNodePath", !configValue, ConfigurationTarget.Workspace, true)
 */
export const parsersTypescriptConfigObject = defineConfigObject<ParsersTypescript>(
  _parsersTypescript.scope,
  _parsersTypescript.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.parsers.typescript`
 * @example
 * let configValue:string =parsersTypescriptConfigs.tsNodePath.value //get value 
 * parsersTypescriptConfigs.tsNodePath.value = "node_modules/ts-node/dist/bin.js" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * parsersTypescriptConfigs.tsNodePath.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const parsersTypescriptConfigs = defineConfigs<ParsersTypescript>(
  _parsersTypescript.scope,
  _parsersTypescript.defaults
)

/**
 * Config keys of `i18n-ally.review`
 */
export interface Review {
  /**
   * %config.review_enabled%
   * @default true
   */
  "enabled": boolean,
  /**
   * %config.review_gutters%
   * @default true
   */
  "gutters": boolean,
  /**
   * %config.review_username%
   * @default undefined
   */
  "user.name"?: (string | undefined),
  /**
   * %config.review_email%
   * @default undefined
   */
  "user.email"?: (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   * @default false
   */
  "removeCommentOnResolved": boolean,
}

/**
 * Scoped defaults of `i18n-ally.review`
 */
const _review = {
  /**
   * scope: `i18n-ally.review`
   */
  scope: "i18n-ally.review",
  /**
   * Keys' defaults of `i18n-ally.review`
   */
  defaults: {
    /**
     * %config.review_enabled%
     */
    "enabled": true,
    /**
     * %config.review_gutters%
     */
    "gutters": true,
    /**
     * %config.review_username%
     */
    "user.name": undefined,
    /**
     * %config.review_email%
     */
    "user.email": undefined,
    /**
     * %config.review_remove_on_resolved%
     */
    "removeCommentOnResolved": false,
  } satisfies Review,
}

/**
 * Reactive ConfigObject of `i18n-ally.review`
 * @example
 * let configValue = reviewConfigObject.enabled //get value 
 * reviewConfigObject.enabled = true // set value
 * reviewConfigObject.$update("enabled", !configValue, ConfigurationTarget.Workspace, true)
 */
export const reviewConfigObject = defineConfigObject<Review>(
  _review.scope,
  _review.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.review`
 * @example
 * let configValue:boolean =reviewConfigs.enabled.value //get value 
 * reviewConfigs.enabled.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * reviewConfigs.enabled.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const reviewConfigs = defineConfigs<Review>(
  _review.scope,
  _review.defaults
)

/**
 * Config keys of `i18n-ally.review.user`
 */
export interface ReviewUser {
  /**
   * %config.review_username%
   * @default undefined
   */
  "name"?: (string | undefined),
  /**
   * %config.review_email%
   * @default undefined
   */
  "email"?: (string | undefined),
}

/**
 * Scoped defaults of `i18n-ally.review.user`
 */
const _reviewUser = {
  /**
   * scope: `i18n-ally.review.user`
   */
  scope: "i18n-ally.review.user",
  /**
   * Keys' defaults of `i18n-ally.review.user`
   */
  defaults: {
    /**
     * %config.review_username%
     */
    "name": undefined,
    /**
     * %config.review_email%
     */
    "email": undefined,
  } satisfies ReviewUser,
}

/**
 * Reactive ConfigObject of `i18n-ally.review.user`
 * @example
 * let configValue = reviewUserConfigObject.name //get value 
 * reviewUserConfigObject.name = true // set value
 * reviewUserConfigObject.$update("name", !configValue, ConfigurationTarget.Workspace, true)
 */
export const reviewUserConfigObject = defineConfigObject<ReviewUser>(
  _reviewUser.scope,
  _reviewUser.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.review.user`
 * @example
 * let configValue:string =reviewUserConfigs.name.value //get value 
 * reviewUserConfigs.name.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * reviewUserConfigs.name.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const reviewUserConfigs = defineConfigs<ReviewUser>(
  _reviewUser.scope,
  _reviewUser.defaults
)

/**
 * Config keys of `i18n-ally.editor`
 */
export interface Editor {
  /**
   * %config.editor_prefer_editor%
   * @default false
   */
  "preferEditor": boolean,
}

/**
 * Scoped defaults of `i18n-ally.editor`
 */
const _editor = {
  /**
   * scope: `i18n-ally.editor`
   */
  scope: "i18n-ally.editor",
  /**
   * Keys' defaults of `i18n-ally.editor`
   */
  defaults: {
    /**
     * %config.editor_prefer_editor%
     */
    "preferEditor": false,
  } satisfies Editor,
}

/**
 * Reactive ConfigObject of `i18n-ally.editor`
 * @example
 * let configValue = editorConfigObject.preferEditor //get value 
 * editorConfigObject.preferEditor = true // set value
 * editorConfigObject.$update("preferEditor", !configValue, ConfigurationTarget.Workspace, true)
 */
export const editorConfigObject = defineConfigObject<Editor>(
  _editor.scope,
  _editor.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.editor`
 * @example
 * let configValue:boolean =editorConfigs.preferEditor.value //get value 
 * editorConfigs.preferEditor.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * editorConfigs.preferEditor.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const editorConfigs = defineConfigs<Editor>(
  _editor.scope,
  _editor.defaults
)

/**
 * Config keys of `i18n-ally.extract`
 */
export interface Extract {
  /**
   * %config.keygen_strategy%
   * @default "slug"
   */
  "keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   * @default "default"
   */
  "keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   * @default ""
   */
  "keyPrefix": string,
  /**
   * %config.key_max_length%
   * @default null
   */
  "keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   * @default "none"
   */
  "targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   * @default false
   */
  "autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   * @default undefined
   */
  "ignored"?: (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   * @default {}
   */
  "ignoredByFiles": Record<string, unknown>,
}

/**
 * Scoped defaults of `i18n-ally.extract`
 */
const _extract = {
  /**
   * scope: `i18n-ally.extract`
   */
  scope: "i18n-ally.extract",
  /**
   * Keys' defaults of `i18n-ally.extract`
   */
  defaults: {
    /**
     * %config.keygen_strategy%
     */
    "keygenStrategy": "slug",
    /**
     * %config.keygen_style%
     */
    "keygenStyle": "default",
    /**
     * %config.key_prefix%
     */
    "keyPrefix": "",
    /**
     * %config.key_max_length%
     */
    "keyMaxLength": null,
    /**
     * %config.target_picking_strategy%
     */
    "targetPickingStrategy": "none",
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.babel": {},
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "autoDetect": false,
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "ignored": undefined,
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "ignoredByFiles": {},
  } satisfies Extract,
}

/**
 * Reactive ConfigObject of `i18n-ally.extract`
 * @example
 * let configValue = extractConfigObject.keygenStrategy //get value 
 * extractConfigObject.keygenStrategy = true // set value
 * extractConfigObject.$update("keygenStrategy", !configValue, ConfigurationTarget.Workspace, true)
 */
export const extractConfigObject = defineConfigObject<Extract>(
  _extract.scope,
  _extract.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.extract`
 * @example
 * let configValue:string =extractConfigs.keygenStrategy.value //get value 
 * extractConfigs.keygenStrategy.value = "slug" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * extractConfigs.keygenStrategy.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const extractConfigs = defineConfigs<Extract>(
  _extract.scope,
  _extract.defaults
)

/**
 * Config keys of `i18n-ally.extract.parsers`
 */
export interface ExtractParsers {
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @default {}
   */
  "babel": Record<string, unknown>,
}

/**
 * Scoped defaults of `i18n-ally.extract.parsers`
 */
const _extractParsers = {
  /**
   * scope: `i18n-ally.extract.parsers`
   */
  scope: "i18n-ally.extract.parsers",
  /**
   * Keys' defaults of `i18n-ally.extract.parsers`
   */
  defaults: {
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "babel": {},
  } satisfies ExtractParsers,
}

/**
 * Reactive ConfigObject of `i18n-ally.extract.parsers`
 * @example
 * let configValue = extractParsersConfigObject.html //get value 
 * extractParsersConfigObject.html = true // set value
 * extractParsersConfigObject.$update("html", !configValue, ConfigurationTarget.Workspace, true)
 */
export const extractParsersConfigObject = defineConfigObject<ExtractParsers>(
  _extractParsers.scope,
  _extractParsers.defaults
)
/**
 * Reactive ToConfigRefs of `i18n-ally.extract.parsers`
 * @example
 * let configValue:object =extractParsersConfigs.html.value //get value 
 * extractParsersConfigs.html.value = {} // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * extractParsersConfigs.html.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const extractParsersConfigs = defineConfigs<ExtractParsers>(
  _extractParsers.scope,
  _extractParsers.defaults
)
