/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "lokalise"
export const name = "i18n-ally"
export const version = "2.12.0"
export const displayName = "i18n Ally"
export const description = "🌍 All in one i18n extension for VS Code"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "i18n-ally.config-locales"
  | "i18n-ally.config-locales-auto"
  | "i18n-ally.config-display-language"
  | "i18n-ally.config-source-language"
  | "i18n-ally.set-display-language"
  | "i18n-ally.set-source-language"
  | "i18n-ally.copy-key"
  | "i18n-ally.translate-key"
  | "i18n-ally.edit-key"
  | "i18n-ally.open-key"
  | "i18n-ally.delete-key"
  | "i18n-ally.rename-key"
  | "i18n-ally.extract-text"
  | "i18n-ally.extract-hard-strings-batch"
  | "i18n-ally.detect_hard_strings"
  | "i18n-ally.open-url"
  | "i18n-ally.fulfill-keys"
  | "i18n-ally.refresh-usage"
  | "i18n-ally.support"
  | "i18n-ally.locale-visibility-show"
  | "i18n-ally.locale-visibility-hide"
  | "i18n-ally.new-key"
  | "i18n-ally.duplicate-key"
  | "i18n-ally.mark-key-as-in-use"
  | "i18n-ally.open-in-editor"
  | "i18n-ally.open-editor"
  | "i18n-ally.review.comment"
  | "i18n-ally.review.approve"
  | "i18n-ally.review.request-change"
  | "i18n-ally.review.edit"
  | "i18n-ally.review.resolve"
  | "i18n-ally.review.resolve-thread"
  | "i18n-ally.review.apply-translation"
  | "i18n-ally.review.apply-suggestion"
  | "i18n-ally.insert-key"
  | "i18n-ally.deepl-usage"
  | "i18n-ally.go-to-range"
  | "i18n-ally.go-to-next-usage"
  | "i18n-ally.go-to-prev-usage"
  | "i18n-ally.open-docs-hard-string"
  | "i18n-ally.extract-disable-auto-detect"
  | "i18n-ally.extract-enable-auto-detect"

export function useCommandKey(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(commandFullKey, callback)
}

/**
 * %command.config_locales%
 * @value `i18n-ally.config-locales`
 */
export function useCommandConfigLocales(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.config-locales", callback)
}

/**
 * %command.config_locales_auto%
 * @value `i18n-ally.config-locales-auto`
 */
export function useCommandConfigLocalesAuto(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.config-locales-auto", callback)
}

/**
 * %command.config_display_language%
 * @value `i18n-ally.config-display-language`
 */
export function useCommandConfigDisplayLanguage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.config-display-language", callback)
}

/**
 * %command.config_source_language%
 * @value `i18n-ally.config-source-language`
 */
export function useCommandConfigSourceLanguage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.config-source-language", callback)
}

/**
 * %command.set_display_language%
 * @value `i18n-ally.set-display-language`
 */
export function useCommandSetDisplayLanguage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.set-display-language", callback)
}

/**
 * %command.set_source_language%
 * @value `i18n-ally.set-source-language`
 */
export function useCommandSetSourceLanguage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.set-source-language", callback)
}

/**
 * %command.copy_key%
 * @value `i18n-ally.copy-key`
 */
export function useCommandCopyKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.copy-key", callback)
}

/**
 * %command.translate_key%
 * @value `i18n-ally.translate-key`
 */
export function useCommandTranslateKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.translate-key", callback)
}

/**
 * %command.edit_key%
 * @value `i18n-ally.edit-key`
 */
export function useCommandEditKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.edit-key", callback)
}

/**
 * %command.open_key%
 * @value `i18n-ally.open-key`
 */
export function useCommandOpenKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.open-key", callback)
}

/**
 * %command.delete_key%
 * @value `i18n-ally.delete-key`
 */
export function useCommandDeleteKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.delete-key", callback)
}

/**
 * %command.rename_key%
 * @value `i18n-ally.rename-key`
 */
export function useCommandRenameKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.rename-key", callback)
}

/**
 * %refactor.extract_text%
 * @value `i18n-ally.extract-text`
 */
export function useCommandExtractText(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.extract-text", callback)
}

/**
 * Extract all hard-coded strings (experimental)
 * @value `i18n-ally.extract-hard-strings-batch`
 */
export function useCommandExtractHardStringsBatch(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.extract-hard-strings-batch", callback)
}

/**
 * Detect hard-coded strings in current file (experimental)
 * @value `i18n-ally.detect_hard_strings`
 */
export function useCommandDetectHardStrings(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.detect_hard_strings", callback)
}

/**
 * %command.open_url%
 * @value `i18n-ally.open-url`
 */
export function useCommandOpenUrl(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.open-url", callback)
}

/**
 * %command.fulfill_keys%
 * @value `i18n-ally.fulfill-keys`
 */
export function useCommandFulfillKeys(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.fulfill-keys", callback)
}

/**
 * %command.refresh_usage%
 * @value `i18n-ally.refresh-usage`
 */
export function useCommandRefreshUsage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.refresh-usage", callback)
}

/**
 * %feedback.support%
 * @value `i18n-ally.support`
 */
export function useCommandSupport(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.support", callback)
}

/**
 * %command.locale_visibility_show%
 * @value `i18n-ally.locale-visibility-show`
 */
export function useCommandLocaleVisibilityShow(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.locale-visibility-show", callback)
}

/**
 * %command.locale_visibility_hide%
 * @value `i18n-ally.locale-visibility-hide`
 */
export function useCommandLocaleVisibilityHide(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.locale-visibility-hide", callback)
}

/**
 * %command.new_key%
 * @value `i18n-ally.new-key`
 */
export function useCommandNewKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.new-key", callback)
}

/**
 * %command.duplicate_key%
 * @value `i18n-ally.duplicate-key`
 */
export function useCommandDuplicateKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.duplicate-key", callback)
}

/**
 * %command.mark_key_as_in_use%
 * @value `i18n-ally.mark-key-as-in-use`
 */
export function useCommandMarkKeyAsInUse(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.mark-key-as-in-use", callback)
}

/**
 * %command.open_in_editor%
 * @value `i18n-ally.open-in-editor`
 */
export function useCommandOpenInEditor(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.open-in-editor", callback)
}

/**
 * %command.open_editor%
 * @value `i18n-ally.open-editor`
 */
export function useCommandOpenEditor(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.open-editor", callback)
}

/**
 * %review.leave_comment%
 * @value `i18n-ally.review.comment`
 */
export function useCommandReviewComment(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.comment", callback)
}

/**
 * %review.approve%
 * @value `i18n-ally.review.approve`
 */
export function useCommandReviewApprove(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.approve", callback)
}

/**
 * %review.request_change%
 * @value `i18n-ally.review.request-change`
 */
export function useCommandReviewRequestChange(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.request-change", callback)
}

/**
 * %review.edit%
 * @value `i18n-ally.review.edit`
 */
export function useCommandReviewEdit(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.edit", callback)
}

/**
 * %review.resolve%
 * @value `i18n-ally.review.resolve`
 */
export function useCommandReviewResolve(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.resolve", callback)
}

/**
 * %review.resolve_all%
 * @value `i18n-ally.review.resolve-thread`
 */
export function useCommandReviewResolveThread(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.resolve-thread", callback)
}

/**
 * %review.apply_translation_candidate%
 * @value `i18n-ally.review.apply-translation`
 */
export function useCommandReviewApplyTranslation(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.apply-translation", callback)
}

/**
 * %review.apply_suggestion%
 * @value `i18n-ally.review.apply-suggestion`
 */
export function useCommandReviewApplySuggestion(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.review.apply-suggestion", callback)
}

/**
 * %command.insert_key%
 * @value `i18n-ally.insert-key`
 */
export function useCommandInsertKey(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.insert-key", callback)
}

/**
 * %command.deepl_usage%
 * @value `i18n-ally.deepl-usage`
 */
export function useCommandDeeplUsage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.deepl-usage", callback)
}

/**
 * %command.go_to_range%
 * @value `i18n-ally.go-to-range`
 */
export function useCommandGoToRange(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.go-to-range", callback)
}

/**
 * %command.go_to_next_usage%
 * @value `i18n-ally.go-to-next-usage`
 */
export function useCommandGoToNextUsage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.go-to-next-usage", callback)
}

/**
 * %command.go_to_prev_usage%
 * @value `i18n-ally.go-to-prev-usage`
 */
export function useCommandGoToPrevUsage(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.go-to-prev-usage", callback)
}

/**
 * %command.show_docs%
 * @value `i18n-ally.open-docs-hard-string`
 */
export function useCommandOpenDocsHardString(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.open-docs-hard-string", callback)
}

/**
 * %command.extract.disable-auto-detect%
 * @value `i18n-ally.extract-disable-auto-detect`
 */
export function useCommandExtractDisableAutoDetect(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.extract-disable-auto-detect", callback)
}

/**
 * %command.extract.enable-auto-detect%
 * @value `i18n-ally.extract-enable-auto-detect`
 */
export function useCommandExtractEnableAutoDetect(callback: (...args: any[]) => any) {
  return useCommandKey("i18n-ally.extract-enable-auto-detect", callback)
}


/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = 
  | "i18n-ally.derivedKeyRules"
  | "i18n-ally.filenameMatchRegex"
  | "i18n-ally.fileNamespace"
  | "i18n-ally.keyMatchRegex"
  | "vue-i18n-ally.localesPaths"
  | "vue-i18n-ally.encoding"
  | "vue-i18n-ally.sourceLanguage"
  | "vue-i18n-ally.displayLanguage"
  | "vue-i18n-ally.ignoredLocales"
  | "vue-i18n-ally.keystyle"
  | "vue-i18n-ally.dirStructure"
  | "vue-i18n-ally.annotations"
  | "vue-i18n-ally.annotationMaxLength"
  | "vue-i18n-ally.annotationDelimiter"
  | "vue-i18n-ally.filenameMatchRegex"
  | "vue-i18n-ally.includeSubfolders"
  | "vue-i18n-ally.fullReloadOnChanged"
  | "vue-i18n-ally.sortKeys"
  | "vue-i18n-ally.preferredDelimiter"
  | "vue-i18n-ally.readonly"

/**
 * Section Type of `i18n-ally`
 */
export interface I18nAlly {
  /**
   * %config.disabled%
   */
  "disabled": boolean,
  /**
   * %config.auto_detection%
   */
  "autoDetection": boolean,
  /**
   * %config.locales_paths%
   */
  "localesPaths"?: (string | string[] | undefined),
  /**
   * %config.encoding%
   */
  "encoding": string,
  /**
   * %config.source_language%
   */
  "sourceLanguage"?: (string | undefined),
  /**
   * %config.display_language%
   */
  "displayLanguage"?: (string | undefined),
  /**
   * %config.ignored_locales%
   */
  "ignoredLocales"?: (unknown[] | undefined),
  /**
   * %config.keystyle%
   */
  "keystyle"?: ("auto" | "nested" | "flat" | undefined),
  /**
   * %config.dir_structure%
   */
  "dirStructure"?: ("auto" | "file" | "dir" | undefined),
  /**
   * %config.annotations%
   */
  "annotations": boolean,
  /**
   * %config.annotation_in_place%
   */
  "annotationInPlace": boolean,
  /**
   * %config.annotation_max_length%
   */
  "annotationMaxLength": number,
  /**
   * %config.annotation_delimiter%
   */
  "annotationDelimiter": string,
  /**
   * %config.include_subfolders%
   */
  "includeSubfolders": boolean,
  /**
   * %config.full_reload_on_changed%
   */
  "fullReloadOnChanged": boolean,
  /**
   * %config.show_flags%
   */
  "showFlags": boolean,
  /**
   * %config.enabled_frameworks%
   */
  "enabledFrameworks"?: (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined),
  /**
   * %config.enabled_parsers%
   */
  "enabledParsers"?: (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined),
  /**
   * %config.keys_in_use%
   */
  "keysInUse"?: (string[] | undefined),
  /**
   * %config.sort_keys%
   */
  "sortKeys": boolean,
  /**
   * %config.sort_compare%
   */
  "sortCompare": ("binary" | "locale"),
  /**
   * %config.sort_locale%
   */
  "sortLocale"?: (string | undefined),
  /**
   * %config.preferred_delimiter%
   */
  "preferredDelimiter": string,
  /**
   * %config.readonly%
   */
  "readonly": boolean,
  /**
   * %config.keep_fulfill%
   */
  "keepFulfilled": boolean,
  /**
   * %config.locale_country_map%
   */
  "localeCountryMap": Record<string, unknown>,
  /**
   * %config.indent%
   */
  "indent": number,
  /**
   * %config.disable_path_parsing%
   */
  "disablePathParsing": boolean,
  /**
   * %config.tab_style%
   */
  "tabStyle": ("space" | "tab"),
  /**
   * %config.namespace%
   */
  "namespace"?: (boolean | undefined),
  /**
   * %config.path_matcher%
   */
  "pathMatcher"?: (string | undefined),
  /**
   * %config.language_tag_system%
   */
  "languageTagSystem": ("bcp47" | "legacy" | "none"),
  /**
   * %config.ignore_files%
   */
  "ignoreFiles"?: (string[] | undefined),
  "theme.annotation": string,
  "theme.annotationMissing": string,
  "theme.annotationBorder": string,
  "theme.annotationMissingBorder": string,
  /**
   * %config.regex_key%
   */
  "regex.key"?: (string | undefined),
  /**
   * %config.regex_usage_match%
   */
  "regex.usageMatch"?: (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   */
  "regex.usageMatchAppend"?: (string[] | undefined),
  /**
   * %config.refactor_templates%
   */
  "refactor.templates"?: ({
          /**
       * 
       * @default `undefined`
       */
      'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text")
      /**
       * 
       * @default `undefined`
       */
      'template'?: string
      /**
       * 
       * @default `undefined`
       */
      'templates'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'include'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'exclude'?: string[] 
    }[] | undefined),
  /**
   * %config.translate_save_as_candidates%
   */
  "translate.saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   */
  "translate.fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   */
  "translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   */
  "translate.parallels": number,
  /**
   * %config.prompt_translating_source%
   */
  "translate.promptSource": boolean,
  /**
   * %config.translate_override_existing%
   */
  "translate.overrideExisting": boolean,
  /**
   * %config.google_api_key%
   */
  "translate.google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   */
  "translate.deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   */
  "translate.baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   */
  "translate.baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   */
  "translate.deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   */
  "translate.deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   */
  "translate.libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   */
  "translate.openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   */
  "translate.openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   */
  "translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
  /**
   * %config.usage.scanning_ignore%
   */
  "usage.scanningIgnore"?: (string[] | undefined),
  /**
   * %config.derived_keys%
   */
  "usage.derivedKeyRules": (string[] | null),
  "frameworks.ruby-rails.scopeRoot": string,
  "parsers.typescript.tsNodePath": string,
  "parsers.typescript.compilerOptions": Record<string, unknown>,
  "parsers.extendFileExtensions": Record<string, unknown>,
  /**
   * %config.review_enabled%
   */
  "review.enabled": boolean,
  /**
   * %config.review_gutters%
   */
  "review.gutters": boolean,
  /**
   * %config.review_username%
   */
  "review.user.name"?: (string | undefined),
  /**
   * %config.review_email%
   */
  "review.user.email"?: (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   */
  "review.removeCommentOnResolved": boolean,
  /**
   * %config.editor_prefer_editor%
   */
  "editor.preferEditor": boolean,
  /**
   * %config.keygen_strategy%
   */
  "extract.keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   */
  "extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   */
  "extract.keyPrefix": string,
  /**
   * %config.key_max_length%
   */
  "extract.keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   */
  "extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "extract.parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "extract.parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   */
  "extract.autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   */
  "extract.ignored"?: (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   */
  "extract.ignoredByFiles": Record<string, unknown>,
  "parserOptions"?: Record<string, unknown>,
  /**
   * %config.default_namespace%
   */
  "defaultNamespace"?: (string | undefined),
}

/**
 * Section Type of `i18n-ally.theme`
 */
export interface I18nAllyTheme {
  "annotation": string,
  "annotationMissing": string,
  "annotationBorder": string,
  "annotationMissingBorder": string,
}

/**
 * Section Type of `i18n-ally.regex`
 */
export interface I18nAllyRegex {
  /**
   * %config.regex_key%
   */
  "key"?: (string | undefined),
  /**
   * %config.regex_usage_match%
   */
  "usageMatch"?: (string[] | undefined),
  /**
   * %config.regex_usage_match_append%
   */
  "usageMatchAppend"?: (string[] | undefined),
}

/**
 * Section Type of `i18n-ally.refactor`
 */
export interface I18nAllyRefactor {
  /**
   * %config.refactor_templates%
   */
  "templates"?: ({
          /**
       * 
       * @default `undefined`
       */
      'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text")
      /**
       * 
       * @default `undefined`
       */
      'template'?: string
      /**
       * 
       * @default `undefined`
       */
      'templates'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'include'?: string[]
      /**
       * 
       * @default `undefined`
       */
      'exclude'?: string[] 
    }[] | undefined),
}

/**
 * Section Type of `i18n-ally.translate`
 */
export interface I18nAllyTranslate {
  /**
   * %config.translate_save_as_candidates%
   */
  "saveAsCandidates": boolean,
  /**
   * %config.translate.fallbackToKey%
   */
  "fallbackToKey": boolean,
  /**
   * %config.translate.engines%
   */
  "engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  /**
   * %config.translate.parallels%
   */
  "parallels": number,
  /**
   * %config.prompt_translating_source%
   */
  "promptSource": boolean,
  /**
   * %config.translate_override_existing%
   */
  "overrideExisting": boolean,
  /**
   * %config.google_api_key%
   */
  "google.apiKey": (string | null),
  /**
   * %config.deepl_api_key%
   */
  "deepl.apiKey": (string | null),
  /**
   * %config.baidu_appid%
   */
  "baidu.appid": (string | null),
  /**
   * %config.baidu_app_secret%
   */
  "baidu.apiSecret": (string | null),
  /**
   * %config.deepl_log%
   */
  "deepl.enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   */
  "deepl.useFreeApiEntry": boolean,
  /**
   * %config.libretranslate_api_root%
   */
  "libre.apiRoot": string,
  /**
   * %config.openai_api_key%
   */
  "openai.apiKey": (string | null),
  /**
   * %config.openai_api_root%
   */
  "openai.apiRoot": string,
  /**
   * %config.openai_api_model%
   */
  "openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * Section Type of `i18n-ally.translate.google`
 */
export interface I18nAllyTranslateGoogle {
  /**
   * %config.google_api_key%
   */
  "apiKey": (string | null),
}

/**
 * Section Type of `i18n-ally.translate.deepl`
 */
export interface I18nAllyTranslateDeepl {
  /**
   * %config.deepl_api_key%
   */
  "apiKey": (string | null),
  /**
   * %config.deepl_log%
   */
  "enableLog": boolean,
  /**
   * %config.deepl_use_free_api_entry%
   */
  "useFreeApiEntry": boolean,
}

/**
 * Section Type of `i18n-ally.translate.baidu`
 */
export interface I18nAllyTranslateBaidu {
  /**
   * %config.baidu_appid%
   */
  "appid": (string | null),
  /**
   * %config.baidu_app_secret%
   */
  "apiSecret": (string | null),
}

/**
 * Section Type of `i18n-ally.translate.libre`
 */
export interface I18nAllyTranslateLibre {
  /**
   * %config.libretranslate_api_root%
   */
  "apiRoot": string,
}

/**
 * Section Type of `i18n-ally.translate.openai`
 */
export interface I18nAllyTranslateOpenai {
  /**
   * %config.openai_api_key%
   */
  "apiKey": (string | null),
  /**
   * %config.openai_api_root%
   */
  "apiRoot": string,
  /**
   * %config.openai_api_model%
   */
  "apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
}

/**
 * Section Type of `i18n-ally.usage`
 */
export interface I18nAllyUsage {
  /**
   * %config.usage.scanning_ignore%
   */
  "scanningIgnore"?: (string[] | undefined),
  /**
   * %config.derived_keys%
   */
  "derivedKeyRules": (string[] | null),
}

/**
 * Section Type of `i18n-ally.frameworks`
 */
export interface I18nAllyFrameworks {
  "ruby-rails.scopeRoot": string,
}

/**
 * Section Type of `i18n-ally.frameworks.ruby-rails`
 */
export interface I18nAllyFrameworksRubyRails {
  "scopeRoot": string,
}

/**
 * Section Type of `i18n-ally.parsers`
 */
export interface I18nAllyParsers {
  "typescript.tsNodePath": string,
  "typescript.compilerOptions": Record<string, unknown>,
  "extendFileExtensions": Record<string, unknown>,
}

/**
 * Section Type of `i18n-ally.parsers.typescript`
 */
export interface I18nAllyParsersTypescript {
  "tsNodePath": string,
  "compilerOptions": Record<string, unknown>,
}

/**
 * Section Type of `i18n-ally.review`
 */
export interface I18nAllyReview {
  /**
   * %config.review_enabled%
   */
  "enabled": boolean,
  /**
   * %config.review_gutters%
   */
  "gutters": boolean,
  /**
   * %config.review_username%
   */
  "user.name"?: (string | undefined),
  /**
   * %config.review_email%
   */
  "user.email"?: (string | undefined),
  /**
   * %config.review_remove_on_resolved%
   */
  "removeCommentOnResolved": boolean,
}

/**
 * Section Type of `i18n-ally.review.user`
 */
export interface I18nAllyReviewUser {
  /**
   * %config.review_username%
   */
  "name"?: (string | undefined),
  /**
   * %config.review_email%
   */
  "email"?: (string | undefined),
}

/**
 * Section Type of `i18n-ally.editor`
 */
export interface I18nAllyEditor {
  /**
   * %config.editor_prefer_editor%
   */
  "preferEditor": boolean,
}

/**
 * Section Type of `i18n-ally.extract`
 */
export interface I18nAllyExtract {
  /**
   * %config.keygen_strategy%
   */
  "keygenStrategy": ("slug" | "random" | "empty" | "source"),
  /**
   * %config.keygen_style%
   */
  "keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  /**
   * %config.key_prefix%
   */
  "keyPrefix": string,
  /**
   * %config.key_max_length%
   */
  "keyMaxLength": (number | null),
  /**
   * %config.target_picking_strategy%
   */
  "targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "parsers.html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "parsers.babel": Record<string, unknown>,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   */
  "autoDetect": boolean,
  /**
   * Strings to be ignored on hard-coded strings detection
   */
  "ignored"?: (string[] | undefined),
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   */
  "ignoredByFiles": Record<string, unknown>,
}

/**
 * Section Type of `i18n-ally.extract.parsers`
 */
export interface I18nAllyExtractParsers {
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "html": Record<string, unknown>,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   */
  "babel": Record<string, unknown>,
}
const i18nAllyConfig = {

  "i18n-ally": {
    /**
     * %config.disabled%
     */
    "disabled": false,
    /**
     * %config.auto_detection%
     */
    "autoDetection": true,
    /**
     * %config.locales_paths%
     */
    "localesPaths": undefined,
    /**
     * %config.encoding%
     */
    "encoding": "utf-8",
    /**
     * %config.source_language%
     */
    "sourceLanguage": undefined,
    /**
     * %config.display_language%
     */
    "displayLanguage": undefined,
    /**
     * %config.ignored_locales%
     */
    "ignoredLocales": undefined,
    /**
     * %config.keystyle%
     */
    "keystyle": undefined,
    /**
     * %config.dir_structure%
     */
    "dirStructure": undefined,
    /**
     * %config.annotations%
     */
    "annotations": true,
    /**
     * %config.annotation_in_place%
     */
    "annotationInPlace": true,
    /**
     * %config.annotation_max_length%
     */
    "annotationMaxLength": 40,
    /**
     * %config.annotation_delimiter%
     */
    "annotationDelimiter": "·",
    /**
     * %config.include_subfolders%
     */
    "includeSubfolders": true,
    /**
     * %config.full_reload_on_changed%
     */
    "fullReloadOnChanged": false,
    /**
     * %config.show_flags%
     */
    "showFlags": true,
    /**
     * %config.enabled_frameworks%
     */
    "enabledFrameworks": undefined,
    /**
     * %config.enabled_parsers%
     */
    "enabledParsers": undefined,
    /**
     * %config.keys_in_use%
     */
    "keysInUse": undefined,
    /**
     * %config.sort_keys%
     */
    "sortKeys": false,
    /**
     * %config.sort_compare%
     */
    "sortCompare": "binary",
    /**
     * %config.sort_locale%
     */
    "sortLocale": undefined,
    /**
     * %config.preferred_delimiter%
     */
    "preferredDelimiter": "-",
    /**
     * %config.readonly%
     */
    "readonly": false,
    /**
     * %config.keep_fulfill%
     */
    "keepFulfilled": false,
    /**
     * %config.locale_country_map%
     */
    "localeCountryMap": {},
    /**
     * %config.indent%
     */
    "indent": 2,
    /**
     * %config.disable_path_parsing%
     */
    "disablePathParsing": false,
    /**
     * %config.tab_style%
     */
    "tabStyle": "space",
    /**
     * %config.namespace%
     */
    "namespace": undefined,
    /**
     * %config.path_matcher%
     */
    "pathMatcher": undefined,
    /**
     * %config.language_tag_system%
     */
    "languageTagSystem": "bcp47",
    /**
     * %config.ignore_files%
     */
    "ignoreFiles": undefined,
    "theme.annotation": "rgba(153, 153, 153, .8)",
    "theme.annotationMissing": "rgba(153, 153, 153, .3)",
    "theme.annotationBorder": "rgba(153, 153, 153, .2)",
    "theme.annotationMissingBorder": "rgba(153, 153, 153, .2)",
    /**
     * %config.regex_key%
     */
    "regex.key": undefined,
    /**
     * %config.regex_usage_match%
     */
    "regex.usageMatch": undefined,
    /**
     * %config.regex_usage_match_append%
     */
    "regex.usageMatchAppend": undefined,
    /**
     * %config.refactor_templates%
     */
    "refactor.templates": undefined,
    /**
     * %config.translate_save_as_candidates%
     */
    "translate.saveAsCandidates": false,
    /**
     * %config.translate.fallbackToKey%
     */
    "translate.fallbackToKey": false,
    /**
     * %config.translate.engines%
     */
    "translate.engines": ["google"],
    /**
     * %config.translate.parallels%
     */
    "translate.parallels": 5,
    /**
     * %config.prompt_translating_source%
     */
    "translate.promptSource": false,
    /**
     * %config.translate_override_existing%
     */
    "translate.overrideExisting": false,
    /**
     * %config.google_api_key%
     */
    "translate.google.apiKey": null,
    /**
     * %config.deepl_api_key%
     */
    "translate.deepl.apiKey": null,
    /**
     * %config.baidu_appid%
     */
    "translate.baidu.appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "translate.baidu.apiSecret": null,
    /**
     * %config.deepl_log%
     */
    "translate.deepl.enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "translate.deepl.useFreeApiEntry": false,
    /**
     * %config.libretranslate_api_root%
     */
    "translate.libre.apiRoot": "http://localhost:5000",
    /**
     * %config.openai_api_key%
     */
    "translate.openai.apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "translate.openai.apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "translate.openai.apiModel": "gpt-3.5-turbo",
    /**
     * %config.usage.scanning_ignore%
     */
    "usage.scanningIgnore": undefined,
    /**
     * %config.derived_keys%
     */
    "usage.derivedKeyRules": null,
    "frameworks.ruby-rails.scopeRoot": "app/views",
    "parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "parsers.typescript.compilerOptions": {},
    "parsers.extendFileExtensions": {},
    /**
     * %config.review_enabled%
     */
    "review.enabled": true,
    /**
     * %config.review_gutters%
     */
    "review.gutters": true,
    /**
     * %config.review_username%
     */
    "review.user.name": undefined,
    /**
     * %config.review_email%
     */
    "review.user.email": undefined,
    /**
     * %config.review_remove_on_resolved%
     */
    "review.removeCommentOnResolved": false,
    /**
     * %config.editor_prefer_editor%
     */
    "editor.preferEditor": false,
    /**
     * %config.keygen_strategy%
     */
    "extract.keygenStrategy": "slug",
    /**
     * %config.keygen_style%
     */
    "extract.keygenStyle": "default",
    /**
     * %config.key_prefix%
     */
    "extract.keyPrefix": "",
    /**
     * %config.key_max_length%
     */
    "extract.keyMaxLength": null,
    /**
     * %config.target_picking_strategy%
     */
    "extract.targetPickingStrategy": "none",
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.babel": {},
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "extract.autoDetect": false,
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "extract.ignored": undefined,
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "extract.ignoredByFiles": {},
    "parserOptions": undefined,
    /**
     * %config.default_namespace%
     */
    "defaultNamespace": undefined,
  } satisfies I18nAlly,


  "i18n-ally.theme": {
    "annotation": "rgba(153, 153, 153, .8)",
    "annotationMissing": "rgba(153, 153, 153, .3)",
    "annotationBorder": "rgba(153, 153, 153, .2)",
    "annotationMissingBorder": "rgba(153, 153, 153, .2)",
  } satisfies I18nAllyTheme,


  "i18n-ally.regex": {
    /**
     * %config.regex_key%
     */
    "key": undefined,
    /**
     * %config.regex_usage_match%
     */
    "usageMatch": undefined,
    /**
     * %config.regex_usage_match_append%
     */
    "usageMatchAppend": undefined,
  } satisfies I18nAllyRegex,


  "i18n-ally.refactor": {
    /**
     * %config.refactor_templates%
     */
    "templates": undefined,
  } satisfies I18nAllyRefactor,


  "i18n-ally.translate": {
    /**
     * %config.translate_save_as_candidates%
     */
    "saveAsCandidates": false,
    /**
     * %config.translate.fallbackToKey%
     */
    "fallbackToKey": false,
    /**
     * %config.translate.engines%
     */
    "engines": ["google"],
    /**
     * %config.translate.parallels%
     */
    "parallels": 5,
    /**
     * %config.prompt_translating_source%
     */
    "promptSource": false,
    /**
     * %config.translate_override_existing%
     */
    "overrideExisting": false,
    /**
     * %config.google_api_key%
     */
    "google.apiKey": null,
    /**
     * %config.deepl_api_key%
     */
    "deepl.apiKey": null,
    /**
     * %config.baidu_appid%
     */
    "baidu.appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "baidu.apiSecret": null,
    /**
     * %config.deepl_log%
     */
    "deepl.enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "deepl.useFreeApiEntry": false,
    /**
     * %config.libretranslate_api_root%
     */
    "libre.apiRoot": "http://localhost:5000",
    /**
     * %config.openai_api_key%
     */
    "openai.apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "openai.apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "openai.apiModel": "gpt-3.5-turbo",
  } satisfies I18nAllyTranslate,


  "i18n-ally.translate.google": {
    /**
     * %config.google_api_key%
     */
    "apiKey": null,
  } satisfies I18nAllyTranslateGoogle,


  "i18n-ally.translate.deepl": {
    /**
     * %config.deepl_api_key%
     */
    "apiKey": null,
    /**
     * %config.deepl_log%
     */
    "enableLog": false,
    /**
     * %config.deepl_use_free_api_entry%
     */
    "useFreeApiEntry": false,
  } satisfies I18nAllyTranslateDeepl,


  "i18n-ally.translate.baidu": {
    /**
     * %config.baidu_appid%
     */
    "appid": null,
    /**
     * %config.baidu_app_secret%
     */
    "apiSecret": null,
  } satisfies I18nAllyTranslateBaidu,


  "i18n-ally.translate.libre": {
    /**
     * %config.libretranslate_api_root%
     */
    "apiRoot": "http://localhost:5000",
  } satisfies I18nAllyTranslateLibre,


  "i18n-ally.translate.openai": {
    /**
     * %config.openai_api_key%
     */
    "apiKey": null,
    /**
     * %config.openai_api_root%
     */
    "apiRoot": "https://api.openai.com",
    /**
     * %config.openai_api_model%
     */
    "apiModel": "gpt-3.5-turbo",
  } satisfies I18nAllyTranslateOpenai,


  "i18n-ally.usage": {
    /**
     * %config.usage.scanning_ignore%
     */
    "scanningIgnore": undefined,
    /**
     * %config.derived_keys%
     */
    "derivedKeyRules": null,
  } satisfies I18nAllyUsage,


  "i18n-ally.frameworks": {
    "ruby-rails.scopeRoot": "app/views",
  } satisfies I18nAllyFrameworks,


  "i18n-ally.frameworks.ruby-rails": {
    "scopeRoot": "app/views",
  } satisfies I18nAllyFrameworksRubyRails,


  "i18n-ally.parsers": {
    "typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "typescript.compilerOptions": {},
    "extendFileExtensions": {},
  } satisfies I18nAllyParsers,


  "i18n-ally.parsers.typescript": {
    "tsNodePath": "node_modules/ts-node/dist/bin.js",
    "compilerOptions": {},
  } satisfies I18nAllyParsersTypescript,


  "i18n-ally.review": {
    /**
     * %config.review_enabled%
     */
    "enabled": true,
    /**
     * %config.review_gutters%
     */
    "gutters": true,
    /**
     * %config.review_username%
     */
    "user.name": undefined,
    /**
     * %config.review_email%
     */
    "user.email": undefined,
    /**
     * %config.review_remove_on_resolved%
     */
    "removeCommentOnResolved": false,
  } satisfies I18nAllyReview,


  "i18n-ally.review.user": {
    /**
     * %config.review_username%
     */
    "name": undefined,
    /**
     * %config.review_email%
     */
    "email": undefined,
  } satisfies I18nAllyReviewUser,


  "i18n-ally.editor": {
    /**
     * %config.editor_prefer_editor%
     */
    "preferEditor": false,
  } satisfies I18nAllyEditor,


  "i18n-ally.extract": {
    /**
     * %config.keygen_strategy%
     */
    "keygenStrategy": "slug",
    /**
     * %config.keygen_style%
     */
    "keygenStyle": "default",
    /**
     * %config.key_prefix%
     */
    "keyPrefix": "",
    /**
     * %config.key_max_length%
     */
    "keyMaxLength": null,
    /**
     * %config.target_picking_strategy%
     */
    "targetPickingStrategy": "none",
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.babel": {},
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "autoDetect": false,
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "ignored": undefined,
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "ignoredByFiles": {},
  } satisfies I18nAllyExtract,


  "i18n-ally.extract.parsers": {
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "html": {},
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "babel": {},
  } satisfies I18nAllyExtractParsers,

}
export type ConfigKey = "i18n-ally" | "i18n-ally.theme" | "i18n-ally.regex" | "i18n-ally.refactor" | "i18n-ally.translate" | "i18n-ally.translate.google" | "i18n-ally.translate.deepl" | "i18n-ally.translate.baidu" | "i18n-ally.translate.libre" | "i18n-ally.translate.openai" | "i18n-ally.usage" | "i18n-ally.frameworks" | "i18n-ally.frameworks.ruby-rails" | "i18n-ally.parsers" | "i18n-ally.parsers.typescript" | "i18n-ally.review" | "i18n-ally.review.user" | "i18n-ally.editor" | "i18n-ally.extract" | "i18n-ally.extract.parsers"

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof i18nAllyConfig[K]>(section, i18nAllyConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof i18nAllyConfig[K]>(section, i18nAllyConfig[section])
}
    
/**
 * ConfigObject of `i18n-ally`
 * @example
 * const configValue = configObjectI18nAlly.disabled //get value 
 * configObjectI18nAlly.disabled = true // set value
 * configObjectI18nAlly.$update("disabled", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAlly = useConfigObject("i18n-ally")
/**
 * ToConfigRefs of `i18n-ally`
 * @example
 * const configValue:boolean =configI18nAlly.disabled.value //get value 
 * configI18nAlly.disabled.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAlly.disabled.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAlly = useConfig("i18n-ally")
/**
 * ConfigObject of `i18n-ally.theme`
 * @example
 * const configValue = configObjectI18nAllyTheme.annotation //get value 
 * configObjectI18nAllyTheme.annotation = true // set value
 * configObjectI18nAllyTheme.$update("annotation", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTheme = useConfigObject("i18n-ally.theme")
/**
 * ToConfigRefs of `i18n-ally.theme`
 * @example
 * const configValue:string =configI18nAllyTheme.annotation.value //get value 
 * configI18nAllyTheme.annotation.value = "rgba(153, 153, 153, .8)" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTheme.annotation.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTheme = useConfig("i18n-ally.theme")
/**
 * ConfigObject of `i18n-ally.regex`
 * @example
 * const configValue = configObjectI18nAllyRegex.key //get value 
 * configObjectI18nAllyRegex.key = true // set value
 * configObjectI18nAllyRegex.$update("key", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyRegex = useConfigObject("i18n-ally.regex")
/**
 * ToConfigRefs of `i18n-ally.regex`
 * @example
 * const configValue:string =configI18nAllyRegex.key.value //get value 
 * configI18nAllyRegex.key.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyRegex.key.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyRegex = useConfig("i18n-ally.regex")
/**
 * ConfigObject of `i18n-ally.refactor`
 * @example
 * const configValue = configObjectI18nAllyRefactor.templates //get value 
 * configObjectI18nAllyRefactor.templates = true // set value
 * configObjectI18nAllyRefactor.$update("templates", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyRefactor = useConfigObject("i18n-ally.refactor")
/**
 * ToConfigRefs of `i18n-ally.refactor`
 * @example
 * const configValue:array =configI18nAllyRefactor.templates.value //get value 
 * configI18nAllyRefactor.templates.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyRefactor.templates.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyRefactor = useConfig("i18n-ally.refactor")
/**
 * ConfigObject of `i18n-ally.translate`
 * @example
 * const configValue = configObjectI18nAllyTranslate.saveAsCandidates //get value 
 * configObjectI18nAllyTranslate.saveAsCandidates = true // set value
 * configObjectI18nAllyTranslate.$update("saveAsCandidates", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslate = useConfigObject("i18n-ally.translate")
/**
 * ToConfigRefs of `i18n-ally.translate`
 * @example
 * const configValue:boolean =configI18nAllyTranslate.saveAsCandidates.value //get value 
 * configI18nAllyTranslate.saveAsCandidates.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslate.saveAsCandidates.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslate = useConfig("i18n-ally.translate")
/**
 * ConfigObject of `i18n-ally.translate.google`
 * @example
 * const configValue = configObjectI18nAllyTranslateGoogle.apiKey //get value 
 * configObjectI18nAllyTranslateGoogle.apiKey = true // set value
 * configObjectI18nAllyTranslateGoogle.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslateGoogle = useConfigObject("i18n-ally.translate.google")
/**
 * ToConfigRefs of `i18n-ally.translate.google`
 * @example
 * const configValue:string =configI18nAllyTranslateGoogle.apiKey.value //get value 
 * configI18nAllyTranslateGoogle.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslateGoogle.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslateGoogle = useConfig("i18n-ally.translate.google")
/**
 * ConfigObject of `i18n-ally.translate.deepl`
 * @example
 * const configValue = configObjectI18nAllyTranslateDeepl.apiKey //get value 
 * configObjectI18nAllyTranslateDeepl.apiKey = true // set value
 * configObjectI18nAllyTranslateDeepl.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslateDeepl = useConfigObject("i18n-ally.translate.deepl")
/**
 * ToConfigRefs of `i18n-ally.translate.deepl`
 * @example
 * const configValue:string =configI18nAllyTranslateDeepl.apiKey.value //get value 
 * configI18nAllyTranslateDeepl.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslateDeepl.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslateDeepl = useConfig("i18n-ally.translate.deepl")
/**
 * ConfigObject of `i18n-ally.translate.baidu`
 * @example
 * const configValue = configObjectI18nAllyTranslateBaidu.appid //get value 
 * configObjectI18nAllyTranslateBaidu.appid = true // set value
 * configObjectI18nAllyTranslateBaidu.$update("appid", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslateBaidu = useConfigObject("i18n-ally.translate.baidu")
/**
 * ToConfigRefs of `i18n-ally.translate.baidu`
 * @example
 * const configValue:string =configI18nAllyTranslateBaidu.appid.value //get value 
 * configI18nAllyTranslateBaidu.appid.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslateBaidu.appid.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslateBaidu = useConfig("i18n-ally.translate.baidu")
/**
 * ConfigObject of `i18n-ally.translate.libre`
 * @example
 * const configValue = configObjectI18nAllyTranslateLibre.apiRoot //get value 
 * configObjectI18nAllyTranslateLibre.apiRoot = true // set value
 * configObjectI18nAllyTranslateLibre.$update("apiRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslateLibre = useConfigObject("i18n-ally.translate.libre")
/**
 * ToConfigRefs of `i18n-ally.translate.libre`
 * @example
 * const configValue:string =configI18nAllyTranslateLibre.apiRoot.value //get value 
 * configI18nAllyTranslateLibre.apiRoot.value = "http://localhost:5000" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslateLibre.apiRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslateLibre = useConfig("i18n-ally.translate.libre")
/**
 * ConfigObject of `i18n-ally.translate.openai`
 * @example
 * const configValue = configObjectI18nAllyTranslateOpenai.apiKey //get value 
 * configObjectI18nAllyTranslateOpenai.apiKey = true // set value
 * configObjectI18nAllyTranslateOpenai.$update("apiKey", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyTranslateOpenai = useConfigObject("i18n-ally.translate.openai")
/**
 * ToConfigRefs of `i18n-ally.translate.openai`
 * @example
 * const configValue:string =configI18nAllyTranslateOpenai.apiKey.value //get value 
 * configI18nAllyTranslateOpenai.apiKey.value = null // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyTranslateOpenai.apiKey.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyTranslateOpenai = useConfig("i18n-ally.translate.openai")
/**
 * ConfigObject of `i18n-ally.usage`
 * @example
 * const configValue = configObjectI18nAllyUsage.scanningIgnore //get value 
 * configObjectI18nAllyUsage.scanningIgnore = true // set value
 * configObjectI18nAllyUsage.$update("scanningIgnore", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyUsage = useConfigObject("i18n-ally.usage")
/**
 * ToConfigRefs of `i18n-ally.usage`
 * @example
 * const configValue:array =configI18nAllyUsage.scanningIgnore.value //get value 
 * configI18nAllyUsage.scanningIgnore.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyUsage.scanningIgnore.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyUsage = useConfig("i18n-ally.usage")
/**
 * ConfigObject of `i18n-ally.frameworks`
 * @example
 * const configValue = configObjectI18nAllyFrameworks.ruby-rails.scopeRoot //get value 
 * configObjectI18nAllyFrameworks.ruby-rails.scopeRoot = true // set value
 * configObjectI18nAllyFrameworks.$update("ruby-rails.scopeRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyFrameworks = useConfigObject("i18n-ally.frameworks")
/**
 * ToConfigRefs of `i18n-ally.frameworks`
 * @example
 * const configValue:string =configI18nAllyFrameworks.ruby-rails.scopeRoot.value //get value 
 * configI18nAllyFrameworks.ruby-rails.scopeRoot.value = "app/views" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyFrameworks.ruby-rails.scopeRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyFrameworks = useConfig("i18n-ally.frameworks")
/**
 * ConfigObject of `i18n-ally.frameworks.ruby-rails`
 * @example
 * const configValue = configObjectI18nAllyFrameworksRubyRails.scopeRoot //get value 
 * configObjectI18nAllyFrameworksRubyRails.scopeRoot = true // set value
 * configObjectI18nAllyFrameworksRubyRails.$update("scopeRoot", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyFrameworksRubyRails = useConfigObject("i18n-ally.frameworks.ruby-rails")
/**
 * ToConfigRefs of `i18n-ally.frameworks.ruby-rails`
 * @example
 * const configValue:string =configI18nAllyFrameworksRubyRails.scopeRoot.value //get value 
 * configI18nAllyFrameworksRubyRails.scopeRoot.value = "app/views" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyFrameworksRubyRails.scopeRoot.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyFrameworksRubyRails = useConfig("i18n-ally.frameworks.ruby-rails")
/**
 * ConfigObject of `i18n-ally.parsers`
 * @example
 * const configValue = configObjectI18nAllyParsers.typescript.tsNodePath //get value 
 * configObjectI18nAllyParsers.typescript.tsNodePath = true // set value
 * configObjectI18nAllyParsers.$update("typescript.tsNodePath", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyParsers = useConfigObject("i18n-ally.parsers")
/**
 * ToConfigRefs of `i18n-ally.parsers`
 * @example
 * const configValue:string =configI18nAllyParsers.typescript.tsNodePath.value //get value 
 * configI18nAllyParsers.typescript.tsNodePath.value = "node_modules/ts-node/dist/bin.js" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyParsers.typescript.tsNodePath.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyParsers = useConfig("i18n-ally.parsers")
/**
 * ConfigObject of `i18n-ally.parsers.typescript`
 * @example
 * const configValue = configObjectI18nAllyParsersTypescript.tsNodePath //get value 
 * configObjectI18nAllyParsersTypescript.tsNodePath = true // set value
 * configObjectI18nAllyParsersTypescript.$update("tsNodePath", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyParsersTypescript = useConfigObject("i18n-ally.parsers.typescript")
/**
 * ToConfigRefs of `i18n-ally.parsers.typescript`
 * @example
 * const configValue:string =configI18nAllyParsersTypescript.tsNodePath.value //get value 
 * configI18nAllyParsersTypescript.tsNodePath.value = "node_modules/ts-node/dist/bin.js" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyParsersTypescript.tsNodePath.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyParsersTypescript = useConfig("i18n-ally.parsers.typescript")
/**
 * ConfigObject of `i18n-ally.review`
 * @example
 * const configValue = configObjectI18nAllyReview.enabled //get value 
 * configObjectI18nAllyReview.enabled = true // set value
 * configObjectI18nAllyReview.$update("enabled", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyReview = useConfigObject("i18n-ally.review")
/**
 * ToConfigRefs of `i18n-ally.review`
 * @example
 * const configValue:boolean =configI18nAllyReview.enabled.value //get value 
 * configI18nAllyReview.enabled.value = true // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyReview.enabled.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyReview = useConfig("i18n-ally.review")
/**
 * ConfigObject of `i18n-ally.review.user`
 * @example
 * const configValue = configObjectI18nAllyReviewUser.name //get value 
 * configObjectI18nAllyReviewUser.name = true // set value
 * configObjectI18nAllyReviewUser.$update("name", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyReviewUser = useConfigObject("i18n-ally.review.user")
/**
 * ToConfigRefs of `i18n-ally.review.user`
 * @example
 * const configValue:string =configI18nAllyReviewUser.name.value //get value 
 * configI18nAllyReviewUser.name.value = undefined // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyReviewUser.name.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyReviewUser = useConfig("i18n-ally.review.user")
/**
 * ConfigObject of `i18n-ally.editor`
 * @example
 * const configValue = configObjectI18nAllyEditor.preferEditor //get value 
 * configObjectI18nAllyEditor.preferEditor = true // set value
 * configObjectI18nAllyEditor.$update("preferEditor", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyEditor = useConfigObject("i18n-ally.editor")
/**
 * ToConfigRefs of `i18n-ally.editor`
 * @example
 * const configValue:boolean =configI18nAllyEditor.preferEditor.value //get value 
 * configI18nAllyEditor.preferEditor.value = false // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyEditor.preferEditor.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyEditor = useConfig("i18n-ally.editor")
/**
 * ConfigObject of `i18n-ally.extract`
 * @example
 * const configValue = configObjectI18nAllyExtract.keygenStrategy //get value 
 * configObjectI18nAllyExtract.keygenStrategy = true // set value
 * configObjectI18nAllyExtract.$update("keygenStrategy", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyExtract = useConfigObject("i18n-ally.extract")
/**
 * ToConfigRefs of `i18n-ally.extract`
 * @example
 * const configValue:string =configI18nAllyExtract.keygenStrategy.value //get value 
 * configI18nAllyExtract.keygenStrategy.value = "slug" // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyExtract.keygenStrategy.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyExtract = useConfig("i18n-ally.extract")
/**
 * ConfigObject of `i18n-ally.extract.parsers`
 * @example
 * const configValue = configObjectI18nAllyExtractParsers.html //get value 
 * configObjectI18nAllyExtractParsers.html = true // set value
 * configObjectI18nAllyExtractParsers.$update("html", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectI18nAllyExtractParsers = useConfigObject("i18n-ally.extract.parsers")
/**
 * ToConfigRefs of `i18n-ally.extract.parsers`
 * @example
 * const configValue:object =configI18nAllyExtractParsers.html.value //get value 
 * configI18nAllyExtractParsers.html.value = {} // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configI18nAllyExtractParsers.html.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configI18nAllyExtractParsers = useConfig("i18n-ally.extract.parsers")
