/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, } from 'reactive-vscode';
export const publisher = "lokalise";
export const name = "i18n-ally";
export const version = "2.12.0";
export const displayName = "i18n Ally";
export const description = "üåç All in one i18n extension for VS Code";
export const extensionId = "lokalise.i18n-ally";
/**
 * Type union of all commands
 */
export type CommandKey = "i18n-ally.config-locales" | "i18n-ally.config-locales-auto" | "i18n-ally.config-display-language" | "i18n-ally.config-source-language" | "i18n-ally.set-display-language" | "i18n-ally.set-source-language" | "i18n-ally.copy-key" | "i18n-ally.translate-key" | "i18n-ally.edit-key" | "i18n-ally.open-key" | "i18n-ally.delete-key" | "i18n-ally.rename-key" | "i18n-ally.extract-text" | "i18n-ally.extract-hard-strings-batch" | "i18n-ally.detect_hard_strings" | "i18n-ally.open-url" | "i18n-ally.fulfill-keys" | "i18n-ally.refresh-usage" | "i18n-ally.support" | "i18n-ally.locale-visibility-show" | "i18n-ally.locale-visibility-hide" | "i18n-ally.new-key" | "i18n-ally.duplicate-key" | "i18n-ally.mark-key-as-in-use" | "i18n-ally.open-in-editor" | "i18n-ally.open-editor" | "i18n-ally.review.comment" | "i18n-ally.review.approve" | "i18n-ally.review.request-change" | "i18n-ally.review.edit" | "i18n-ally.review.resolve" | "i18n-ally.review.resolve-thread" | "i18n-ally.review.apply-translation" | "i18n-ally.review.apply-suggestion" | "i18n-ally.insert-key" | "i18n-ally.deepl-usage" | "i18n-ally.go-to-range" | "i18n-ally.go-to-next-usage" | "i18n-ally.go-to-prev-usage" | "i18n-ally.open-docs-hard-string" | "i18n-ally.extract-disable-auto-detect" | "i18n-ally.extract-enable-auto-detect";
/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commands = {
    /**
     * %command.config_locales%
     * @value `i18n-ally.config-locales`
     */
    configLocales: "i18n-ally.config-locales",
    /**
     * %command.config_locales_auto%
     * @value `i18n-ally.config-locales-auto`
     */
    configLocalesAuto: "i18n-ally.config-locales-auto",
    /**
     * %command.config_display_language%
     * @value `i18n-ally.config-display-language`
     */
    configDisplayLanguage: "i18n-ally.config-display-language",
    /**
     * %command.config_source_language%
     * @value `i18n-ally.config-source-language`
     */
    configSourceLanguage: "i18n-ally.config-source-language",
    /**
     * %command.set_display_language%
     * @value `i18n-ally.set-display-language`
     */
    setDisplayLanguage: "i18n-ally.set-display-language",
    /**
     * %command.set_source_language%
     * @value `i18n-ally.set-source-language`
     */
    setSourceLanguage: "i18n-ally.set-source-language",
    /**
     * %command.copy_key%
     * @value `i18n-ally.copy-key`
     */
    copyKey: "i18n-ally.copy-key",
    /**
     * %command.translate_key%
     * @value `i18n-ally.translate-key`
     */
    translateKey: "i18n-ally.translate-key",
    /**
     * %command.edit_key%
     * @value `i18n-ally.edit-key`
     */
    editKey: "i18n-ally.edit-key",
    /**
     * %command.open_key%
     * @value `i18n-ally.open-key`
     */
    openKey: "i18n-ally.open-key",
    /**
     * %command.delete_key%
     * @value `i18n-ally.delete-key`
     */
    deleteKey: "i18n-ally.delete-key",
    /**
     * %command.rename_key%
     * @value `i18n-ally.rename-key`
     */
    renameKey: "i18n-ally.rename-key",
    /**
     * %refactor.extract_text%
     * @value `i18n-ally.extract-text`
     */
    extractText: "i18n-ally.extract-text",
    /**
     * Extract all hard-coded strings (experimental)
     * @value `i18n-ally.extract-hard-strings-batch`
     */
    extractHardStringsBatch: "i18n-ally.extract-hard-strings-batch",
    /**
     * Detect hard-coded strings in current file (experimental)
     * @value `i18n-ally.detect_hard_strings`
     */
    detectHardStrings: "i18n-ally.detect_hard_strings",
    /**
     * %command.open_url%
     * @value `i18n-ally.open-url`
     */
    openUrl: "i18n-ally.open-url",
    /**
     * %command.fulfill_keys%
     * @value `i18n-ally.fulfill-keys`
     */
    fulfillKeys: "i18n-ally.fulfill-keys",
    /**
     * %command.refresh_usage%
     * @value `i18n-ally.refresh-usage`
     */
    refreshUsage: "i18n-ally.refresh-usage",
    /**
     * %feedback.support%
     * @value `i18n-ally.support`
     */
    support: "i18n-ally.support",
    /**
     * %command.locale_visibility_show%
     * @value `i18n-ally.locale-visibility-show`
     */
    localeVisibilityShow: "i18n-ally.locale-visibility-show",
    /**
     * %command.locale_visibility_hide%
     * @value `i18n-ally.locale-visibility-hide`
     */
    localeVisibilityHide: "i18n-ally.locale-visibility-hide",
    /**
     * %command.new_key%
     * @value `i18n-ally.new-key`
     */
    newKey: "i18n-ally.new-key",
    /**
     * %command.duplicate_key%
     * @value `i18n-ally.duplicate-key`
     */
    duplicateKey: "i18n-ally.duplicate-key",
    /**
     * %command.mark_key_as_in_use%
     * @value `i18n-ally.mark-key-as-in-use`
     */
    markKeyAsInUse: "i18n-ally.mark-key-as-in-use",
    /**
     * %command.open_in_editor%
     * @value `i18n-ally.open-in-editor`
     */
    openInEditor: "i18n-ally.open-in-editor",
    /**
     * %command.open_editor%
     * @value `i18n-ally.open-editor`
     */
    openEditor: "i18n-ally.open-editor",
    /**
     * %review.leave_comment%
     * @value `i18n-ally.review.comment`
     */
    comment: "i18n-ally.review.comment",
    /**
     * %review.approve%
     * @value `i18n-ally.review.approve`
     */
    approve: "i18n-ally.review.approve",
    /**
     * %review.request_change%
     * @value `i18n-ally.review.request-change`
     */
    requestChange: "i18n-ally.review.request-change",
    /**
     * %review.edit%
     * @value `i18n-ally.review.edit`
     */
    edit: "i18n-ally.review.edit",
    /**
     * %review.resolve%
     * @value `i18n-ally.review.resolve`
     */
    resolve: "i18n-ally.review.resolve",
    /**
     * %review.resolve_all%
     * @value `i18n-ally.review.resolve-thread`
     */
    resolveThread: "i18n-ally.review.resolve-thread",
    /**
     * %review.apply_translation_candidate%
     * @value `i18n-ally.review.apply-translation`
     */
    applyTranslation: "i18n-ally.review.apply-translation",
    /**
     * %review.apply_suggestion%
     * @value `i18n-ally.review.apply-suggestion`
     */
    applySuggestion: "i18n-ally.review.apply-suggestion",
    /**
     * %command.insert_key%
     * @value `i18n-ally.insert-key`
     */
    insertKey: "i18n-ally.insert-key",
    /**
     * %command.deepl_usage%
     * @value `i18n-ally.deepl-usage`
     */
    deeplUsage: "i18n-ally.deepl-usage",
    /**
     * %command.go_to_range%
     * @value `i18n-ally.go-to-range`
     */
    goToRange: "i18n-ally.go-to-range",
    /**
     * %command.go_to_next_usage%
     * @value `i18n-ally.go-to-next-usage`
     */
    goToNextUsage: "i18n-ally.go-to-next-usage",
    /**
     * %command.go_to_prev_usage%
     * @value `i18n-ally.go-to-prev-usage`
     */
    goToPrevUsage: "i18n-ally.go-to-prev-usage",
    /**
     * %command.show_docs%
     * @value `i18n-ally.open-docs-hard-string`
     */
    openDocsHardString: "i18n-ally.open-docs-hard-string",
    /**
     * %command.extract.disable-auto-detect%
     * @value `i18n-ally.extract-disable-auto-detect`
     */
    extractDisableAutoDetect: "i18n-ally.extract-disable-auto-detect",
    /**
     * %command.extract.enable-auto-detect%
     * @value `i18n-ally.extract-enable-auto-detect`
     */
    extractEnableAutoDetect: "i18n-ally.extract-enable-auto-detect",
} satisfies Record<string, CommandKey>;
/**
 * Register a command. See `vscode::commands.registerCommand`.
 */
export function useCommand(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
    return useReactiveCommand(commandFullKey, callback);
}
export function useCommands(commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void {
    return useReactiveCommands(commands);
}
export type LoggerNameType = typeof name | typeof displayName | typeof extensionId;
export function useLogger(loggerName: LoggerNameType = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) {
    return useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
}
export function useOutputChannel(outputName: LoggerNameType = displayName ?? name ?? extensionId) {
    return useReactiveOutputChannel(outputName);
}
/**
 * %command.config_locales%
 * @value `i18n-ally.config-locales` identifier of the command
 */
export function useCommandConfigLocales(callback: (...args: any[]) => any) {
    return useCommand(commands.configLocales, callback);
}
/**
 * %command.config_locales_auto%
 * @value `i18n-ally.config-locales-auto` identifier of the command
 */
export function useCommandConfigLocalesAuto(callback: (...args: any[]) => any) {
    return useCommand(commands.configLocalesAuto, callback);
}
/**
 * %command.config_display_language%
 * @value `i18n-ally.config-display-language` identifier of the command
 */
export function useCommandConfigDisplayLanguage(callback: (...args: any[]) => any) {
    return useCommand(commands.configDisplayLanguage, callback);
}
/**
 * %command.config_source_language%
 * @value `i18n-ally.config-source-language` identifier of the command
 */
export function useCommandConfigSourceLanguage(callback: (...args: any[]) => any) {
    return useCommand(commands.configSourceLanguage, callback);
}
/**
 * %command.set_display_language%
 * @value `i18n-ally.set-display-language` identifier of the command
 */
export function useCommandSetDisplayLanguage(callback: (...args: any[]) => any) {
    return useCommand(commands.setDisplayLanguage, callback);
}
/**
 * %command.set_source_language%
 * @value `i18n-ally.set-source-language` identifier of the command
 */
export function useCommandSetSourceLanguage(callback: (...args: any[]) => any) {
    return useCommand(commands.setSourceLanguage, callback);
}
/**
 * %command.copy_key%
 * @value `i18n-ally.copy-key` identifier of the command
 */
export function useCommandCopyKey(callback: (...args: any[]) => any) {
    return useCommand(commands.copyKey, callback);
}
/**
 * %command.translate_key%
 * @value `i18n-ally.translate-key` identifier of the command
 */
export function useCommandTranslateKey(callback: (...args: any[]) => any) {
    return useCommand(commands.translateKey, callback);
}
/**
 * %command.edit_key%
 * @value `i18n-ally.edit-key` identifier of the command
 */
export function useCommandEditKey(callback: (...args: any[]) => any) {
    return useCommand(commands.editKey, callback);
}
/**
 * %command.open_key%
 * @value `i18n-ally.open-key` identifier of the command
 */
export function useCommandOpenKey(callback: (...args: any[]) => any) {
    return useCommand(commands.openKey, callback);
}
/**
 * %command.delete_key%
 * @value `i18n-ally.delete-key` identifier of the command
 */
export function useCommandDeleteKey(callback: (...args: any[]) => any) {
    return useCommand(commands.deleteKey, callback);
}
/**
 * %command.rename_key%
 * @value `i18n-ally.rename-key` identifier of the command
 */
export function useCommandRenameKey(callback: (...args: any[]) => any) {
    return useCommand(commands.renameKey, callback);
}
/**
 * %refactor.extract_text%
 * @value `i18n-ally.extract-text` identifier of the command
 */
export function useCommandExtractText(callback: (...args: any[]) => any) {
    return useCommand(commands.extractText, callback);
}
/**
 * Extract all hard-coded strings (experimental)
 * @value `i18n-ally.extract-hard-strings-batch` identifier of the command
 */
export function useCommandExtractHardStringsBatch(callback: (...args: any[]) => any) {
    return useCommand(commands.extractHardStringsBatch, callback);
}
/**
 * Detect hard-coded strings in current file (experimental)
 * @value `i18n-ally.detect_hard_strings` identifier of the command
 */
export function useCommandDetectHardStrings(callback: (...args: any[]) => any) {
    return useCommand(commands.detectHardStrings, callback);
}
/**
 * %command.open_url%
 * @value `i18n-ally.open-url` identifier of the command
 */
export function useCommandOpenUrl(callback: (...args: any[]) => any) {
    return useCommand(commands.openUrl, callback);
}
/**
 * %command.fulfill_keys%
 * @value `i18n-ally.fulfill-keys` identifier of the command
 */
export function useCommandFulfillKeys(callback: (...args: any[]) => any) {
    return useCommand(commands.fulfillKeys, callback);
}
/**
 * %command.refresh_usage%
 * @value `i18n-ally.refresh-usage` identifier of the command
 */
export function useCommandRefreshUsage(callback: (...args: any[]) => any) {
    return useCommand(commands.refreshUsage, callback);
}
/**
 * %feedback.support%
 * @value `i18n-ally.support` identifier of the command
 */
export function useCommandSupport(callback: (...args: any[]) => any) {
    return useCommand(commands.support, callback);
}
/**
 * %command.locale_visibility_show%
 * @value `i18n-ally.locale-visibility-show` identifier of the command
 */
export function useCommandLocaleVisibilityShow(callback: (...args: any[]) => any) {
    return useCommand(commands.localeVisibilityShow, callback);
}
/**
 * %command.locale_visibility_hide%
 * @value `i18n-ally.locale-visibility-hide` identifier of the command
 */
export function useCommandLocaleVisibilityHide(callback: (...args: any[]) => any) {
    return useCommand(commands.localeVisibilityHide, callback);
}
/**
 * %command.new_key%
 * @value `i18n-ally.new-key` identifier of the command
 */
export function useCommandNewKey(callback: (...args: any[]) => any) {
    return useCommand(commands.newKey, callback);
}
/**
 * %command.duplicate_key%
 * @value `i18n-ally.duplicate-key` identifier of the command
 */
export function useCommandDuplicateKey(callback: (...args: any[]) => any) {
    return useCommand(commands.duplicateKey, callback);
}
/**
 * %command.mark_key_as_in_use%
 * @value `i18n-ally.mark-key-as-in-use` identifier of the command
 */
export function useCommandMarkKeyAsInUse(callback: (...args: any[]) => any) {
    return useCommand(commands.markKeyAsInUse, callback);
}
/**
 * %command.open_in_editor%
 * @value `i18n-ally.open-in-editor` identifier of the command
 */
export function useCommandOpenInEditor(callback: (...args: any[]) => any) {
    return useCommand(commands.openInEditor, callback);
}
/**
 * %command.open_editor%
 * @value `i18n-ally.open-editor` identifier of the command
 */
export function useCommandOpenEditor(callback: (...args: any[]) => any) {
    return useCommand(commands.openEditor, callback);
}
/**
 * %review.leave_comment%
 * @value `i18n-ally.review.comment` identifier of the command
 */
export function useCommandComment(callback: (...args: any[]) => any) {
    return useCommand(commands.comment, callback);
}
/**
 * %review.approve%
 * @value `i18n-ally.review.approve` identifier of the command
 */
export function useCommandApprove(callback: (...args: any[]) => any) {
    return useCommand(commands.approve, callback);
}
/**
 * %review.request_change%
 * @value `i18n-ally.review.request-change` identifier of the command
 */
export function useCommandRequestChange(callback: (...args: any[]) => any) {
    return useCommand(commands.requestChange, callback);
}
/**
 * %review.edit%
 * @value `i18n-ally.review.edit` identifier of the command
 */
export function useCommandEdit(callback: (...args: any[]) => any) {
    return useCommand(commands.edit, callback);
}
/**
 * %review.resolve%
 * @value `i18n-ally.review.resolve` identifier of the command
 */
export function useCommandResolve(callback: (...args: any[]) => any) {
    return useCommand(commands.resolve, callback);
}
/**
 * %review.resolve_all%
 * @value `i18n-ally.review.resolve-thread` identifier of the command
 */
export function useCommandResolveThread(callback: (...args: any[]) => any) {
    return useCommand(commands.resolveThread, callback);
}
/**
 * %review.apply_translation_candidate%
 * @value `i18n-ally.review.apply-translation` identifier of the command
 */
export function useCommandApplyTranslation(callback: (...args: any[]) => any) {
    return useCommand(commands.applyTranslation, callback);
}
/**
 * %review.apply_suggestion%
 * @value `i18n-ally.review.apply-suggestion` identifier of the command
 */
export function useCommandApplySuggestion(callback: (...args: any[]) => any) {
    return useCommand(commands.applySuggestion, callback);
}
/**
 * %command.insert_key%
 * @value `i18n-ally.insert-key` identifier of the command
 */
export function useCommandInsertKey(callback: (...args: any[]) => any) {
    return useCommand(commands.insertKey, callback);
}
/**
 * %command.deepl_usage%
 * @value `i18n-ally.deepl-usage` identifier of the command
 */
export function useCommandDeeplUsage(callback: (...args: any[]) => any) {
    return useCommand(commands.deeplUsage, callback);
}
/**
 * %command.go_to_range%
 * @value `i18n-ally.go-to-range` identifier of the command
 */
export function useCommandGoToRange(callback: (...args: any[]) => any) {
    return useCommand(commands.goToRange, callback);
}
/**
 * %command.go_to_next_usage%
 * @value `i18n-ally.go-to-next-usage` identifier of the command
 */
export function useCommandGoToNextUsage(callback: (...args: any[]) => any) {
    return useCommand(commands.goToNextUsage, callback);
}
/**
 * %command.go_to_prev_usage%
 * @value `i18n-ally.go-to-prev-usage` identifier of the command
 */
export function useCommandGoToPrevUsage(callback: (...args: any[]) => any) {
    return useCommand(commands.goToPrevUsage, callback);
}
/**
 * %command.show_docs%
 * @value `i18n-ally.open-docs-hard-string` identifier of the command
 */
export function useCommandOpenDocsHardString(callback: (...args: any[]) => any) {
    return useCommand(commands.openDocsHardString, callback);
}
/**
 * %command.extract.disable-auto-detect%
 * @value `i18n-ally.extract-disable-auto-detect` identifier of the command
 */
export function useCommandExtractDisableAutoDetect(callback: (...args: any[]) => any) {
    return useCommand(commands.extractDisableAutoDetect, callback);
}
/**
 * %command.extract.enable-auto-detect%
 * @value `i18n-ally.extract-enable-auto-detect` identifier of the command
 */
export function useCommandExtractEnableAutoDetect(callback: (...args: any[]) => any) {
    return useCommand(commands.extractEnableAutoDetect, callback);
}
/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = "i18n-ally.derivedKeyRules" | "i18n-ally.filenameMatchRegex" | "i18n-ally.fileNamespace" | "i18n-ally.keyMatchRegex" | "vue-i18n-ally.localesPaths" | "vue-i18n-ally.encoding" | "vue-i18n-ally.sourceLanguage" | "vue-i18n-ally.displayLanguage" | "vue-i18n-ally.ignoredLocales" | "vue-i18n-ally.keystyle" | "vue-i18n-ally.dirStructure" | "vue-i18n-ally.annotations" | "vue-i18n-ally.annotationMaxLength" | "vue-i18n-ally.annotationDelimiter" | "vue-i18n-ally.filenameMatchRegex" | "vue-i18n-ally.includeSubfolders" | "vue-i18n-ally.fullReloadOnChanged" | "vue-i18n-ally.sortKeys" | "vue-i18n-ally.preferredDelimiter" | "vue-i18n-ally.readonly";
/**
 * Section Type of `i18n-ally`
 */
export interface I18nAlly {
    /**
     * %config.disabled%
     */
    "disabled": boolean;
    /**
     * %config.auto_detection%
     */
    "autoDetection": boolean;
    /**
     * %config.locales_paths%
     */
    "localesPaths"?: (string | string[] | undefined);
    /**
     * %config.encoding%
     */
    "encoding": string;
    /**
     * %config.source_language%
     */
    "sourceLanguage"?: (string | undefined);
    /**
     * %config.display_language%
     */
    "displayLanguage"?: (string | undefined);
    /**
     * %config.ignored_locales%
     */
    "ignoredLocales"?: (unknown[] | undefined);
    /**
     * %config.keystyle%
     */
    "keystyle"?: ("auto" | "nested" | "flat" | undefined);
    /**
     * %config.dir_structure%
     */
    "dirStructure"?: ("auto" | "file" | "dir" | undefined);
    /**
     * %config.annotations%
     */
    "annotations": boolean;
    /**
     * %config.annotation_in_place%
     */
    "annotationInPlace": boolean;
    /**
     * %config.annotation_max_length%
     */
    "annotationMaxLength": number;
    /**
     * %config.annotation_delimiter%
     */
    "annotationDelimiter": string;
    /**
     * %config.include_subfolders%
     */
    "includeSubfolders": boolean;
    /**
     * %config.full_reload_on_changed%
     */
    "fullReloadOnChanged": boolean;
    /**
     * %config.show_flags%
     */
    "showFlags": boolean;
    /**
     * %config.enabled_frameworks%
     */
    "enabledFrameworks"?: (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined);
    /**
     * %config.enabled_parsers%
     */
    "enabledParsers"?: (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined);
    /**
     * %config.keys_in_use%
     */
    "keysInUse"?: (string[] | undefined);
    /**
     * %config.sort_keys%
     */
    "sortKeys": boolean;
    /**
     * %config.sort_compare%
     */
    "sortCompare": ("binary" | "locale");
    /**
     * %config.sort_locale%
     */
    "sortLocale"?: (string | undefined);
    /**
     * %config.preferred_delimiter%
     */
    "preferredDelimiter": string;
    /**
     * %config.readonly%
     */
    "readonly": boolean;
    /**
     * %config.keep_fulfill%
     */
    "keepFulfilled": boolean;
    /**
     * %config.locale_country_map%
     */
    "localeCountryMap": Record<string, unknown>;
    /**
     * %config.indent%
     */
    "indent": number;
    /**
     * %config.disable_path_parsing%
     */
    "disablePathParsing": boolean;
    /**
     * %config.tab_style%
     */
    "tabStyle": ("space" | "tab");
    /**
     * %config.namespace%
     */
    "namespace"?: (boolean | undefined);
    /**
     * %config.path_matcher%
     */
    "pathMatcher"?: (string | undefined);
    /**
     * %config.language_tag_system%
     */
    "languageTagSystem": ("bcp47" | "legacy" | "none");
    /**
     * %config.ignore_files%
     */
    "ignoreFiles"?: (string[] | undefined);
    "theme.annotation": string;
    "theme.annotationMissing": string;
    "theme.annotationBorder": string;
    "theme.annotationMissingBorder": string;
    /**
     * %config.regex_key%
     */
    "regex.key"?: (string | undefined);
    /**
     * %config.regex_usage_match%
     */
    "regex.usageMatch"?: (string[] | undefined);
    /**
     * %config.regex_usage_match_append%
     */
    "regex.usageMatchAppend"?: (string[] | undefined);
    /**
     * %config.refactor_templates%
     */
    "refactor.templates"?: ({
        /**
     *
     * @default `undefined`
     */
        'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text");
        /**
         *
         * @default `undefined`
         */
        'template'?: string;
        /**
         *
         * @default `undefined`
         */
        'templates'?: string[];
        /**
         *
         * @default `undefined`
         */
        'include'?: string[];
        /**
         *
         * @default `undefined`
         */
        'exclude'?: string[];
    }[] | undefined);
    /**
     * %config.translate_save_as_candidates%
     */
    "translate.saveAsCandidates": boolean;
    /**
     * %config.translate.fallbackToKey%
     */
    "translate.fallbackToKey": boolean;
    /**
     * %config.translate.engines%
     */
    "translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[];
    /**
     * %config.translate.parallels%
     */
    "translate.parallels": number;
    /**
     * %config.prompt_translating_source%
     */
    "translate.promptSource": boolean;
    /**
     * %config.translate_override_existing%
     */
    "translate.overrideExisting": boolean;
    /**
     * %config.google_api_key%
     */
    "translate.google.apiKey": (string | null);
    /**
     * %config.deepl_api_key%
     */
    "translate.deepl.apiKey": (string | null);
    /**
     * %config.baidu_appid%
     */
    "translate.baidu.appid": (string | null);
    /**
     * %config.baidu_app_secret%
     */
    "translate.baidu.apiSecret": (string | null);
    /**
     * %config.deepl_log%
     */
    "translate.deepl.enableLog": boolean;
    /**
     * %config.deepl_use_free_api_entry%
     */
    "translate.deepl.useFreeApiEntry": boolean;
    /**
     * %config.libretranslate_api_root%
     */
    "translate.libre.apiRoot": string;
    /**
     * %config.openai_api_key%
     */
    "translate.openai.apiKey": (string | null);
    /**
     * %config.openai_api_root%
     */
    "translate.openai.apiRoot": string;
    /**
     * %config.openai_api_model%
     */
    "translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613");
    /**
     * %config.usage.scanning_ignore%
     */
    "usage.scanningIgnore"?: (string[] | undefined);
    /**
     * %config.derived_keys%
     */
    "usage.derivedKeyRules": (string[] | null);
    "frameworks.ruby-rails.scopeRoot": string;
    "parsers.typescript.tsNodePath": string;
    "parsers.typescript.compilerOptions": Record<string, unknown>;
    "parsers.extendFileExtensions": Record<string, unknown>;
    /**
     * %config.review_enabled%
     */
    "review.enabled": boolean;
    /**
     * %config.review_gutters%
     */
    "review.gutters": boolean;
    /**
     * %config.review_username%
     */
    "review.user.name"?: (string | undefined);
    /**
     * %config.review_email%
     */
    "review.user.email"?: (string | undefined);
    /**
     * %config.review_remove_on_resolved%
     */
    "review.removeCommentOnResolved": boolean;
    /**
     * %config.editor_prefer_editor%
     */
    "editor.preferEditor": boolean;
    /**
     * %config.keygen_strategy%
     */
    "extract.keygenStrategy": ("slug" | "random" | "empty" | "source");
    /**
     * %config.keygen_style%
     */
    "extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS");
    /**
     * %config.key_prefix%
     */
    "extract.keyPrefix": string;
    /**
     * %config.key_max_length%
     */
    "extract.keyMaxLength": (number | null);
    /**
     * %config.target_picking_strategy%
     */
    "extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous");
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.html": Record<string, unknown>;
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "extract.parsers.babel": Record<string, unknown>;
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "extract.autoDetect": boolean;
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "extract.ignored"?: (string[] | undefined);
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "extract.ignoredByFiles": Record<string, unknown>;
    "parserOptions"?: Record<string, unknown>;
    /**
     * %config.default_namespace%
     */
    "defaultNamespace"?: (string | undefined);
}
/**
 * Section Type of `i18n-ally.theme`
 */
export interface Theme {
    "annotation": string;
    "annotationMissing": string;
    "annotationBorder": string;
    "annotationMissingBorder": string;
}
/**
 * Section Type of `i18n-ally.regex`
 */
export interface Regex {
    /**
     * %config.regex_key%
     */
    "key"?: (string | undefined);
    /**
     * %config.regex_usage_match%
     */
    "usageMatch"?: (string[] | undefined);
    /**
     * %config.regex_usage_match_append%
     */
    "usageMatchAppend"?: (string[] | undefined);
}
/**
 * Section Type of `i18n-ally.refactor`
 */
export interface Refactor {
    /**
     * %config.refactor_templates%
     */
    "templates"?: ({
        /**
     *
     * @default `undefined`
     */
        'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text");
        /**
         *
         * @default `undefined`
         */
        'template'?: string;
        /**
         *
         * @default `undefined`
         */
        'templates'?: string[];
        /**
         *
         * @default `undefined`
         */
        'include'?: string[];
        /**
         *
         * @default `undefined`
         */
        'exclude'?: string[];
    }[] | undefined);
}
/**
 * Section Type of `i18n-ally.translate`
 */
export interface Translate {
    /**
     * %config.translate_save_as_candidates%
     */
    "saveAsCandidates": boolean;
    /**
     * %config.translate.fallbackToKey%
     */
    "fallbackToKey": boolean;
    /**
     * %config.translate.engines%
     */
    "engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[];
    /**
     * %config.translate.parallels%
     */
    "parallels": number;
    /**
     * %config.prompt_translating_source%
     */
    "promptSource": boolean;
    /**
     * %config.translate_override_existing%
     */
    "overrideExisting": boolean;
    /**
     * %config.google_api_key%
     */
    "google.apiKey": (string | null);
    /**
     * %config.deepl_api_key%
     */
    "deepl.apiKey": (string | null);
    /**
     * %config.baidu_appid%
     */
    "baidu.appid": (string | null);
    /**
     * %config.baidu_app_secret%
     */
    "baidu.apiSecret": (string | null);
    /**
     * %config.deepl_log%
     */
    "deepl.enableLog": boolean;
    /**
     * %config.deepl_use_free_api_entry%
     */
    "deepl.useFreeApiEntry": boolean;
    /**
     * %config.libretranslate_api_root%
     */
    "libre.apiRoot": string;
    /**
     * %config.openai_api_key%
     */
    "openai.apiKey": (string | null);
    /**
     * %config.openai_api_root%
     */
    "openai.apiRoot": string;
    /**
     * %config.openai_api_model%
     */
    "openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613");
}
/**
 * Section Type of `i18n-ally.translate.google`
 */
export interface Google {
    /**
     * %config.google_api_key%
     */
    "apiKey": (string | null);
}
/**
 * Section Type of `i18n-ally.translate.deepl`
 */
export interface Deepl {
    /**
     * %config.deepl_api_key%
     */
    "apiKey": (string | null);
    /**
     * %config.deepl_log%
     */
    "enableLog": boolean;
    /**
     * %config.deepl_use_free_api_entry%
     */
    "useFreeApiEntry": boolean;
}
/**
 * Section Type of `i18n-ally.translate.baidu`
 */
export interface Baidu {
    /**
     * %config.baidu_appid%
     */
    "appid": (string | null);
    /**
     * %config.baidu_app_secret%
     */
    "apiSecret": (string | null);
}
/**
 * Section Type of `i18n-ally.translate.libre`
 */
export interface Libre {
    /**
     * %config.libretranslate_api_root%
     */
    "apiRoot": string;
}
/**
 * Section Type of `i18n-ally.translate.openai`
 */
export interface Openai {
    /**
     * %config.openai_api_key%
     */
    "apiKey": (string | null);
    /**
     * %config.openai_api_root%
     */
    "apiRoot": string;
    /**
     * %config.openai_api_model%
     */
    "apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613");
}
/**
 * Section Type of `i18n-ally.usage`
 */
export interface Usage {
    /**
     * %config.usage.scanning_ignore%
     */
    "scanningIgnore"?: (string[] | undefined);
    /**
     * %config.derived_keys%
     */
    "derivedKeyRules": (string[] | null);
}
/**
 * Section Type of `i18n-ally.frameworks`
 */
export interface Frameworks {
    "ruby-rails.scopeRoot": string;
}
/**
 * Section Type of `i18n-ally.frameworks.ruby-rails`
 */
export interface RubyRails {
    "scopeRoot": string;
}
/**
 * Section Type of `i18n-ally.parsers`
 */
export interface Parsers {
    "typescript.tsNodePath": string;
    "typescript.compilerOptions": Record<string, unknown>;
    "extendFileExtensions": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.parsers.typescript`
 */
export interface Typescript {
    "tsNodePath": string;
    "compilerOptions": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.review`
 */
export interface Review {
    /**
     * %config.review_enabled%
     */
    "enabled": boolean;
    /**
     * %config.review_gutters%
     */
    "gutters": boolean;
    /**
     * %config.review_username%
     */
    "user.name"?: (string | undefined);
    /**
     * %config.review_email%
     */
    "user.email"?: (string | undefined);
    /**
     * %config.review_remove_on_resolved%
     */
    "removeCommentOnResolved": boolean;
}
/**
 * Section Type of `i18n-ally.review.user`
 */
export interface User {
    /**
     * %config.review_username%
     */
    "name"?: (string | undefined);
    /**
     * %config.review_email%
     */
    "email"?: (string | undefined);
}
/**
 * Section Type of `i18n-ally.editor`
 */
export interface Editor {
    /**
     * %config.editor_prefer_editor%
     */
    "preferEditor": boolean;
}
/**
 * Section Type of `i18n-ally.extract`
 */
export interface Extract {
    /**
     * %config.keygen_strategy%
     */
    "keygenStrategy": ("slug" | "random" | "empty" | "source");
    /**
     * %config.keygen_style%
     */
    "keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS");
    /**
     * %config.key_prefix%
     */
    "keyPrefix": string;
    /**
     * %config.key_max_length%
     */
    "keyMaxLength": (number | null);
    /**
     * %config.target_picking_strategy%
     */
    "targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous");
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.html": Record<string, unknown>;
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "parsers.babel": Record<string, unknown>;
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "autoDetect": boolean;
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "ignored"?: (string[] | undefined);
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "ignoredByFiles": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.extract.parsers`
 */
export interface ExtractParsers {
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "html": Record<string, unknown>;
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "babel": Record<string, unknown>;
}
const i18nAllyConfig = {
    /**
     * Section defaults of `i18n-ally`
     */
    "i18n-ally": {
        /**
         * %config.disabled%
         */
        "disabled": false,
        /**
         * %config.auto_detection%
         */
        "autoDetection": true,
        /**
         * %config.locales_paths%
         */
        "localesPaths": undefined,
        /**
         * %config.encoding%
         */
        "encoding": "utf-8",
        /**
         * %config.source_language%
         */
        "sourceLanguage": undefined,
        /**
         * %config.display_language%
         */
        "displayLanguage": undefined,
        /**
         * %config.ignored_locales%
         */
        "ignoredLocales": undefined,
        /**
         * %config.keystyle%
         */
        "keystyle": undefined,
        /**
         * %config.dir_structure%
         */
        "dirStructure": undefined,
        /**
         * %config.annotations%
         */
        "annotations": true,
        /**
         * %config.annotation_in_place%
         */
        "annotationInPlace": true,
        /**
         * %config.annotation_max_length%
         */
        "annotationMaxLength": 40,
        /**
         * %config.annotation_delimiter%
         */
        "annotationDelimiter": "¬∑",
        /**
         * %config.include_subfolders%
         */
        "includeSubfolders": true,
        /**
         * %config.full_reload_on_changed%
         */
        "fullReloadOnChanged": false,
        /**
         * %config.show_flags%
         */
        "showFlags": true,
        /**
         * %config.enabled_frameworks%
         */
        "enabledFrameworks": undefined,
        /**
         * %config.enabled_parsers%
         */
        "enabledParsers": undefined,
        /**
         * %config.keys_in_use%
         */
        "keysInUse": undefined,
        /**
         * %config.sort_keys%
         */
        "sortKeys": false,
        /**
         * %config.sort_compare%
         */
        "sortCompare": "binary",
        /**
         * %config.sort_locale%
         */
        "sortLocale": undefined,
        /**
         * %config.preferred_delimiter%
         */
        "preferredDelimiter": "-",
        /**
         * %config.readonly%
         */
        "readonly": false,
        /**
         * %config.keep_fulfill%
         */
        "keepFulfilled": false,
        /**
         * %config.locale_country_map%
         */
        "localeCountryMap": {},
        /**
         * %config.indent%
         */
        "indent": 2,
        /**
         * %config.disable_path_parsing%
         */
        "disablePathParsing": false,
        /**
         * %config.tab_style%
         */
        "tabStyle": "space",
        /**
         * %config.namespace%
         */
        "namespace": undefined,
        /**
         * %config.path_matcher%
         */
        "pathMatcher": undefined,
        /**
         * %config.language_tag_system%
         */
        "languageTagSystem": "bcp47",
        /**
         * %config.ignore_files%
         */
        "ignoreFiles": undefined,
        "theme.annotation": "rgba(153, 153, 153, .8)",
        "theme.annotationMissing": "rgba(153, 153, 153, .3)",
        "theme.annotationBorder": "rgba(153, 153, 153, .2)",
        "theme.annotationMissingBorder": "rgba(153, 153, 153, .2)",
        /**
         * %config.regex_key%
         */
        "regex.key": undefined,
        /**
         * %config.regex_usage_match%
         */
        "regex.usageMatch": undefined,
        /**
         * %config.regex_usage_match_append%
         */
        "regex.usageMatchAppend": undefined,
        /**
         * %config.refactor_templates%
         */
        "refactor.templates": undefined,
        /**
         * %config.translate_save_as_candidates%
         */
        "translate.saveAsCandidates": false,
        /**
         * %config.translate.fallbackToKey%
         */
        "translate.fallbackToKey": false,
        /**
         * %config.translate.engines%
         */
        "translate.engines": ["google"],
        /**
         * %config.translate.parallels%
         */
        "translate.parallels": 5,
        /**
         * %config.prompt_translating_source%
         */
        "translate.promptSource": false,
        /**
         * %config.translate_override_existing%
         */
        "translate.overrideExisting": false,
        /**
         * %config.google_api_key%
         */
        "translate.google.apiKey": null,
        /**
         * %config.deepl_api_key%
         */
        "translate.deepl.apiKey": null,
        /**
         * %config.baidu_appid%
         */
        "translate.baidu.appid": null,
        /**
         * %config.baidu_app_secret%
         */
        "translate.baidu.apiSecret": null,
        /**
         * %config.deepl_log%
         */
        "translate.deepl.enableLog": false,
        /**
         * %config.deepl_use_free_api_entry%
         */
        "translate.deepl.useFreeApiEntry": false,
        /**
         * %config.libretranslate_api_root%
         */
        "translate.libre.apiRoot": "http://localhost:5000",
        /**
         * %config.openai_api_key%
         */
        "translate.openai.apiKey": null,
        /**
         * %config.openai_api_root%
         */
        "translate.openai.apiRoot": "https://api.openai.com",
        /**
         * %config.openai_api_model%
         */
        "translate.openai.apiModel": "gpt-3.5-turbo",
        /**
         * %config.usage.scanning_ignore%
         */
        "usage.scanningIgnore": undefined,
        /**
         * %config.derived_keys%
         */
        "usage.derivedKeyRules": null,
        "frameworks.ruby-rails.scopeRoot": "app/views",
        "parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
        "parsers.typescript.compilerOptions": {},
        "parsers.extendFileExtensions": {},
        /**
         * %config.review_enabled%
         */
        "review.enabled": true,
        /**
         * %config.review_gutters%
         */
        "review.gutters": true,
        /**
         * %config.review_username%
         */
        "review.user.name": undefined,
        /**
         * %config.review_email%
         */
        "review.user.email": undefined,
        /**
         * %config.review_remove_on_resolved%
         */
        "review.removeCommentOnResolved": false,
        /**
         * %config.editor_prefer_editor%
         */
        "editor.preferEditor": false,
        /**
         * %config.keygen_strategy%
         */
        "extract.keygenStrategy": "slug",
        /**
         * %config.keygen_style%
         */
        "extract.keygenStyle": "default",
        /**
         * %config.key_prefix%
         */
        "extract.keyPrefix": "",
        /**
         * %config.key_max_length%
         */
        "extract.keyMaxLength": null,
        /**
         * %config.target_picking_strategy%
         */
        "extract.targetPickingStrategy": "none",
        /**
         * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "extract.parsers.html": {},
        /**
         * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "extract.parsers.babel": {},
        /**
         * Enables hard-coded strings detection automatically whenever opening a supported file
         */
        "extract.autoDetect": false,
        /**
         * Strings to be ignored on hard-coded strings detection
         */
        "extract.ignored": undefined,
        /**
         * Strings to be ignored on hard-coded strings detection, by files
         */
        "extract.ignoredByFiles": {},
        "parserOptions": undefined,
        /**
         * %config.default_namespace%
         */
        "defaultNamespace": undefined,
    } satisfies I18nAlly as I18nAlly,
    /**
     * Section defaults of `i18n-ally.theme`
     */
    "i18n-ally.theme": {
        "annotation": "rgba(153, 153, 153, .8)",
        "annotationMissing": "rgba(153, 153, 153, .3)",
        "annotationBorder": "rgba(153, 153, 153, .2)",
        "annotationMissingBorder": "rgba(153, 153, 153, .2)",
    } satisfies Theme as Theme,
    /**
     * Section defaults of `i18n-ally.regex`
     */
    "i18n-ally.regex": {
        /**
         * %config.regex_key%
         */
        "key": undefined,
        /**
         * %config.regex_usage_match%
         */
        "usageMatch": undefined,
        /**
         * %config.regex_usage_match_append%
         */
        "usageMatchAppend": undefined,
    } satisfies Regex as Regex,
    /**
     * Section defaults of `i18n-ally.refactor`
     */
    "i18n-ally.refactor": {
        /**
         * %config.refactor_templates%
         */
        "templates": undefined,
    } satisfies Refactor as Refactor,
    /**
     * Section defaults of `i18n-ally.translate`
     */
    "i18n-ally.translate": {
        /**
         * %config.translate_save_as_candidates%
         */
        "saveAsCandidates": false,
        /**
         * %config.translate.fallbackToKey%
         */
        "fallbackToKey": false,
        /**
         * %config.translate.engines%
         */
        "engines": ["google"],
        /**
         * %config.translate.parallels%
         */
        "parallels": 5,
        /**
         * %config.prompt_translating_source%
         */
        "promptSource": false,
        /**
         * %config.translate_override_existing%
         */
        "overrideExisting": false,
        /**
         * %config.google_api_key%
         */
        "google.apiKey": null,
        /**
         * %config.deepl_api_key%
         */
        "deepl.apiKey": null,
        /**
         * %config.baidu_appid%
         */
        "baidu.appid": null,
        /**
         * %config.baidu_app_secret%
         */
        "baidu.apiSecret": null,
        /**
         * %config.deepl_log%
         */
        "deepl.enableLog": false,
        /**
         * %config.deepl_use_free_api_entry%
         */
        "deepl.useFreeApiEntry": false,
        /**
         * %config.libretranslate_api_root%
         */
        "libre.apiRoot": "http://localhost:5000",
        /**
         * %config.openai_api_key%
         */
        "openai.apiKey": null,
        /**
         * %config.openai_api_root%
         */
        "openai.apiRoot": "https://api.openai.com",
        /**
         * %config.openai_api_model%
         */
        "openai.apiModel": "gpt-3.5-turbo",
    } satisfies Translate as Translate,
    /**
     * Section defaults of `i18n-ally.translate.google`
     */
    "i18n-ally.translate.google": {
        /**
         * %config.google_api_key%
         */
        "apiKey": null,
    } satisfies Google as Google,
    /**
     * Section defaults of `i18n-ally.translate.deepl`
     */
    "i18n-ally.translate.deepl": {
        /**
         * %config.deepl_api_key%
         */
        "apiKey": null,
        /**
         * %config.deepl_log%
         */
        "enableLog": false,
        /**
         * %config.deepl_use_free_api_entry%
         */
        "useFreeApiEntry": false,
    } satisfies Deepl as Deepl,
    /**
     * Section defaults of `i18n-ally.translate.baidu`
     */
    "i18n-ally.translate.baidu": {
        /**
         * %config.baidu_appid%
         */
        "appid": null,
        /**
         * %config.baidu_app_secret%
         */
        "apiSecret": null,
    } satisfies Baidu as Baidu,
    /**
     * Section defaults of `i18n-ally.translate.libre`
     */
    "i18n-ally.translate.libre": {
        /**
         * %config.libretranslate_api_root%
         */
        "apiRoot": "http://localhost:5000",
    } satisfies Libre as Libre,
    /**
     * Section defaults of `i18n-ally.translate.openai`
     */
    "i18n-ally.translate.openai": {
        /**
         * %config.openai_api_key%
         */
        "apiKey": null,
        /**
         * %config.openai_api_root%
         */
        "apiRoot": "https://api.openai.com",
        /**
         * %config.openai_api_model%
         */
        "apiModel": "gpt-3.5-turbo",
    } satisfies Openai as Openai,
    /**
     * Section defaults of `i18n-ally.usage`
     */
    "i18n-ally.usage": {
        /**
         * %config.usage.scanning_ignore%
         */
        "scanningIgnore": undefined,
        /**
         * %config.derived_keys%
         */
        "derivedKeyRules": null,
    } satisfies Usage as Usage,
    /**
     * Section defaults of `i18n-ally.frameworks`
     */
    "i18n-ally.frameworks": {
        "ruby-rails.scopeRoot": "app/views",
    } satisfies Frameworks as Frameworks,
    /**
     * Section defaults of `i18n-ally.frameworks.ruby-rails`
     */
    "i18n-ally.frameworks.ruby-rails": {
        "scopeRoot": "app/views",
    } satisfies RubyRails as RubyRails,
    /**
     * Section defaults of `i18n-ally.parsers`
     */
    "i18n-ally.parsers": {
        "typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
        "typescript.compilerOptions": {},
        "extendFileExtensions": {},
    } satisfies Parsers as Parsers,
    /**
     * Section defaults of `i18n-ally.parsers.typescript`
     */
    "i18n-ally.parsers.typescript": {
        "tsNodePath": "node_modules/ts-node/dist/bin.js",
        "compilerOptions": {},
    } satisfies Typescript as Typescript,
    /**
     * Section defaults of `i18n-ally.review`
     */
    "i18n-ally.review": {
        /**
         * %config.review_enabled%
         */
        "enabled": true,
        /**
         * %config.review_gutters%
         */
        "gutters": true,
        /**
         * %config.review_username%
         */
        "user.name": undefined,
        /**
         * %config.review_email%
         */
        "user.email": undefined,
        /**
         * %config.review_remove_on_resolved%
         */
        "removeCommentOnResolved": false,
    } satisfies Review as Review,
    /**
     * Section defaults of `i18n-ally.review.user`
     */
    "i18n-ally.review.user": {
        /**
         * %config.review_username%
         */
        "name": undefined,
        /**
         * %config.review_email%
         */
        "email": undefined,
    } satisfies User as User,
    /**
     * Section defaults of `i18n-ally.editor`
     */
    "i18n-ally.editor": {
        /**
         * %config.editor_prefer_editor%
         */
        "preferEditor": false,
    } satisfies Editor as Editor,
    /**
     * Section defaults of `i18n-ally.extract`
     */
    "i18n-ally.extract": {
        /**
         * %config.keygen_strategy%
         */
        "keygenStrategy": "slug",
        /**
         * %config.keygen_style%
         */
        "keygenStyle": "default",
        /**
         * %config.key_prefix%
         */
        "keyPrefix": "",
        /**
         * %config.key_max_length%
         */
        "keyMaxLength": null,
        /**
         * %config.target_picking_strategy%
         */
        "targetPickingStrategy": "none",
        /**
         * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "parsers.html": {},
        /**
         * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "parsers.babel": {},
        /**
         * Enables hard-coded strings detection automatically whenever opening a supported file
         */
        "autoDetect": false,
        /**
         * Strings to be ignored on hard-coded strings detection
         */
        "ignored": undefined,
        /**
         * Strings to be ignored on hard-coded strings detection, by files
         */
        "ignoredByFiles": {},
    } satisfies Extract as Extract,
    /**
     * Section defaults of `i18n-ally.extract.parsers`
     */
    "i18n-ally.extract.parsers": {
        /**
         * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "html": {},
        /**
         * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "babel": {},
    } satisfies ExtractParsers as ExtractParsers,
};
export type ConfigKey = "i18n-ally" | "i18n-ally.theme" | "i18n-ally.regex" | "i18n-ally.refactor" | "i18n-ally.translate" | "i18n-ally.translate.google" | "i18n-ally.translate.deepl" | "i18n-ally.translate.baidu" | "i18n-ally.translate.libre" | "i18n-ally.translate.openai" | "i18n-ally.usage" | "i18n-ally.frameworks" | "i18n-ally.frameworks.ruby-rails" | "i18n-ally.parsers" | "i18n-ally.parsers.typescript" | "i18n-ally.review" | "i18n-ally.review.user" | "i18n-ally.editor" | "i18n-ally.extract" | "i18n-ally.extract.parsers";
export function useConfig<K extends ConfigKey>(section: K) {
    return defineConfigs<typeof i18nAllyConfig[K]>(section, i18nAllyConfig[section]);
}
export function useConfigObject<K extends ConfigKey>(section: K) {
    return defineConfigObject<typeof i18nAllyConfig[K]>(section, i18nAllyConfig[section]);
}
/**
 * ConfigObject of `i18n-ally`
 * @example
 * const oldVal = configObjectI18nAlly.disabled //get value
 * configObjectI18nAlly.$update("disabled", oldVal) //update value
 */
export const configObjectI18nAlly = useConfigObject("i18n-ally");
/**
 * ToConfigRefs of `i18n-ally`
 * @example
 * const oldVal:boolean =configI18nAlly.disabled.value //get value
 * configI18nAlly.disabled.update(oldVal) //update value
 */
export const configI18nAlly = useConfig("i18n-ally");
/**
 * ConfigObject of `i18n-ally.theme`
 * @example
 * const oldVal = configObjectTheme.annotation //get value
 * configObjectTheme.$update("annotation", oldVal) //update value
 */
export const configObjectTheme = useConfigObject("i18n-ally.theme");
/**
 * ToConfigRefs of `i18n-ally.theme`
 * @example
 * const oldVal:string =configTheme.annotation.value //get value
 * configTheme.annotation.update(oldVal) //update value
 */
export const configTheme = useConfig("i18n-ally.theme");
/**
 * ConfigObject of `i18n-ally.regex`
 * @example
 * const oldVal = configObjectRegex.key //get value
 * configObjectRegex.$update("key", oldVal) //update value
 */
export const configObjectRegex = useConfigObject("i18n-ally.regex");
/**
 * ToConfigRefs of `i18n-ally.regex`
 * @example
 * const oldVal:string =configRegex.key.value //get value
 * configRegex.key.update(oldVal) //update value
 */
export const configRegex = useConfig("i18n-ally.regex");
/**
 * ConfigObject of `i18n-ally.refactor`
 * @example
 * const oldVal = configObjectRefactor.templates //get value
 * configObjectRefactor.$update("templates", oldVal) //update value
 */
export const configObjectRefactor = useConfigObject("i18n-ally.refactor");
/**
 * ToConfigRefs of `i18n-ally.refactor`
 * @example
 * const oldVal:array =configRefactor.templates.value //get value
 * configRefactor.templates.update(oldVal) //update value
 */
export const configRefactor = useConfig("i18n-ally.refactor");
/**
 * ConfigObject of `i18n-ally.translate`
 * @example
 * const oldVal = configObjectTranslate.saveAsCandidates //get value
 * configObjectTranslate.$update("saveAsCandidates", oldVal) //update value
 */
export const configObjectTranslate = useConfigObject("i18n-ally.translate");
/**
 * ToConfigRefs of `i18n-ally.translate`
 * @example
 * const oldVal:boolean =configTranslate.saveAsCandidates.value //get value
 * configTranslate.saveAsCandidates.update(oldVal) //update value
 */
export const configTranslate = useConfig("i18n-ally.translate");
/**
 * ConfigObject of `i18n-ally.translate.google`
 * @example
 * const oldVal = configObjectGoogle.apiKey //get value
 * configObjectGoogle.$update("apiKey", oldVal) //update value
 */
export const configObjectGoogle = useConfigObject("i18n-ally.translate.google");
/**
 * ToConfigRefs of `i18n-ally.translate.google`
 * @example
 * const oldVal:string =configGoogle.apiKey.value //get value
 * configGoogle.apiKey.update(oldVal) //update value
 */
export const configGoogle = useConfig("i18n-ally.translate.google");
/**
 * ConfigObject of `i18n-ally.translate.deepl`
 * @example
 * const oldVal = configObjectDeepl.apiKey //get value
 * configObjectDeepl.$update("apiKey", oldVal) //update value
 */
export const configObjectDeepl = useConfigObject("i18n-ally.translate.deepl");
/**
 * ToConfigRefs of `i18n-ally.translate.deepl`
 * @example
 * const oldVal:string =configDeepl.apiKey.value //get value
 * configDeepl.apiKey.update(oldVal) //update value
 */
export const configDeepl = useConfig("i18n-ally.translate.deepl");
/**
 * ConfigObject of `i18n-ally.translate.baidu`
 * @example
 * const oldVal = configObjectBaidu.appid //get value
 * configObjectBaidu.$update("appid", oldVal) //update value
 */
export const configObjectBaidu = useConfigObject("i18n-ally.translate.baidu");
/**
 * ToConfigRefs of `i18n-ally.translate.baidu`
 * @example
 * const oldVal:string =configBaidu.appid.value //get value
 * configBaidu.appid.update(oldVal) //update value
 */
export const configBaidu = useConfig("i18n-ally.translate.baidu");
/**
 * ConfigObject of `i18n-ally.translate.libre`
 * @example
 * const oldVal = configObjectLibre.apiRoot //get value
 * configObjectLibre.$update("apiRoot", oldVal) //update value
 */
export const configObjectLibre = useConfigObject("i18n-ally.translate.libre");
/**
 * ToConfigRefs of `i18n-ally.translate.libre`
 * @example
 * const oldVal:string =configLibre.apiRoot.value //get value
 * configLibre.apiRoot.update(oldVal) //update value
 */
export const configLibre = useConfig("i18n-ally.translate.libre");
/**
 * ConfigObject of `i18n-ally.translate.openai`
 * @example
 * const oldVal = configObjectOpenai.apiKey //get value
 * configObjectOpenai.$update("apiKey", oldVal) //update value
 */
export const configObjectOpenai = useConfigObject("i18n-ally.translate.openai");
/**
 * ToConfigRefs of `i18n-ally.translate.openai`
 * @example
 * const oldVal:string =configOpenai.apiKey.value //get value
 * configOpenai.apiKey.update(oldVal) //update value
 */
export const configOpenai = useConfig("i18n-ally.translate.openai");
/**
 * ConfigObject of `i18n-ally.usage`
 * @example
 * const oldVal = configObjectUsage.scanningIgnore //get value
 * configObjectUsage.$update("scanningIgnore", oldVal) //update value
 */
export const configObjectUsage = useConfigObject("i18n-ally.usage");
/**
 * ToConfigRefs of `i18n-ally.usage`
 * @example
 * const oldVal:array =configUsage.scanningIgnore.value //get value
 * configUsage.scanningIgnore.update(oldVal) //update value
 */
export const configUsage = useConfig("i18n-ally.usage");
/**
 * ConfigObject of `i18n-ally.frameworks`
 * @example
 * const oldVal = configObjectFrameworks.ruby-rails.scopeRoot //get value
 * configObjectFrameworks.$update("ruby-rails.scopeRoot", oldVal) //update value
 */
export const configObjectFrameworks = useConfigObject("i18n-ally.frameworks");
/**
 * ToConfigRefs of `i18n-ally.frameworks`
 * @example
 * const oldVal:string =configFrameworks.ruby-rails.scopeRoot.value //get value
 * configFrameworks.ruby-rails.scopeRoot.update(oldVal) //update value
 */
export const configFrameworks = useConfig("i18n-ally.frameworks");
/**
 * ConfigObject of `i18n-ally.frameworks.ruby-rails`
 * @example
 * const oldVal = configObjectRubyRails.scopeRoot //get value
 * configObjectRubyRails.$update("scopeRoot", oldVal) //update value
 */
export const configObjectRubyRails = useConfigObject("i18n-ally.frameworks.ruby-rails");
/**
 * ToConfigRefs of `i18n-ally.frameworks.ruby-rails`
 * @example
 * const oldVal:string =configRubyRails.scopeRoot.value //get value
 * configRubyRails.scopeRoot.update(oldVal) //update value
 */
export const configRubyRails = useConfig("i18n-ally.frameworks.ruby-rails");
/**
 * ConfigObject of `i18n-ally.parsers`
 * @example
 * const oldVal = configObjectParsers.typescript.tsNodePath //get value
 * configObjectParsers.$update("typescript.tsNodePath", oldVal) //update value
 */
export const configObjectParsers = useConfigObject("i18n-ally.parsers");
/**
 * ToConfigRefs of `i18n-ally.parsers`
 * @example
 * const oldVal:string =configParsers.typescript.tsNodePath.value //get value
 * configParsers.typescript.tsNodePath.update(oldVal) //update value
 */
export const configParsers = useConfig("i18n-ally.parsers");
/**
 * ConfigObject of `i18n-ally.parsers.typescript`
 * @example
 * const oldVal = configObjectTypescript.tsNodePath //get value
 * configObjectTypescript.$update("tsNodePath", oldVal) //update value
 */
export const configObjectTypescript = useConfigObject("i18n-ally.parsers.typescript");
/**
 * ToConfigRefs of `i18n-ally.parsers.typescript`
 * @example
 * const oldVal:string =configTypescript.tsNodePath.value //get value
 * configTypescript.tsNodePath.update(oldVal) //update value
 */
export const configTypescript = useConfig("i18n-ally.parsers.typescript");
/**
 * ConfigObject of `i18n-ally.review`
 * @example
 * const oldVal = configObjectReview.enabled //get value
 * configObjectReview.$update("enabled", oldVal) //update value
 */
export const configObjectReview = useConfigObject("i18n-ally.review");
/**
 * ToConfigRefs of `i18n-ally.review`
 * @example
 * const oldVal:boolean =configReview.enabled.value //get value
 * configReview.enabled.update(oldVal) //update value
 */
export const configReview = useConfig("i18n-ally.review");
/**
 * ConfigObject of `i18n-ally.review.user`
 * @example
 * const oldVal = configObjectUser.name //get value
 * configObjectUser.$update("name", oldVal) //update value
 */
export const configObjectUser = useConfigObject("i18n-ally.review.user");
/**
 * ToConfigRefs of `i18n-ally.review.user`
 * @example
 * const oldVal:string =configUser.name.value //get value
 * configUser.name.update(oldVal) //update value
 */
export const configUser = useConfig("i18n-ally.review.user");
/**
 * ConfigObject of `i18n-ally.editor`
 * @example
 * const oldVal = configObjectEditor.preferEditor //get value
 * configObjectEditor.$update("preferEditor", oldVal) //update value
 */
export const configObjectEditor = useConfigObject("i18n-ally.editor");
/**
 * ToConfigRefs of `i18n-ally.editor`
 * @example
 * const oldVal:boolean =configEditor.preferEditor.value //get value
 * configEditor.preferEditor.update(oldVal) //update value
 */
export const configEditor = useConfig("i18n-ally.editor");
/**
 * ConfigObject of `i18n-ally.extract`
 * @example
 * const oldVal = configObjectExtract.keygenStrategy //get value
 * configObjectExtract.$update("keygenStrategy", oldVal) //update value
 */
export const configObjectExtract = useConfigObject("i18n-ally.extract");
/**
 * ToConfigRefs of `i18n-ally.extract`
 * @example
 * const oldVal:string =configExtract.keygenStrategy.value //get value
 * configExtract.keygenStrategy.update(oldVal) //update value
 */
export const configExtract = useConfig("i18n-ally.extract");
/**
 * ConfigObject of `i18n-ally.extract.parsers`
 * @example
 * const oldVal = configObjectExtractParsers.html //get value
 * configObjectExtractParsers.$update("html", oldVal) //update value
 */
export const configObjectExtractParsers = useConfigObject("i18n-ally.extract.parsers");
/**
 * ToConfigRefs of `i18n-ally.extract.parsers`
 * @example
 * const oldVal:object =configExtractParsers.html.value //get value
 * configExtractParsers.html.update(oldVal) //update value
 */
export const configExtractParsers = useConfig("i18n-ally.extract.parsers");
