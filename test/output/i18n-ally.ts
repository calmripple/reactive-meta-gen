/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, useStatusBarItem, useDisposable, } from 'reactive-vscode';
import type { Nullable, UseStatusBarItemOptions } from 'reactive-vscode';
export const publisher = "lokalise";
export const name = "i18n-ally";
export const version = "2.12.0";
export const displayName = "i18n Ally";
export const description = "üåç All in one i18n extension for VS Code";
export const extensionId = "lokalise.i18n-ally";
type Cache<T> = {
    exp: number | null;
    value: T;
    dispose: () => void;
};
const memoize = <TArgs extends any[], TResult>(cache: Map<string, Cache<TResult>>, func: (...args: TArgs) => TResult, keyFunc: ((...args: TArgs) => string) | null, ttl: number | null) => {
    return function callWithMemo(...args: any): TResult {
        const key = keyFunc ? keyFunc(...args) : JSON.stringify({ args });
        const existing = cache.get(key);
        if (existing !== undefined) {
            if (!existing.exp)
                return existing.value;
            if (existing.exp > new Date().getTime()) {
                return existing.value;
            }
        }
        const result = func(...args);
        const target: Cache<TResult> = {
            exp: ttl ? new Date().getTime() + ttl : null,
            value: result,
            dispose: () => {
                cache.delete(key);
            }
        };
        cache.set(key, target);
        useDisposable(target);
        return result;
    };
};
/**
 * Creates a memoized function. The returned function
 * will only execute the source function when no value
 * has previously been computed. If a ttl (milliseconds)
 * is given previously computed values will be checked
 * for expiration before being returned.
 */
export const memo = <TArgs extends any[], TResult>(func: (...args: TArgs) => TResult, options: {
    key?: (...args: TArgs) => string;
    ttl?: number;
} = {}) => {
    return memoize(new Map<string, Cache<TResult>>(), func, options.key ?? null, options.ttl ?? null) as (...args: TArgs) => TResult;
};
export interface CommandsInformation {
    /**
     *  category string by which the command is grouped in the UI
     */
    category?: string;
    /**
     * identifier of the command to execute
     */
    command: string;
    /**
     * title which the command is represented in the UI
     */
    title: string;
    enablement?: string;
    icon?: string;
    shortTitle?: string;
    commandShorthandName?: string;
}
/**
 * Type union of all commands
 */
export type Command = "i18n-ally.config-locales" | "i18n-ally.config-locales-auto" | "i18n-ally.config-display-language" | "i18n-ally.config-source-language" | "i18n-ally.set-display-language" | "i18n-ally.set-source-language" | "i18n-ally.copy-key" | "i18n-ally.translate-key" | "i18n-ally.edit-key" | "i18n-ally.open-key" | "i18n-ally.delete-key" | "i18n-ally.rename-key" | "i18n-ally.extract-text" | "i18n-ally.extract-hard-strings-batch" | "i18n-ally.detect_hard_strings" | "i18n-ally.open-url" | "i18n-ally.fulfill-keys" | "i18n-ally.refresh-usage" | "i18n-ally.support" | "i18n-ally.locale-visibility-show" | "i18n-ally.locale-visibility-hide" | "i18n-ally.new-key" | "i18n-ally.duplicate-key" | "i18n-ally.mark-key-as-in-use" | "i18n-ally.open-in-editor" | "i18n-ally.open-editor" | "i18n-ally.review.comment" | "i18n-ally.review.approve" | "i18n-ally.review.request-change" | "i18n-ally.review.edit" | "i18n-ally.review.resolve" | "i18n-ally.review.resolve-thread" | "i18n-ally.review.apply-translation" | "i18n-ally.review.apply-suggestion" | "i18n-ally.insert-key" | "i18n-ally.deepl-usage" | "i18n-ally.go-to-range" | "i18n-ally.go-to-next-usage" | "i18n-ally.go-to-prev-usage" | "i18n-ally.open-docs-hard-string" | "i18n-ally.extract-disable-auto-detect" | "i18n-ally.extract-enable-auto-detect";
/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commands = {
    /**
     * %command.config_locales%
     * @command `i18n-ally.config-locales`
     */
    configLocales: "i18n-ally.config-locales",
    /**
     * %command.config_locales_auto%
     * @command `i18n-ally.config-locales-auto`
     */
    configLocalesAuto: "i18n-ally.config-locales-auto",
    /**
     * %command.config_display_language%
     * @command `i18n-ally.config-display-language`
     */
    configDisplayLanguage: "i18n-ally.config-display-language",
    /**
     * %command.config_source_language%
     * @command `i18n-ally.config-source-language`
     */
    configSourceLanguage: "i18n-ally.config-source-language",
    /**
     * %command.set_display_language%
     * @command `i18n-ally.set-display-language`
     */
    setDisplayLanguage: "i18n-ally.set-display-language",
    /**
     * %command.set_source_language%
     * @command `i18n-ally.set-source-language`
     */
    setSourceLanguage: "i18n-ally.set-source-language",
    /**
     * %command.copy_key%
     * @command `i18n-ally.copy-key`
     */
    copyKey: "i18n-ally.copy-key",
    /**
     * %command.translate_key%
     * @command `i18n-ally.translate-key`
     */
    translateKey: "i18n-ally.translate-key",
    /**
     * %command.edit_key%
     * @command `i18n-ally.edit-key`
     */
    editKey: "i18n-ally.edit-key",
    /**
     * %command.open_key%
     * @command `i18n-ally.open-key`
     */
    openKey: "i18n-ally.open-key",
    /**
     * %command.delete_key%
     * @command `i18n-ally.delete-key`
     */
    deleteKey: "i18n-ally.delete-key",
    /**
     * %command.rename_key%
     * @command `i18n-ally.rename-key`
     */
    renameKey: "i18n-ally.rename-key",
    /**
     * %refactor.extract_text%
     * @command `i18n-ally.extract-text`
     */
    extractText: "i18n-ally.extract-text",
    /**
     * Extract all hard-coded strings (experimental)
     * @command `i18n-ally.extract-hard-strings-batch`
     */
    extractHardStringsBatch: "i18n-ally.extract-hard-strings-batch",
    /**
     * Detect hard-coded strings in current file (experimental)
     * @command `i18n-ally.detect_hard_strings`
     */
    detectHardStrings: "i18n-ally.detect_hard_strings",
    /**
     * %command.open_url%
     * @command `i18n-ally.open-url`
     */
    openUrl: "i18n-ally.open-url",
    /**
     * %command.fulfill_keys%
     * @command `i18n-ally.fulfill-keys`
     */
    fulfillKeys: "i18n-ally.fulfill-keys",
    /**
     * %command.refresh_usage%
     * @command `i18n-ally.refresh-usage`
     */
    refreshUsage: "i18n-ally.refresh-usage",
    /**
     * %feedback.support%
     * @command `i18n-ally.support`
     */
    support: "i18n-ally.support",
    /**
     * %command.locale_visibility_show%
     * @command `i18n-ally.locale-visibility-show`
     */
    localeVisibilityShow: "i18n-ally.locale-visibility-show",
    /**
     * %command.locale_visibility_hide%
     * @command `i18n-ally.locale-visibility-hide`
     */
    localeVisibilityHide: "i18n-ally.locale-visibility-hide",
    /**
     * %command.new_key%
     * @command `i18n-ally.new-key`
     */
    newKey: "i18n-ally.new-key",
    /**
     * %command.duplicate_key%
     * @command `i18n-ally.duplicate-key`
     */
    duplicateKey: "i18n-ally.duplicate-key",
    /**
     * %command.mark_key_as_in_use%
     * @command `i18n-ally.mark-key-as-in-use`
     */
    markKeyAsInUse: "i18n-ally.mark-key-as-in-use",
    /**
     * %command.open_in_editor%
     * @command `i18n-ally.open-in-editor`
     */
    openInEditor: "i18n-ally.open-in-editor",
    /**
     * %command.open_editor%
     * @command `i18n-ally.open-editor`
     */
    openEditor: "i18n-ally.open-editor",
    /**
     * %review.leave_comment%
     * @command `i18n-ally.review.comment`
     */
    comment: "i18n-ally.review.comment",
    /**
     * %review.approve%
     * @command `i18n-ally.review.approve`
     */
    approve: "i18n-ally.review.approve",
    /**
     * %review.request_change%
     * @command `i18n-ally.review.request-change`
     */
    requestChange: "i18n-ally.review.request-change",
    /**
     * %review.edit%
     * @command `i18n-ally.review.edit`
     */
    edit: "i18n-ally.review.edit",
    /**
     * %review.resolve%
     * @command `i18n-ally.review.resolve`
     */
    resolve: "i18n-ally.review.resolve",
    /**
     * %review.resolve_all%
     * @command `i18n-ally.review.resolve-thread`
     */
    resolveThread: "i18n-ally.review.resolve-thread",
    /**
     * %review.apply_translation_candidate%
     * @command `i18n-ally.review.apply-translation`
     */
    applyTranslation: "i18n-ally.review.apply-translation",
    /**
     * %review.apply_suggestion%
     * @command `i18n-ally.review.apply-suggestion`
     */
    applySuggestion: "i18n-ally.review.apply-suggestion",
    /**
     * %command.insert_key%
     * @command `i18n-ally.insert-key`
     */
    insertKey: "i18n-ally.insert-key",
    /**
     * %command.deepl_usage%
     * @command `i18n-ally.deepl-usage`
     */
    deeplUsage: "i18n-ally.deepl-usage",
    /**
     * %command.go_to_range%
     * @command `i18n-ally.go-to-range`
     */
    goToRange: "i18n-ally.go-to-range",
    /**
     * %command.go_to_next_usage%
     * @command `i18n-ally.go-to-next-usage`
     */
    goToNextUsage: "i18n-ally.go-to-next-usage",
    /**
     * %command.go_to_prev_usage%
     * @command `i18n-ally.go-to-prev-usage`
     */
    goToPrevUsage: "i18n-ally.go-to-prev-usage",
    /**
     * %command.show_docs%
     * @command `i18n-ally.open-docs-hard-string`
     */
    openDocsHardString: "i18n-ally.open-docs-hard-string",
    /**
     * %command.extract.disable-auto-detect%
     * @command `i18n-ally.extract-disable-auto-detect`
     */
    extractDisableAutoDetect: "i18n-ally.extract-disable-auto-detect",
    /**
     * %command.extract.enable-auto-detect%
     * @command `i18n-ally.extract-enable-auto-detect`
     */
    extractEnableAutoDetect: "i18n-ally.extract-enable-auto-detect",
} satisfies Record<string, Command> as Record<string, Command>;
/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commandsInformation = {
    /**
     * %command.config_locales%
     * @command `i18n-ally.config-locales`
     */
    "i18n-ally.config-locales": { "commandShorthandName": "configLocales", "command": "i18n-ally.config-locales", "title": "%command.config_locales%", "category": "%extname%" },
    /**
     * %command.config_locales_auto%
     * @command `i18n-ally.config-locales-auto`
     */
    "i18n-ally.config-locales-auto": { "commandShorthandName": "configLocalesAuto", "command": "i18n-ally.config-locales-auto", "title": "%command.config_locales_auto%", "category": "%extname%" },
    /**
     * %command.config_display_language%
     * @command `i18n-ally.config-display-language`
     */
    "i18n-ally.config-display-language": { "commandShorthandName": "configDisplayLanguage", "command": "i18n-ally.config-display-language", "title": "%command.config_display_language%", "category": "%extname%" },
    /**
     * %command.config_source_language%
     * @command `i18n-ally.config-source-language`
     */
    "i18n-ally.config-source-language": { "commandShorthandName": "configSourceLanguage", "command": "i18n-ally.config-source-language", "title": "%command.config_source_language%", "category": "%extname%" },
    /**
     * %command.set_display_language%
     * @command `i18n-ally.set-display-language`
     */
    "i18n-ally.set-display-language": { "commandShorthandName": "setDisplayLanguage", "command": "i18n-ally.set-display-language", "title": "%command.set_display_language%", "category": "%extname%" },
    /**
     * %command.set_source_language%
     * @command `i18n-ally.set-source-language`
     */
    "i18n-ally.set-source-language": { "commandShorthandName": "setSourceLanguage", "command": "i18n-ally.set-source-language", "title": "%command.set_source_language%", "category": "%extname%" },
    /**
     * %command.copy_key%
     * @command `i18n-ally.copy-key`
     */
    "i18n-ally.copy-key": { "commandShorthandName": "copyKey", "command": "i18n-ally.copy-key", "category": "%extname%", "title": "%command.copy_key%", "icon": "$(clippy)" },
    /**
     * %command.translate_key%
     * @command `i18n-ally.translate-key`
     */
    "i18n-ally.translate-key": { "commandShorthandName": "translateKey", "command": "i18n-ally.translate-key", "category": "%extname%", "title": "%command.translate_key%", "icon": "$(globe)" },
    /**
     * %command.edit_key%
     * @command `i18n-ally.edit-key`
     */
    "i18n-ally.edit-key": { "commandShorthandName": "editKey", "command": "i18n-ally.edit-key", "category": "%extname%", "title": "%command.edit_key%", "icon": "$(edit)" },
    /**
     * %command.open_key%
     * @command `i18n-ally.open-key`
     */
    "i18n-ally.open-key": { "commandShorthandName": "openKey", "command": "i18n-ally.open-key", "category": "%extname%", "title": "%command.open_key%", "icon": "$(go-to-file)" },
    /**
     * %command.delete_key%
     * @command `i18n-ally.delete-key`
     */
    "i18n-ally.delete-key": { "commandShorthandName": "deleteKey", "command": "i18n-ally.delete-key", "category": "%extname%", "title": "%command.delete_key%" },
    /**
     * %command.rename_key%
     * @command `i18n-ally.rename-key`
     */
    "i18n-ally.rename-key": { "commandShorthandName": "renameKey", "command": "i18n-ally.rename-key", "category": "%extname%", "title": "%command.rename_key%" },
    /**
     * %refactor.extract_text%
     * @command `i18n-ally.extract-text`
     */
    "i18n-ally.extract-text": { "commandShorthandName": "extractText", "command": "i18n-ally.extract-text", "category": "%extname%", "title": "%refactor.extract_text%", "icon": "$(symbol-string)" },
    /**
     * Extract all hard-coded strings (experimental)
     * @command `i18n-ally.extract-hard-strings-batch`
     */
    "i18n-ally.extract-hard-strings-batch": { "commandShorthandName": "extractHardStringsBatch", "command": "i18n-ally.extract-hard-strings-batch", "category": "%extname%", "title": "Extract all hard-coded strings (experimental)" },
    /**
     * Detect hard-coded strings in current file (experimental)
     * @command `i18n-ally.detect_hard_strings`
     */
    "i18n-ally.detect_hard_strings": { "commandShorthandName": "detectHardStrings", "command": "i18n-ally.detect_hard_strings", "category": "%extname%", "title": "Detect hard-coded strings in current file (experimental)" },
    /**
     * %command.open_url%
     * @command `i18n-ally.open-url`
     */
    "i18n-ally.open-url": { "commandShorthandName": "openUrl", "command": "i18n-ally.open-url", "category": "%extname%", "title": "%command.open_url%" },
    /**
     * %command.fulfill_keys%
     * @command `i18n-ally.fulfill-keys`
     */
    "i18n-ally.fulfill-keys": { "commandShorthandName": "fulfillKeys", "command": "i18n-ally.fulfill-keys", "category": "%extname%", "title": "%command.fulfill_keys%", "icon": "$(selection)" },
    /**
     * %command.refresh_usage%
     * @command `i18n-ally.refresh-usage`
     */
    "i18n-ally.refresh-usage": { "commandShorthandName": "refreshUsage", "command": "i18n-ally.refresh-usage", "category": "%extname%", "title": "%command.refresh_usage%", "icon": "$(refresh)" },
    /**
     * %feedback.support%
     * @command `i18n-ally.support`
     */
    "i18n-ally.support": { "commandShorthandName": "support", "command": "i18n-ally.support", "category": "%extname%", "title": "%feedback.support%" },
    /**
     * %command.locale_visibility_show%
     * @command `i18n-ally.locale-visibility-show`
     */
    "i18n-ally.locale-visibility-show": { "commandShorthandName": "localeVisibilityShow", "command": "i18n-ally.locale-visibility-show", "category": "%extname%", "title": "%command.locale_visibility_show%", "icon": "$(eye)" },
    /**
     * %command.locale_visibility_hide%
     * @command `i18n-ally.locale-visibility-hide`
     */
    "i18n-ally.locale-visibility-hide": { "commandShorthandName": "localeVisibilityHide", "command": "i18n-ally.locale-visibility-hide", "category": "%extname%", "title": "%command.locale_visibility_hide%", "icon": "$(eye-closed)" },
    /**
     * %command.new_key%
     * @command `i18n-ally.new-key`
     */
    "i18n-ally.new-key": { "commandShorthandName": "newKey", "command": "i18n-ally.new-key", "category": "%extname%", "title": "%command.new_key%", "icon": "$(plus)" },
    /**
     * %command.duplicate_key%
     * @command `i18n-ally.duplicate-key`
     */
    "i18n-ally.duplicate-key": { "commandShorthandName": "duplicateKey", "command": "i18n-ally.duplicate-key", "category": "%extname%", "title": "%command.duplicate_key%" },
    /**
     * %command.mark_key_as_in_use%
     * @command `i18n-ally.mark-key-as-in-use`
     */
    "i18n-ally.mark-key-as-in-use": { "commandShorthandName": "markKeyAsInUse", "command": "i18n-ally.mark-key-as-in-use", "category": "%extname%", "title": "%command.mark_key_as_in_use%" },
    /**
     * %command.open_in_editor%
     * @command `i18n-ally.open-in-editor`
     */
    "i18n-ally.open-in-editor": { "commandShorthandName": "openInEditor", "command": "i18n-ally.open-in-editor", "category": "%extname%", "title": "%command.open_in_editor%", "icon": "$(file-symlink-file)" },
    /**
     * %command.open_editor%
     * @command `i18n-ally.open-editor`
     */
    "i18n-ally.open-editor": { "commandShorthandName": "openEditor", "command": "i18n-ally.open-editor", "category": "%extname%", "title": "%command.open_editor%" },
    /**
     * %review.leave_comment%
     * @command `i18n-ally.review.comment`
     */
    "i18n-ally.review.comment": { "commandShorthandName": "comment", "command": "i18n-ally.review.comment", "category": "%extname%", "title": "%review.leave_comment%", "enablement": "!commentIsEmpty" },
    /**
     * %review.approve%
     * @command `i18n-ally.review.approve`
     */
    "i18n-ally.review.approve": { "commandShorthandName": "approve", "command": "i18n-ally.review.approve", "category": "%extname%", "title": "%review.approve%" },
    /**
     * %review.request_change%
     * @command `i18n-ally.review.request-change`
     */
    "i18n-ally.review.request-change": { "commandShorthandName": "requestChange", "command": "i18n-ally.review.request-change", "category": "%extname%", "title": "%review.request_change%" },
    /**
     * %review.edit%
     * @command `i18n-ally.review.edit`
     */
    "i18n-ally.review.edit": { "commandShorthandName": "edit", "command": "i18n-ally.review.edit", "category": "%extname%", "title": "%review.edit%", "icon": "$(edit)" },
    /**
     * %review.resolve%
     * @command `i18n-ally.review.resolve`
     */
    "i18n-ally.review.resolve": { "commandShorthandName": "resolve", "command": "i18n-ally.review.resolve", "title": "%review.resolve%", "icon": "$(issue-closed)" },
    /**
     * %review.resolve_all%
     * @command `i18n-ally.review.resolve-thread`
     */
    "i18n-ally.review.resolve-thread": { "commandShorthandName": "resolveThread", "command": "i18n-ally.review.resolve-thread", "category": "%extname%", "title": "%review.resolve_all%", "icon": "$(checklist)" },
    /**
     * %review.apply_translation_candidate%
     * @command `i18n-ally.review.apply-translation`
     */
    "i18n-ally.review.apply-translation": { "commandShorthandName": "applyTranslation", "command": "i18n-ally.review.apply-translation", "category": "%extname%", "title": "%review.apply_translation_candidate%", "icon": "$(check)" },
    /**
     * %review.apply_suggestion%
     * @command `i18n-ally.review.apply-suggestion`
     */
    "i18n-ally.review.apply-suggestion": { "commandShorthandName": "applySuggestion", "command": "i18n-ally.review.apply-suggestion", "category": "%extname%", "title": "%review.apply_suggestion%" },
    /**
     * %command.insert_key%
     * @command `i18n-ally.insert-key`
     */
    "i18n-ally.insert-key": { "commandShorthandName": "insertKey", "command": "i18n-ally.insert-key", "category": "%extname%", "title": "%command.insert_key%" },
    /**
     * %command.deepl_usage%
     * @command `i18n-ally.deepl-usage`
     */
    "i18n-ally.deepl-usage": { "commandShorthandName": "deeplUsage", "command": "i18n-ally.deepl-usage", "category": "%extname%", "title": "%command.deepl_usage%" },
    /**
     * %command.go_to_range%
     * @command `i18n-ally.go-to-range`
     */
    "i18n-ally.go-to-range": { "commandShorthandName": "goToRange", "command": "i18n-ally.go-to-range", "category": "%extname%", "title": "%command.go_to_range%" },
    /**
     * %command.go_to_next_usage%
     * @command `i18n-ally.go-to-next-usage`
     */
    "i18n-ally.go-to-next-usage": { "commandShorthandName": "goToNextUsage", "command": "i18n-ally.go-to-next-usage", "category": "%extname%", "title": "%command.go_to_next_usage%" },
    /**
     * %command.go_to_prev_usage%
     * @command `i18n-ally.go-to-prev-usage`
     */
    "i18n-ally.go-to-prev-usage": { "commandShorthandName": "goToPrevUsage", "command": "i18n-ally.go-to-prev-usage", "category": "%extname%", "title": "%command.go_to_prev_usage%" },
    /**
     * %command.show_docs%
     * @command `i18n-ally.open-docs-hard-string`
     */
    "i18n-ally.open-docs-hard-string": { "commandShorthandName": "openDocsHardString", "command": "i18n-ally.open-docs-hard-string", "category": "%extname%", "title": "%command.show_docs%", "icon": "$(question)" },
    /**
     * %command.extract.disable-auto-detect%
     * @command `i18n-ally.extract-disable-auto-detect`
     */
    "i18n-ally.extract-disable-auto-detect": { "commandShorthandName": "extractDisableAutoDetect", "command": "i18n-ally.extract-disable-auto-detect", "category": "%extname%", "title": "%command.extract.disable-auto-detect%" },
    /**
     * %command.extract.enable-auto-detect%
     * @command `i18n-ally.extract-enable-auto-detect`
     */
    "i18n-ally.extract-enable-auto-detect": { "commandShorthandName": "extractEnableAutoDetect", "command": "i18n-ally.extract-enable-auto-detect", "category": "%extname%", "title": "%command.extract.enable-auto-detect%" },
} satisfies Record<Command, CommandsInformation> as Record<Command, CommandsInformation>;
/**
 * Register a command. See `vscode::commands.registerCommand`.
 */
export const useCommand = (commandFullKey: Command, callback: (...args: any[]) => any): void => useReactiveCommand(commandFullKey, callback);
/**
 * Register multiple commands. See `vscode::commands.registerCommand`.
 */
export const useCommands = (commands: Partial<Record<Command, (...args: any[]) => any>>): void => useReactiveCommands(commands);
/**
 * Name type of Logger and OutputChannel
 */
export type LoggerName = typeof name | typeof displayName | typeof extensionId;
/**
 * Creates a logger that writes to the output channel.
 */
export const useLogger = (loggerName: LoggerName = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) => useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
/**
 * @reactive `window.createOutputChannel`
 */
export const useOutputChannel = (outputName: LoggerName = displayName ?? name ?? extensionId) => useReactiveOutputChannel(outputName);
export const putRight = (target: Nullable<string>, curr: string) => target ? ''.concat(curr).concat(target) : curr;
export const putLeft = (target: Nullable<string>, curr: string) => target ? ''.concat(target).concat(curr) : curr;
/**
 * Create a statusBarItem with a commmand id
 */
export const useStatusBarItemFromCommand = memo((command: Command) => {
    const cmd = commandsInformation[command];
    return useStatusBarItem({
        id: cmd.commandShorthandName,
        command: cmd.command,
        name: cmd.command,
        text: putLeft(cmd.icon, cmd.shortTitle ?? cmd.title ?? cmd.commandShorthandName),
        tooltip: putLeft(cmd.category, ":").concat(cmd.title ?? cmd.shortTitle ?? cmd.commandShorthandName)
    });
});
/**
 * Create a option of statusBarItem with a commmand id
 */
export const statusBarItemOption = (command: Command): UseStatusBarItemOptions => {
    const cmd = commandsInformation[command];
    return {
        id: cmd.commandShorthandName,
        command: cmd.command,
        name: cmd.command,
        text: putLeft(cmd.icon, cmd.shortTitle ?? cmd.title ?? cmd.commandShorthandName),
        tooltip: putLeft(cmd.category, ":").concat(cmd.title ?? cmd.shortTitle ?? cmd.commandShorthandName)
    };
};
/**
 * %command.config_locales%
 * @command Register a command `i18n-ally.config-locales`
 */
export const useCommandConfigLocales = (callback: (...args: any[]) => any) => useCommand(commands.configLocales, callback);
/**
 * %command.config_locales_auto%
 * @command Register a command `i18n-ally.config-locales-auto`
 */
export const useCommandConfigLocalesAuto = (callback: (...args: any[]) => any) => useCommand(commands.configLocalesAuto, callback);
/**
 * %command.config_display_language%
 * @command Register a command `i18n-ally.config-display-language`
 */
export const useCommandConfigDisplayLanguage = (callback: (...args: any[]) => any) => useCommand(commands.configDisplayLanguage, callback);
/**
 * %command.config_source_language%
 * @command Register a command `i18n-ally.config-source-language`
 */
export const useCommandConfigSourceLanguage = (callback: (...args: any[]) => any) => useCommand(commands.configSourceLanguage, callback);
/**
 * %command.set_display_language%
 * @command Register a command `i18n-ally.set-display-language`
 */
export const useCommandSetDisplayLanguage = (callback: (...args: any[]) => any) => useCommand(commands.setDisplayLanguage, callback);
/**
 * %command.set_source_language%
 * @command Register a command `i18n-ally.set-source-language`
 */
export const useCommandSetSourceLanguage = (callback: (...args: any[]) => any) => useCommand(commands.setSourceLanguage, callback);
/**
 * %command.copy_key%
 * @command Register a command `i18n-ally.copy-key`
 */
export const useCommandCopyKey = (callback: (...args: any[]) => any) => useCommand(commands.copyKey, callback);
/**
 * %command.translate_key%
 * @command Register a command `i18n-ally.translate-key`
 */
export const useCommandTranslateKey = (callback: (...args: any[]) => any) => useCommand(commands.translateKey, callback);
/**
 * %command.edit_key%
 * @command Register a command `i18n-ally.edit-key`
 */
export const useCommandEditKey = (callback: (...args: any[]) => any) => useCommand(commands.editKey, callback);
/**
 * %command.open_key%
 * @command Register a command `i18n-ally.open-key`
 */
export const useCommandOpenKey = (callback: (...args: any[]) => any) => useCommand(commands.openKey, callback);
/**
 * %command.delete_key%
 * @command Register a command `i18n-ally.delete-key`
 */
export const useCommandDeleteKey = (callback: (...args: any[]) => any) => useCommand(commands.deleteKey, callback);
/**
 * %command.rename_key%
 * @command Register a command `i18n-ally.rename-key`
 */
export const useCommandRenameKey = (callback: (...args: any[]) => any) => useCommand(commands.renameKey, callback);
/**
 * %refactor.extract_text%
 * @command Register a command `i18n-ally.extract-text`
 */
export const useCommandExtractText = (callback: (...args: any[]) => any) => useCommand(commands.extractText, callback);
/**
 * Extract all hard-coded strings (experimental)
 * @command Register a command `i18n-ally.extract-hard-strings-batch`
 */
export const useCommandExtractHardStringsBatch = (callback: (...args: any[]) => any) => useCommand(commands.extractHardStringsBatch, callback);
/**
 * Detect hard-coded strings in current file (experimental)
 * @command Register a command `i18n-ally.detect_hard_strings`
 */
export const useCommandDetectHardStrings = (callback: (...args: any[]) => any) => useCommand(commands.detectHardStrings, callback);
/**
 * %command.open_url%
 * @command Register a command `i18n-ally.open-url`
 */
export const useCommandOpenUrl = (callback: (...args: any[]) => any) => useCommand(commands.openUrl, callback);
/**
 * %command.fulfill_keys%
 * @command Register a command `i18n-ally.fulfill-keys`
 */
export const useCommandFulfillKeys = (callback: (...args: any[]) => any) => useCommand(commands.fulfillKeys, callback);
/**
 * %command.refresh_usage%
 * @command Register a command `i18n-ally.refresh-usage`
 */
export const useCommandRefreshUsage = (callback: (...args: any[]) => any) => useCommand(commands.refreshUsage, callback);
/**
 * %feedback.support%
 * @command Register a command `i18n-ally.support`
 */
export const useCommandSupport = (callback: (...args: any[]) => any) => useCommand(commands.support, callback);
/**
 * %command.locale_visibility_show%
 * @command Register a command `i18n-ally.locale-visibility-show`
 */
export const useCommandLocaleVisibilityShow = (callback: (...args: any[]) => any) => useCommand(commands.localeVisibilityShow, callback);
/**
 * %command.locale_visibility_hide%
 * @command Register a command `i18n-ally.locale-visibility-hide`
 */
export const useCommandLocaleVisibilityHide = (callback: (...args: any[]) => any) => useCommand(commands.localeVisibilityHide, callback);
/**
 * %command.new_key%
 * @command Register a command `i18n-ally.new-key`
 */
export const useCommandNewKey = (callback: (...args: any[]) => any) => useCommand(commands.newKey, callback);
/**
 * %command.duplicate_key%
 * @command Register a command `i18n-ally.duplicate-key`
 */
export const useCommandDuplicateKey = (callback: (...args: any[]) => any) => useCommand(commands.duplicateKey, callback);
/**
 * %command.mark_key_as_in_use%
 * @command Register a command `i18n-ally.mark-key-as-in-use`
 */
export const useCommandMarkKeyAsInUse = (callback: (...args: any[]) => any) => useCommand(commands.markKeyAsInUse, callback);
/**
 * %command.open_in_editor%
 * @command Register a command `i18n-ally.open-in-editor`
 */
export const useCommandOpenInEditor = (callback: (...args: any[]) => any) => useCommand(commands.openInEditor, callback);
/**
 * %command.open_editor%
 * @command Register a command `i18n-ally.open-editor`
 */
export const useCommandOpenEditor = (callback: (...args: any[]) => any) => useCommand(commands.openEditor, callback);
/**
 * %review.leave_comment%
 * @command Register a command `i18n-ally.review.comment`
 */
export const useCommandComment = (callback: (...args: any[]) => any) => useCommand(commands.comment, callback);
/**
 * %review.approve%
 * @command Register a command `i18n-ally.review.approve`
 */
export const useCommandApprove = (callback: (...args: any[]) => any) => useCommand(commands.approve, callback);
/**
 * %review.request_change%
 * @command Register a command `i18n-ally.review.request-change`
 */
export const useCommandRequestChange = (callback: (...args: any[]) => any) => useCommand(commands.requestChange, callback);
/**
 * %review.edit%
 * @command Register a command `i18n-ally.review.edit`
 */
export const useCommandEdit = (callback: (...args: any[]) => any) => useCommand(commands.edit, callback);
/**
 * %review.resolve%
 * @command Register a command `i18n-ally.review.resolve`
 */
export const useCommandResolve = (callback: (...args: any[]) => any) => useCommand(commands.resolve, callback);
/**
 * %review.resolve_all%
 * @command Register a command `i18n-ally.review.resolve-thread`
 */
export const useCommandResolveThread = (callback: (...args: any[]) => any) => useCommand(commands.resolveThread, callback);
/**
 * %review.apply_translation_candidate%
 * @command Register a command `i18n-ally.review.apply-translation`
 */
export const useCommandApplyTranslation = (callback: (...args: any[]) => any) => useCommand(commands.applyTranslation, callback);
/**
 * %review.apply_suggestion%
 * @command Register a command `i18n-ally.review.apply-suggestion`
 */
export const useCommandApplySuggestion = (callback: (...args: any[]) => any) => useCommand(commands.applySuggestion, callback);
/**
 * %command.insert_key%
 * @command Register a command `i18n-ally.insert-key`
 */
export const useCommandInsertKey = (callback: (...args: any[]) => any) => useCommand(commands.insertKey, callback);
/**
 * %command.deepl_usage%
 * @command Register a command `i18n-ally.deepl-usage`
 */
export const useCommandDeeplUsage = (callback: (...args: any[]) => any) => useCommand(commands.deeplUsage, callback);
/**
 * %command.go_to_range%
 * @command Register a command `i18n-ally.go-to-range`
 */
export const useCommandGoToRange = (callback: (...args: any[]) => any) => useCommand(commands.goToRange, callback);
/**
 * %command.go_to_next_usage%
 * @command Register a command `i18n-ally.go-to-next-usage`
 */
export const useCommandGoToNextUsage = (callback: (...args: any[]) => any) => useCommand(commands.goToNextUsage, callback);
/**
 * %command.go_to_prev_usage%
 * @command Register a command `i18n-ally.go-to-prev-usage`
 */
export const useCommandGoToPrevUsage = (callback: (...args: any[]) => any) => useCommand(commands.goToPrevUsage, callback);
/**
 * %command.show_docs%
 * @command Register a command `i18n-ally.open-docs-hard-string`
 */
export const useCommandOpenDocsHardString = (callback: (...args: any[]) => any) => useCommand(commands.openDocsHardString, callback);
/**
 * %command.extract.disable-auto-detect%
 * @command Register a command `i18n-ally.extract-disable-auto-detect`
 */
export const useCommandExtractDisableAutoDetect = (callback: (...args: any[]) => any) => useCommand(commands.extractDisableAutoDetect, callback);
/**
 * %command.extract.enable-auto-detect%
 * @command Register a command `i18n-ally.extract-enable-auto-detect`
 */
export const useCommandExtractEnableAutoDetect = (callback: (...args: any[]) => any) => useCommand(commands.extractEnableAutoDetect, callback);
/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey = "i18n-ally.derivedKeyRules" | "i18n-ally.filenameMatchRegex" | "i18n-ally.fileNamespace" | "i18n-ally.keyMatchRegex" | "vue-i18n-ally.localesPaths" | "vue-i18n-ally.encoding" | "vue-i18n-ally.sourceLanguage" | "vue-i18n-ally.displayLanguage" | "vue-i18n-ally.ignoredLocales" | "vue-i18n-ally.keystyle" | "vue-i18n-ally.dirStructure" | "vue-i18n-ally.annotations" | "vue-i18n-ally.annotationMaxLength" | "vue-i18n-ally.annotationDelimiter" | "vue-i18n-ally.filenameMatchRegex" | "vue-i18n-ally.includeSubfolders" | "vue-i18n-ally.fullReloadOnChanged" | "vue-i18n-ally.sortKeys" | "vue-i18n-ally.preferredDelimiter" | "vue-i18n-ally.readonly";
/**
 * Section Type of `i18n-ally`
 */
export interface I18nAlly {
    /**
     * %config.disabled%
     */
    "disabled": boolean;
    /**
     * %config.auto_detection%
     */
    "autoDetection": boolean;
    /**
     * %config.locales_paths%
     */
    "localesPaths"?: (string | string[] | undefined);
    /**
     * %config.encoding%
     */
    "encoding": string;
    /**
     * %config.source_language%
     */
    "sourceLanguage"?: (string | undefined);
    /**
     * %config.display_language%
     */
    "displayLanguage"?: (string | undefined);
    /**
     * %config.ignored_locales%
     */
    "ignoredLocales": (unknown[] | undefined);
    /**
     * %config.keystyle%
     */
    "keystyle"?: ("auto" | "nested" | "flat" | undefined);
    /**
     * %config.dir_structure%
     */
    "dirStructure"?: ("auto" | "file" | "dir" | undefined);
    /**
     * %config.annotations%
     */
    "annotations": boolean;
    /**
     * %config.annotation_in_place%
     */
    "annotationInPlace": boolean;
    /**
     * %config.annotation_max_length%
     */
    "annotationMaxLength": number;
    /**
     * %config.annotation_delimiter%
     */
    "annotationDelimiter": string;
    /**
     * %config.include_subfolders%
     */
    "includeSubfolders": boolean;
    /**
     * %config.full_reload_on_changed%
     */
    "fullReloadOnChanged": boolean;
    /**
     * %config.show_flags%
     */
    "showFlags": boolean;
    /**
     * %config.enabled_frameworks%
     */
    "enabledFrameworks": (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined);
    /**
     * %config.enabled_parsers%
     */
    "enabledParsers": (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined);
    /**
     * %config.keys_in_use%
     */
    "keysInUse": (string[] | undefined);
    /**
     * %config.sort_keys%
     */
    "sortKeys": boolean;
    /**
     * %config.sort_compare%
     */
    "sortCompare": ("binary" | "locale");
    /**
     * %config.sort_locale%
     */
    "sortLocale"?: (string | undefined);
    /**
     * %config.preferred_delimiter%
     */
    "preferredDelimiter": string;
    /**
     * %config.readonly%
     */
    "readonly": boolean;
    /**
     * %config.keep_fulfill%
     */
    "keepFulfilled": boolean;
    /**
     * %config.locale_country_map%
     */
    "localeCountryMap": Record<string, unknown>;
    /**
     * %config.indent%
     */
    "indent": number;
    /**
     * %config.disable_path_parsing%
     */
    "disablePathParsing": boolean;
    /**
     * %config.tab_style%
     */
    "tabStyle": ("space" | "tab");
    /**
     * %config.namespace%
     */
    "namespace"?: (boolean | undefined);
    /**
     * %config.path_matcher%
     */
    "pathMatcher"?: (string | undefined);
    /**
     * %config.language_tag_system%
     */
    "languageTagSystem": ("bcp47" | "legacy" | "none");
    /**
     * %config.ignore_files%
     */
    "ignoreFiles": (string[] | undefined);
    /**
     *
     */
    "parserOptions"?: Record<string, unknown>;
    /**
     * %config.default_namespace%
     */
    "defaultNamespace"?: (string | undefined);
}
/**
 * Section Type of `i18n-ally.theme`
 */
export interface Theme {
    /**
     *
     */
    "annotation": string;
    /**
     *
     */
    "annotationMissing": string;
    /**
     *
     */
    "annotationBorder": string;
    /**
     *
     */
    "annotationMissingBorder": string;
}
/**
 * Section Type of `i18n-ally.regex`
 */
export interface Regex {
    /**
     * %config.regex_key%
     */
    "key"?: (string | undefined);
    /**
     * %config.regex_usage_match%
     */
    "usageMatch": (string[] | undefined);
    /**
     * %config.regex_usage_match_append%
     */
    "usageMatchAppend": (string[] | undefined);
}
/**
 * Section Type of `i18n-ally.refactor`
 */
export interface Refactor {
    /**
     * %config.refactor_templates%
     */
    "templates": ({
        /**
     * @default `undefined`
     */
        'source'?: ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text");
        /**
         * @default `undefined`
         */
        'template'?: string;
        /**
         * @default `[]`
         */
        'templates': string[];
        /**
         * @default `[]`
         */
        'include': string[];
        /**
         * @default `[]`
         */
        'exclude': string[];
    }[] | undefined);
}
/**
 * Section Type of `i18n-ally.translate`
 */
export interface Translate {
    /**
     * %config.translate_save_as_candidates%
     */
    "saveAsCandidates": boolean;
    /**
     * %config.translate.fallbackToKey%
     */
    "fallbackToKey": boolean;
    /**
     * %config.translate.engines%
     */
    "engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[];
    /**
     * %config.translate.parallels%
     */
    "parallels": number;
    /**
     * %config.prompt_translating_source%
     */
    "promptSource": boolean;
    /**
     * %config.translate_override_existing%
     */
    "overrideExisting": boolean;
}
/**
 * Section Type of `i18n-ally.translate.google`
 */
export interface Google {
    /**
     * %config.google_api_key%
     */
    "apiKey": (string | null);
}
/**
 * Section Type of `i18n-ally.translate.deepl`
 */
export interface Deepl {
    /**
     * %config.deepl_api_key%
     */
    "apiKey": (string | null);
    /**
     * %config.deepl_log%
     */
    "enableLog": boolean;
    /**
     * %config.deepl_use_free_api_entry%
     */
    "useFreeApiEntry": boolean;
}
/**
 * Section Type of `i18n-ally.translate.baidu`
 */
export interface Baidu {
    /**
     * %config.baidu_appid%
     */
    "appid": (string | null);
    /**
     * %config.baidu_app_secret%
     */
    "apiSecret": (string | null);
}
/**
 * Section Type of `i18n-ally.translate.libre`
 */
export interface Libre {
    /**
     * %config.libretranslate_api_root%
     */
    "apiRoot": string;
}
/**
 * Section Type of `i18n-ally.translate.openai`
 */
export interface Openai {
    /**
     * %config.openai_api_key%
     */
    "apiKey": (string | null);
    /**
     * %config.openai_api_root%
     */
    "apiRoot": string;
    /**
     * %config.openai_api_model%
     */
    "apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613");
}
/**
 * Section Type of `i18n-ally.usage`
 */
export interface Usage {
    /**
     * %config.usage.scanning_ignore%
     */
    "scanningIgnore": (string[] | undefined);
    /**
     * %config.derived_keys%
     */
    "derivedKeyRules": (string[] | null);
}
/**
 * Section Type of `i18n-ally.frameworks.ruby-rails`
 */
export interface RubyRails {
    /**
     *
     */
    "scopeRoot": string;
}
/**
 * Section Type of `i18n-ally.parsers.typescript`
 */
export interface Typescript {
    /**
     *
     */
    "tsNodePath": string;
    /**
     *
     */
    "compilerOptions": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.parsers`
 */
export interface Parsers {
    /**
     *
     */
    "extendFileExtensions": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.review`
 */
export interface Review {
    /**
     * %config.review_enabled%
     */
    "enabled": boolean;
    /**
     * %config.review_gutters%
     */
    "gutters": boolean;
    /**
     * %config.review_remove_on_resolved%
     */
    "removeCommentOnResolved": boolean;
}
/**
 * Section Type of `i18n-ally.review.user`
 */
export interface User {
    /**
     * %config.review_username%
     */
    "name"?: (string | undefined);
    /**
     * %config.review_email%
     */
    "email"?: (string | undefined);
}
/**
 * Section Type of `i18n-ally.editor`
 */
export interface Editor {
    /**
     * %config.editor_prefer_editor%
     */
    "preferEditor": boolean;
}
/**
 * Section Type of `i18n-ally.extract`
 */
export interface Extract {
    /**
     * %config.keygen_strategy%
     */
    "keygenStrategy": ("slug" | "random" | "empty" | "source");
    /**
     * %config.keygen_style%
     */
    "keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS");
    /**
     * %config.key_prefix%
     */
    "keyPrefix": string;
    /**
     * %config.key_max_length%
     */
    "keyMaxLength": (number | null);
    /**
     * %config.target_picking_strategy%
     */
    "targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous");
    /**
     * Enables hard-coded strings detection automatically whenever opening a supported file
     */
    "autoDetect": boolean;
    /**
     * Strings to be ignored on hard-coded strings detection
     */
    "ignored": (string[] | undefined);
    /**
     * Strings to be ignored on hard-coded strings detection, by files
     */
    "ignoredByFiles": Record<string, unknown>;
}
/**
 * Section Type of `i18n-ally.extract.parsers`
 */
export interface ExtractParsers {
    /**
     * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "html": Record<string, unknown>;
    /**
     * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
     */
    "babel": Record<string, unknown>;
}
const defaults = {
    /**
     * Config defaults of `i18n-ally`
     */
    "i18n-ally": {
        /**
         * %config.disabled%
         */
        "disabled": false,
        /**
         * %config.auto_detection%
         */
        "autoDetection": true,
        /**
         * %config.locales_paths%
         */
        "localesPaths": undefined,
        /**
         * %config.encoding%
         */
        "encoding": "utf-8",
        /**
         * %config.source_language%
         */
        "sourceLanguage": undefined,
        /**
         * %config.display_language%
         */
        "displayLanguage": undefined,
        /**
         * %config.ignored_locales%
         */
        "ignoredLocales": [],
        /**
         * %config.keystyle%
         */
        "keystyle": undefined,
        /**
         * %config.dir_structure%
         */
        "dirStructure": undefined,
        /**
         * %config.annotations%
         */
        "annotations": true,
        /**
         * %config.annotation_in_place%
         */
        "annotationInPlace": true,
        /**
         * %config.annotation_max_length%
         */
        "annotationMaxLength": 40,
        /**
         * %config.annotation_delimiter%
         */
        "annotationDelimiter": "¬∑",
        /**
         * %config.include_subfolders%
         */
        "includeSubfolders": true,
        /**
         * %config.full_reload_on_changed%
         */
        "fullReloadOnChanged": false,
        /**
         * %config.show_flags%
         */
        "showFlags": true,
        /**
         * %config.enabled_frameworks%
         */
        "enabledFrameworks": [],
        /**
         * %config.enabled_parsers%
         */
        "enabledParsers": [],
        /**
         * %config.keys_in_use%
         */
        "keysInUse": [],
        /**
         * %config.sort_keys%
         */
        "sortKeys": false,
        /**
         * %config.sort_compare%
         */
        "sortCompare": "binary",
        /**
         * %config.sort_locale%
         */
        "sortLocale": undefined,
        /**
         * %config.preferred_delimiter%
         */
        "preferredDelimiter": "-",
        /**
         * %config.readonly%
         */
        "readonly": false,
        /**
         * %config.keep_fulfill%
         */
        "keepFulfilled": false,
        /**
         * %config.locale_country_map%
         */
        "localeCountryMap": {},
        /**
         * %config.indent%
         */
        "indent": 2,
        /**
         * %config.disable_path_parsing%
         */
        "disablePathParsing": false,
        /**
         * %config.tab_style%
         */
        "tabStyle": "space",
        /**
         * %config.namespace%
         */
        "namespace": undefined,
        /**
         * %config.path_matcher%
         */
        "pathMatcher": undefined,
        /**
         * %config.language_tag_system%
         */
        "languageTagSystem": "bcp47",
        /**
         * %config.ignore_files%
         */
        "ignoreFiles": [],
        /**
         *
         */
        "parserOptions": undefined,
        /**
         * %config.default_namespace%
         */
        "defaultNamespace": undefined,
    } satisfies I18nAlly as I18nAlly,
    /**
     * Config defaults of `i18n-ally.theme`
     */
    "i18n-ally.theme": {
        /**
         *
         */
        "annotation": "rgba(153, 153, 153, .8)",
        /**
         *
         */
        "annotationMissing": "rgba(153, 153, 153, .3)",
        /**
         *
         */
        "annotationBorder": "rgba(153, 153, 153, .2)",
        /**
         *
         */
        "annotationMissingBorder": "rgba(153, 153, 153, .2)",
    } satisfies Theme as Theme,
    /**
     * Config defaults of `i18n-ally.regex`
     */
    "i18n-ally.regex": {
        /**
         * %config.regex_key%
         */
        "key": undefined,
        /**
         * %config.regex_usage_match%
         */
        "usageMatch": [],
        /**
         * %config.regex_usage_match_append%
         */
        "usageMatchAppend": [],
    } satisfies Regex as Regex,
    /**
     * Config defaults of `i18n-ally.refactor`
     */
    "i18n-ally.refactor": {
        /**
         * %config.refactor_templates%
         */
        "templates": [],
    } satisfies Refactor as Refactor,
    /**
     * Config defaults of `i18n-ally.translate`
     */
    "i18n-ally.translate": {
        /**
         * %config.translate_save_as_candidates%
         */
        "saveAsCandidates": false,
        /**
         * %config.translate.fallbackToKey%
         */
        "fallbackToKey": false,
        /**
         * %config.translate.engines%
         */
        "engines": ["google"],
        /**
         * %config.translate.parallels%
         */
        "parallels": 5,
        /**
         * %config.prompt_translating_source%
         */
        "promptSource": false,
        /**
         * %config.translate_override_existing%
         */
        "overrideExisting": false,
    } satisfies Translate as Translate,
    /**
     * Config defaults of `i18n-ally.translate.google`
     */
    "i18n-ally.translate.google": {
        /**
         * %config.google_api_key%
         */
        "apiKey": null,
    } satisfies Google as Google,
    /**
     * Config defaults of `i18n-ally.translate.deepl`
     */
    "i18n-ally.translate.deepl": {
        /**
         * %config.deepl_api_key%
         */
        "apiKey": null,
        /**
         * %config.deepl_log%
         */
        "enableLog": false,
        /**
         * %config.deepl_use_free_api_entry%
         */
        "useFreeApiEntry": false,
    } satisfies Deepl as Deepl,
    /**
     * Config defaults of `i18n-ally.translate.baidu`
     */
    "i18n-ally.translate.baidu": {
        /**
         * %config.baidu_appid%
         */
        "appid": null,
        /**
         * %config.baidu_app_secret%
         */
        "apiSecret": null,
    } satisfies Baidu as Baidu,
    /**
     * Config defaults of `i18n-ally.translate.libre`
     */
    "i18n-ally.translate.libre": {
        /**
         * %config.libretranslate_api_root%
         */
        "apiRoot": "http://localhost:5000",
    } satisfies Libre as Libre,
    /**
     * Config defaults of `i18n-ally.translate.openai`
     */
    "i18n-ally.translate.openai": {
        /**
         * %config.openai_api_key%
         */
        "apiKey": null,
        /**
         * %config.openai_api_root%
         */
        "apiRoot": "https://api.openai.com",
        /**
         * %config.openai_api_model%
         */
        "apiModel": "gpt-3.5-turbo",
    } satisfies Openai as Openai,
    /**
     * Config defaults of `i18n-ally.usage`
     */
    "i18n-ally.usage": {
        /**
         * %config.usage.scanning_ignore%
         */
        "scanningIgnore": [],
        /**
         * %config.derived_keys%
         */
        "derivedKeyRules": null,
    } satisfies Usage as Usage,
    /**
     * Config defaults of `i18n-ally.frameworks.ruby-rails`
     */
    "i18n-ally.frameworks.ruby-rails": {
        /**
         *
         */
        "scopeRoot": "app/views",
    } satisfies RubyRails as RubyRails,
    /**
     * Config defaults of `i18n-ally.parsers.typescript`
     */
    "i18n-ally.parsers.typescript": {
        /**
         *
         */
        "tsNodePath": "node_modules/ts-node/dist/bin.js",
        /**
         *
         */
        "compilerOptions": {},
    } satisfies Typescript as Typescript,
    /**
     * Config defaults of `i18n-ally.parsers`
     */
    "i18n-ally.parsers": {
        /**
         *
         */
        "extendFileExtensions": {},
    } satisfies Parsers as Parsers,
    /**
     * Config defaults of `i18n-ally.review`
     */
    "i18n-ally.review": {
        /**
         * %config.review_enabled%
         */
        "enabled": true,
        /**
         * %config.review_gutters%
         */
        "gutters": true,
        /**
         * %config.review_remove_on_resolved%
         */
        "removeCommentOnResolved": false,
    } satisfies Review as Review,
    /**
     * Config defaults of `i18n-ally.review.user`
     */
    "i18n-ally.review.user": {
        /**
         * %config.review_username%
         */
        "name": undefined,
        /**
         * %config.review_email%
         */
        "email": undefined,
    } satisfies User as User,
    /**
     * Config defaults of `i18n-ally.editor`
     */
    "i18n-ally.editor": {
        /**
         * %config.editor_prefer_editor%
         */
        "preferEditor": false,
    } satisfies Editor as Editor,
    /**
     * Config defaults of `i18n-ally.extract`
     */
    "i18n-ally.extract": {
        /**
         * %config.keygen_strategy%
         */
        "keygenStrategy": "slug",
        /**
         * %config.keygen_style%
         */
        "keygenStyle": "default",
        /**
         * %config.key_prefix%
         */
        "keyPrefix": "",
        /**
         * %config.key_max_length%
         */
        "keyMaxLength": null,
        /**
         * %config.target_picking_strategy%
         */
        "targetPickingStrategy": "none",
        /**
         * Enables hard-coded strings detection automatically whenever opening a supported file
         */
        "autoDetect": false,
        /**
         * Strings to be ignored on hard-coded strings detection
         */
        "ignored": [],
        /**
         * Strings to be ignored on hard-coded strings detection, by files
         */
        "ignoredByFiles": {},
    } satisfies Extract as Extract,
    /**
     * Config defaults of `i18n-ally.extract.parsers`
     */
    "i18n-ally.extract.parsers": {
        /**
         * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "html": {},
        /**
         * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
         */
        "babel": {},
    } satisfies ExtractParsers as ExtractParsers,
};
/**
 * List of section names.
 */
export type SectionName = keyof typeof defaults;
/**
 * Shorthand of config section name.
 */
export const configs = {
    i18nAlly: "i18n-ally",
    theme: "i18n-ally.theme",
    regex: "i18n-ally.regex",
    refactor: "i18n-ally.refactor",
    translate: "i18n-ally.translate",
    google: "i18n-ally.translate.google",
    deepl: "i18n-ally.translate.deepl",
    baidu: "i18n-ally.translate.baidu",
    libre: "i18n-ally.translate.libre",
    openai: "i18n-ally.translate.openai",
    usage: "i18n-ally.usage",
    rubyRails: "i18n-ally.frameworks.ruby-rails",
    typescript: "i18n-ally.parsers.typescript",
    parsers: "i18n-ally.parsers",
    review: "i18n-ally.review",
    user: "i18n-ally.review.user",
    editor: "i18n-ally.editor",
    extract: "i18n-ally.extract",
    extractParsers: "i18n-ally.extract.parsers",
} satisfies Record<string, SectionName>;
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfig = memo(<Section extends SectionName>(section: Section) => defineConfigs<typeof defaults[Section]>(section, defaults[section]));
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfigObject = memo(<Section extends SectionName>(section: Section) => defineConfigObject<typeof defaults[Section]>(section, defaults[section]));
/**
 * ConfigObject<I18nAlly> of `i18n-ally`
 */
export const useConfigObjectI18nAlly = () => useConfigObject(configs.i18nAlly);
/**
 * ToConfigRefs<I18nAlly> of `i18n-ally`
 */
export const useConfigI18nAlly = () => useConfig(configs.i18nAlly);
/**
 * ConfigObject<Theme> of `i18n-ally.theme`
 */
export const useConfigObjectTheme = () => useConfigObject(configs.theme);
/**
 * ToConfigRefs<Theme> of `i18n-ally.theme`
 */
export const useConfigTheme = () => useConfig(configs.theme);
/**
 * ConfigObject<Regex> of `i18n-ally.regex`
 */
export const useConfigObjectRegex = () => useConfigObject(configs.regex);
/**
 * ToConfigRefs<Regex> of `i18n-ally.regex`
 */
export const useConfigRegex = () => useConfig(configs.regex);
/**
 * ConfigObject<Refactor> of `i18n-ally.refactor`
 */
export const useConfigObjectRefactor = () => useConfigObject(configs.refactor);
/**
 * ToConfigRefs<Refactor> of `i18n-ally.refactor`
 */
export const useConfigRefactor = () => useConfig(configs.refactor);
/**
 * ConfigObject<Translate> of `i18n-ally.translate`
 */
export const useConfigObjectTranslate = () => useConfigObject(configs.translate);
/**
 * ToConfigRefs<Translate> of `i18n-ally.translate`
 */
export const useConfigTranslate = () => useConfig(configs.translate);
/**
 * ConfigObject<Google> of `i18n-ally.translate.google`
 */
export const useConfigObjectGoogle = () => useConfigObject(configs.google);
/**
 * ToConfigRefs<Google> of `i18n-ally.translate.google`
 */
export const useConfigGoogle = () => useConfig(configs.google);
/**
 * ConfigObject<Deepl> of `i18n-ally.translate.deepl`
 */
export const useConfigObjectDeepl = () => useConfigObject(configs.deepl);
/**
 * ToConfigRefs<Deepl> of `i18n-ally.translate.deepl`
 */
export const useConfigDeepl = () => useConfig(configs.deepl);
/**
 * ConfigObject<Baidu> of `i18n-ally.translate.baidu`
 */
export const useConfigObjectBaidu = () => useConfigObject(configs.baidu);
/**
 * ToConfigRefs<Baidu> of `i18n-ally.translate.baidu`
 */
export const useConfigBaidu = () => useConfig(configs.baidu);
/**
 * ConfigObject<Libre> of `i18n-ally.translate.libre`
 */
export const useConfigObjectLibre = () => useConfigObject(configs.libre);
/**
 * ToConfigRefs<Libre> of `i18n-ally.translate.libre`
 */
export const useConfigLibre = () => useConfig(configs.libre);
/**
 * ConfigObject<Openai> of `i18n-ally.translate.openai`
 */
export const useConfigObjectOpenai = () => useConfigObject(configs.openai);
/**
 * ToConfigRefs<Openai> of `i18n-ally.translate.openai`
 */
export const useConfigOpenai = () => useConfig(configs.openai);
/**
 * ConfigObject<Usage> of `i18n-ally.usage`
 */
export const useConfigObjectUsage = () => useConfigObject(configs.usage);
/**
 * ToConfigRefs<Usage> of `i18n-ally.usage`
 */
export const useConfigUsage = () => useConfig(configs.usage);
/**
 * ConfigObject<RubyRails> of `i18n-ally.frameworks.ruby-rails`
 */
export const useConfigObjectRubyRails = () => useConfigObject(configs.rubyRails);
/**
 * ToConfigRefs<RubyRails> of `i18n-ally.frameworks.ruby-rails`
 */
export const useConfigRubyRails = () => useConfig(configs.rubyRails);
/**
 * ConfigObject<Typescript> of `i18n-ally.parsers.typescript`
 */
export const useConfigObjectTypescript = () => useConfigObject(configs.typescript);
/**
 * ToConfigRefs<Typescript> of `i18n-ally.parsers.typescript`
 */
export const useConfigTypescript = () => useConfig(configs.typescript);
/**
 * ConfigObject<Parsers> of `i18n-ally.parsers`
 */
export const useConfigObjectParsers = () => useConfigObject(configs.parsers);
/**
 * ToConfigRefs<Parsers> of `i18n-ally.parsers`
 */
export const useConfigParsers = () => useConfig(configs.parsers);
/**
 * ConfigObject<Review> of `i18n-ally.review`
 */
export const useConfigObjectReview = () => useConfigObject(configs.review);
/**
 * ToConfigRefs<Review> of `i18n-ally.review`
 */
export const useConfigReview = () => useConfig(configs.review);
/**
 * ConfigObject<User> of `i18n-ally.review.user`
 */
export const useConfigObjectUser = () => useConfigObject(configs.user);
/**
 * ToConfigRefs<User> of `i18n-ally.review.user`
 */
export const useConfigUser = () => useConfig(configs.user);
/**
 * ConfigObject<Editor> of `i18n-ally.editor`
 */
export const useConfigObjectEditor = () => useConfigObject(configs.editor);
/**
 * ToConfigRefs<Editor> of `i18n-ally.editor`
 */
export const useConfigEditor = () => useConfig(configs.editor);
/**
 * ConfigObject<Extract> of `i18n-ally.extract`
 */
export const useConfigObjectExtract = () => useConfigObject(configs.extract);
/**
 * ToConfigRefs<Extract> of `i18n-ally.extract`
 */
export const useConfigExtract = () => useConfig(configs.extract);
/**
 * ConfigObject<ExtractParsers> of `i18n-ally.extract.parsers`
 */
export const useConfigObjectExtractParsers = () => useConfigObject(configs.extractParsers);
/**
 * ToConfigRefs<ExtractParsers> of `i18n-ally.extract.parsers`
 */
export const useConfigExtractParsers = () => useConfig(configs.extractParsers);
/**
// Import reference
import { ConfigurationTarget } from 'vscode'
import * as meta from './generated/meta'
 */
/**
//ConfigObject<ExtractParsers> of `i18n-ally.extract.parsers`
//@example extractParsers
const extractParsers = meta.useConfigObjectExtractParsers()
const oldVal:object = extractParsers.html //get value
extractParsers.$update("html", oldVal, ConfigurationTarget.Global) //update value
 */
/**
//ToConfigRefs<ExtractParsers> of `i18n-ally.extract.parsers`
//@example extractParsers
const extractParsers = meta.useConfigExtractParsers()
const oldVal:object = extractParsers.html.value //get value
extractParsers.html.update(oldVal, ConfigurationTarget.Global) //update value
 */ 
