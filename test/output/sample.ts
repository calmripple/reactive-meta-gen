/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, } from 'reactive-vscode';
export const publisher = "calmripple";
export const name = "sample";
export const version = "0.8.1";
export const displayName = "sample IntelliSense";
export const description = "Intelligent sample previewing and searching for VS Code";
export const extensionId = "calmripple.sample";
/**
 * Type union of all commands
 */
export type CommandKey = "sample.toggle-annotations" | "sample.toggle-inplace" | "sample.clear-cache" | "sample.update-date";
/**
 * Commands map registed by `calmripple.sample`
 */
export const commands = {
    /**
     * Toggle Annotations
     * @commandkey `sample.toggle-annotations`
     */
    toggleAnnotations: "sample.toggle-annotations",
    /**
     * Toggle In-place Mode
     * @commandkey `sample.toggle-inplace`
     */
    toggleInplace: "sample.toggle-inplace",
    /**
     * Clear icon cache
     * @commandkey `sample.clear-cache`
     */
    clearCache: "sample.clear-cache",
    /**
     * update current date
     * @commandkey `sample.update-date`
     */
    updateDate: "sample.update-date",
} satisfies Record<string, CommandKey> as Record<string, CommandKey>;
/**
 * Register a command. See `vscode::commands.registerCommand`.
 */
export function useCommand(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
    return useReactiveCommand(commandFullKey, callback);
}
/**
 * Register multiple commands. See `vscode::commands.registerCommand`.
 */
export function useCommands(commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void {
    return useReactiveCommands(commands);
}
export type LoggerNameType = typeof name | typeof displayName | typeof extensionId;
/**
 * Creates a logger that writes to the output channel.
 */
export function useLogger(loggerName: LoggerNameType = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) {
    return useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
}
/**
 * @reactive `window.createOutputChannel`
 */
export function useOutputChannel(outputName: LoggerNameType = displayName ?? name ?? extensionId) {
    return useReactiveOutputChannel(outputName);
}
/**
 * Toggle Annotations
 * @commandkey `sample.toggle-annotations`
 */
export function useCommandToggleAnnotations(callback: (...args: any[]) => any) {
    return useCommand(commands.toggleAnnotations, callback);
}
/**
 * Toggle In-place Mode
 * @commandkey `sample.toggle-inplace`
 */
export function useCommandToggleInplace(callback: (...args: any[]) => any) {
    return useCommand(commands.toggleInplace, callback);
}
/**
 * Clear icon cache
 * @commandkey `sample.clear-cache`
 */
export function useCommandClearCache(callback: (...args: any[]) => any) {
    return useCommand(commands.clearCache, callback);
}
/**
 * update current date
 * @commandkey `sample.update-date`
 */
export function useCommandUpdateDate(callback: (...args: any[]) => any) {
    return useCommand(commands.updateDate, callback);
}
/**
 * Section Type of `sample`
 */
export interface Sample {
    /**
     * Current time
     */
    "date": string;
    /**
     * Use icon graph to replace the icon name.
     */
    "inplace": boolean;
    /**
     * Enabled sample inline annotations
     */
    "annotations": boolean;
    /**
     * Position the icon before or after the icon name
     */
    "position": ("before" | "after");
    /**
     * Icon color hex for inline displaying
     */
    "color": string;
    /**
     * Delimiters for separating between collection id and icon id
     */
    "delimiters": string[];
    /**
     * Prefixes for matching
     */
    "prefixes": string[];
    /**
     * Suffixes for matching
     */
    "suffixes": string[];
    /**
     * Array of language IDs to enable annotations
     */
    "languageIds": string[];
    /**
     * Collection IDs to be included for detection
     */
    "includes": (("academicons" | "akar-icons" | "ant-design" | "arcticons" | "basil" | "bi" | "bitcoin-icons" | "bpmn" | "brandico" | "bx" | "bxl" | "bxs" | "bytesize" | "carbon" | "cbi" | "charm" | "ci" | "cib" | "cif" | "cil" | "circle-flags" | "circum" | "clarity" | "codicon" | "covid" | "cryptocurrency" | "cryptocurrency-color" | "dashicons" | "devicon" | "devicon-plain" | "ei" | "el" | "emojione" | "emojione-monotone" | "emojione-v1" | "entypo" | "entypo-social" | "eos-icons" | "ep" | "et" | "eva" | "f7" | "fa" | "fa-brands" | "fa-regular" | "fa-solid" | "fa6-brands" | "fa6-regular" | "fa6-solid" | "fad" | "fe" | "feather" | "file-icons" | "flag" | "flagpack" | "flat-color-icons" | "flat-ui" | "flowbite" | "fluent" | "fluent-emoji" | "fluent-emoji-flat" | "fluent-emoji-high-contrast" | "fluent-mdl2" | "fontelico" | "fontisto" | "formkit" | "foundation" | "fxemoji" | "gala" | "game-icons" | "geo" | "gg" | "gis" | "gravity-ui" | "gridicons" | "grommet-icons" | "guidance" | "healthicons" | "heroicons" | "heroicons-outline" | "heroicons-solid" | "humbleicons" | "ic" | "icomoon-free" | "icon-park" | "icon-park-outline" | "icon-park-solid" | "icon-park-twotone" | "iconamoon" | "iconoir" | "icons8" | "il" | "ion" | "iwwa" | "jam" | "la" | "lets-icons" | "line-md" | "logos" | "ls" | "lucide" | "mage" | "majesticons" | "maki" | "map" | "marketeq" | "material-symbols" | "material-symbols-light" | "mdi" | "mdi-light" | "medical-icon" | "memory" | "meteocons" | "mi" | "mingcute" | "mono-icons" | "mynaui" | "nimbus" | "nonicons" | "noto" | "noto-v1" | "octicon" | "oi" | "ooui" | "openmoji" | "oui" | "pajamas" | "pepicons" | "pepicons-pencil" | "pepicons-pop" | "pepicons-print" | "ph" | "pixelarticons" | "prime" | "ps" | "quill" | "radix-icons" | "raphael" | "ri" | "si-glyph" | "simple-icons" | "simple-line-icons" | "skill-icons" | "solar" | "streamline" | "streamline-emojis" | "subway" | "svg-spinners" | "system-uicons" | "tabler" | "tdesign" | "teenyicons" | "token" | "token-branded" | "topcoat" | "twemoji" | "typcn" | "uil" | "uim" | "uis" | "uit" | "uiw" | "unjs" | "vaadin" | "vs" | "vscode-icons" | "websymbol" | "whh" | "wi" | "wpf" | "zmdi" | "zondicons")[] | null);
    /**
     * Collection IDs to be excluded for detection
     */
    "excludes": (("academicons" | "akar-icons" | "ant-design" | "arcticons" | "basil" | "bi" | "bitcoin-icons" | "bpmn" | "brandico" | "bx" | "bxl" | "bxs" | "bytesize" | "carbon" | "cbi" | "charm" | "ci" | "cib" | "cif" | "cil" | "circle-flags" | "circum" | "clarity" | "codicon" | "covid" | "cryptocurrency" | "cryptocurrency-color" | "dashicons" | "devicon" | "devicon-plain" | "ei" | "el" | "emojione" | "emojione-monotone" | "emojione-v1" | "entypo" | "entypo-social" | "eos-icons" | "ep" | "et" | "eva" | "f7" | "fa" | "fa-brands" | "fa-regular" | "fa-solid" | "fa6-brands" | "fa6-regular" | "fa6-solid" | "fad" | "fe" | "feather" | "file-icons" | "flag" | "flagpack" | "flat-color-icons" | "flat-ui" | "flowbite" | "fluent" | "fluent-emoji" | "fluent-emoji-flat" | "fluent-emoji-high-contrast" | "fluent-mdl2" | "fontelico" | "fontisto" | "formkit" | "foundation" | "fxemoji" | "gala" | "game-icons" | "geo" | "gg" | "gis" | "gravity-ui" | "gridicons" | "grommet-icons" | "guidance" | "healthicons" | "heroicons" | "heroicons-outline" | "heroicons-solid" | "humbleicons" | "ic" | "icomoon-free" | "icon-park" | "icon-park-outline" | "icon-park-solid" | "icon-park-twotone" | "iconamoon" | "iconoir" | "icons8" | "il" | "ion" | "iwwa" | "jam" | "la" | "lets-icons" | "line-md" | "logos" | "ls" | "lucide" | "mage" | "majesticons" | "maki" | "map" | "marketeq" | "material-symbols" | "material-symbols-light" | "mdi" | "mdi-light" | "medical-icon" | "memory" | "meteocons" | "mi" | "mingcute" | "mono-icons" | "mynaui" | "nimbus" | "nonicons" | "noto" | "noto-v1" | "octicon" | "oi" | "ooui" | "openmoji" | "oui" | "pajamas" | "pepicons" | "pepicons-pencil" | "pepicons-pop" | "pepicons-print" | "ph" | "pixelarticons" | "prime" | "ps" | "quill" | "radix-icons" | "raphael" | "ri" | "si-glyph" | "simple-icons" | "simple-line-icons" | "skill-icons" | "solar" | "streamline" | "streamline-emojis" | "subway" | "svg-spinners" | "system-uicons" | "tabler" | "tdesign" | "teenyicons" | "token" | "token-branded" | "topcoat" | "twemoji" | "typcn" | "uil" | "uim" | "uis" | "uit" | "uiw" | "unjs" | "vaadin" | "vs" | "vscode-icons" | "websymbol" | "whh" | "wi" | "wpf" | "zmdi" | "zondicons")[] | null);
    /**
     * CDN entry of sample icon-sets
     */
    "cdnEntry": string;
    /**
     * JSON paths for custom collection
     */
    "customCollectionJsonPaths": string[];
    /**
     * Collection IDs Map for collection name alias, e.g. { 'mc': 'mingcute' }
     */
    "customCollectionIdsMap": Record<string, unknown>;
    /**
     * JSON paths for custom aliases
     */
    "customAliasesJsonPaths": string[];
    /**
     * Only use the icon aliases. Non aliased icons will be ignored.
     */
    "customAliasesOnly": boolean;
}
const sampleDefaults = {
    /**
     * Section defaults of `sample`
     */
    "sample": {
        /**
         * Current time
         */
        "date": "now",
        /**
         * Use icon graph to replace the icon name.
         */
        "inplace": true,
        /**
         * Enabled sample inline annotations
         */
        "annotations": true,
        /**
         * Position the icon before or after the icon name
         */
        "position": "before",
        /**
         * Icon color hex for inline displaying
         */
        "color": "auto",
        /**
         * Delimiters for separating between collection id and icon id
         */
        "delimiters": [":", "--", "-", "/"],
        /**
         * Prefixes for matching
         */
        "prefixes": ["", "i-", "~icons/"],
        /**
         * Suffixes for matching
         */
        "suffixes": ["", "i-"],
        /**
         * Array of language IDs to enable annotations
         */
        "languageIds": ["javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "svelte", "html", "pug", "json", "yaml"],
        /**
         * Collection IDs to be included for detection
         */
        "includes": null,
        /**
         * Collection IDs to be excluded for detection
         */
        "excludes": null,
        /**
         * CDN entry of sample icon-sets
         */
        "cdnEntry": "https://icones.js.org/collections",
        /**
         * JSON paths for custom collection
         */
        "customCollectionJsonPaths": [],
        /**
         * Collection IDs Map for collection name alias, e.g. { 'mc': 'mingcute' }
         */
        "customCollectionIdsMap": {},
        /**
         * JSON paths for custom aliases
         */
        "customAliasesJsonPaths": [],
        /**
         * Only use the icon aliases. Non aliased icons will be ignored.
         */
        "customAliasesOnly": false,
    } satisfies Sample as Sample,
};
export type ConfigSecionKey = keyof typeof sampleDefaults;
export const configs = {
    sample: "sample",
} satisfies Record<string, ConfigSecionKey>;
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export function useConfig<K extends ConfigSecionKey>(section: K) {
    return defineConfigs<typeof sampleDefaults[K]>(section, sampleDefaults[section]);
}
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export function useConfigObject<K extends ConfigSecionKey>(section: K) {
    return defineConfigObject<typeof sampleDefaults[K]>(section, sampleDefaults[section]);
}
/**
 * ConfigObject of `sample`
 * @example
 * const oldVal = useConfigObjectSample.date //get value
 * useConfigObjectSample.$update("date", oldVal) //update value
 */
export const useConfigObjectSample = () => useConfigObject(configs.sample);
/**
 * ToConfigRefs of `sample`
 * @example
 * const oldVal:string =useConfigSample.date.value //get value
 * useConfigSample.date.update(oldVal) //update value
 */
export const useConfigSample = () => useConfig(configs.sample);
