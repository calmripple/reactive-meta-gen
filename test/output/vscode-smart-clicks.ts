/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = "antfu"
export const name = "smart-clicks"
export const version = "0.2.1"
export const displayName = "Smart Clicks"
export const description = "Smart selection with double clicks"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "smartClicks.trigger"

export function useCommandKey(commandFullKey: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(commandFullKey, callback)
}

/**
 * Smart Clicks: Trigger
 * @value `smartClicks.trigger`
 */
export function useCommandTrigger(callback: (...args: any[]) => any) {
  return useCommandKey("smartClicks.trigger", callback)
}


/**
 * Section Type of `smartClicks`
 */
export interface SmartClicks {
  /**
   * The interval between clicks in milliseconds.
   */
  "clicksInterval": number,
  /**
   * The delay after triggering the selection. To prevent conflicting with normal selection.
   */
  "triggerDelay": number,
  /**
   * Array of language IDs to enable html smartClicks
   */
  "htmlLanguageIds": string[],
  /**
   * Rule toggles
   */
  "rules": {
      /**
     * Pair to inner content of brackets.
     * 
     * ```js
     * ▽
     * (foo, bar)
     *  └──────┘
     * ```
     * @default `true`
     */
    'bracket-pair': boolean
    /**
     * `-` to identifier.
     * 
     * ```css
     *    ▽
     * foo-bar
     * └─────┘
     * ```
     * @default `true`
     */
    'dash': boolean
    /**
     * `=` to HTML attribute.
     * 
     * ```html
     *           ▽
     * <div class="btn"></div>
     *      └─────────┘
     * ```
     * @default `true`
     */
    'html-attr': boolean
    /**
     * `<` to the entire element.
     * 
     * ```html
     * ▽
     * <div><div></div></div>
     * └────────────────────┘
     * ```
     * @default `true`
     */
    'html-element': boolean
    /**
     * Open and close tags of a HTML element.
     * 
     * ```html
     *  ▽
     * <div><div></div></div>
     *  └─┘              └─┘
     * ```
     * @default `true`
     */
    'html-tag-pair': boolean
    /**
     * `=>` to arrow function.
     * 
     * ```js
     *        ▽
     * (a, b) => a + b
     * └─────────────┘
     * ```
     * @default `true`
     */
    'js-arrow-fn': boolean
    /**
     * `=` to assignment.
     * 
     * ```js
     *         ▽
     * const a = []
     * └──────────┘
     * ```
     * @default `true`
     */
    'js-assign': boolean
    /**
     * Blocks like `if`, `for`, `while`, etc. in JavaScript.
     * 
     * ```js
     * ▽
     * function () {     }
     * └─────────────────┘
     * ```
     * 
     * ```js
     * ▽
     * import { ref } from 'vue'
     * └───────────────────────┘
     * ```
     * @default `false`
     */
    'js-block': boolean
    /**
     * `:` to the value.
     * 
     * ```js
     *      ▽
     * { foo: { bar } }
     *        └─────┘
     * ```
     * @default `true`
     */
    'js-colon': boolean
    /**
     * Matches JSX elements' start and end tags.
     * 
     * ```jsx
     *   ▽
     * (<Flex.Item>Hi</Flex.Item>)
     *   └───────┘     └───────┘
     * ```
     * @default `true`
     */
    'jsx-tag-pair': boolean 
  },
}
const smartClicksConfig = {

  "smartClicks": {
    /**
     * The interval between clicks in milliseconds.
     */
    "clicksInterval": 600,
    /**
     * The delay after triggering the selection. To prevent conflicting with normal selection.
     */
    "triggerDelay": 150,
    /**
     * Array of language IDs to enable html smartClicks
     */
    "htmlLanguageIds": ["html","vue","svelte"],
    /**
     * Rule toggles
     */
    "rules": { "bracket-pair": true, "dash": true, "html-attr": true, "html-element": true, "html-tag-pair": true, "js-arrow-fn": true, "js-assign": true, "js-block": false, "js-colon": true, "jsx-tag-pair": true },
  } satisfies SmartClicks,

}
export type ConfigKey = "smartClicks"

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof smartClicksConfig[K]>(section, smartClicksConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof smartClicksConfig[K]>(section, smartClicksConfig[section])
}
    
/**
 * ConfigObject of `smartClicks`
 * @example
 * const configValue = configObjectSmartClicks.clicksInterval //get value 
 * configObjectSmartClicks.clicksInterval = true // set value
 * configObjectSmartClicks.$update("clicksInterval", !configValue, ConfigurationTarget.Workspace, true)
 */
export const configObjectSmartClicks = useConfigObject("smartClicks")
/**
 * ToConfigRefs of `smartClicks`
 * @example
 * const configValue:number =configSmartClicks.clicksInterval.value //get value 
 * configSmartClicks.clicksInterval.value = 600 // set value
 * //update value to ConfigurationTarget.Workspace/ConfigurationTarget.Global/ConfigurationTarget.WorkspaceFolder
 * configSmartClicks.clicksInterval.update(true, ConfigurationTarget.WorkspaceFolder, true)
 */
export const configSmartClicks = useConfig("smartClicks")
