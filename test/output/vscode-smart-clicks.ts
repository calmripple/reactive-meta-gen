/* eslint-disable */
// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen
// Meta info
import { defineConfigObject, defineConfigs, useCommand as useReactiveCommand, useCommands as useReactiveCommands, useLogger as useReactiveLogger, useOutputChannel as useReactiveOutputChannel, } from 'reactive-vscode';
export const publisher = "antfu";
export const name = "smart-clicks";
export const version = "0.2.1";
export const displayName = "Smart Clicks";
export const description = "Smart selection with double clicks";
export const extensionId = "antfu.smart-clicks";
/**
 * Type union of all commands
 */
export type CommandKey = "smartClicks.trigger";
/**
 * Commands map registed by `antfu.smart-clicks`
 */
export const commands = {
    /**
     * Smart Clicks: Trigger
     * @commandkey `smartClicks.trigger`
     */
    trigger: "smartClicks.trigger",
} satisfies Record<string, CommandKey>;
/**
 * Register a command. See `vscode::commands.registerCommand`.
 */
export const useCommand = (commandFullKey: CommandKey, callback: (...args: any[]) => any): void => useReactiveCommand(commandFullKey, callback);
/**
 * Register multiple commands. See `vscode::commands.registerCommand`.
 */
export const useCommands = (commands: Partial<Record<CommandKey, (...args: any[]) => any>>): void => useReactiveCommands(commands);
/**
 * name type of Logger and OutputChannel
 */
export type LoggerNameType = typeof name | typeof displayName | typeof extensionId;
/**
 * Creates a logger that writes to the output channel.
 */
export const useLogger = (loggerName: LoggerNameType = displayName ?? name ?? extensionId, getPrefix?: ((type: string) => string) | null) => useReactiveLogger(loggerName, { 'getPrefix': getPrefix });
/**
 * @reactive `window.createOutputChannel`
 */
export const useOutputChannel = (outputName: LoggerNameType = displayName ?? name ?? extensionId) => useReactiveOutputChannel(outputName);
/**
 * Smart Clicks: Trigger
 * @commandkey Register a command `smartClicks.trigger`
 */
export const useCommandTrigger = (callback: (...args: any[]) => any) => useCommand(commands.trigger, callback);
/**
 * Section Type of `smartClicks`
 */
export interface SmartClicks {
    /**
     * The interval between clicks in milliseconds.
     */
    "clicksInterval": number;
    /**
     * The delay after triggering the selection. To prevent conflicting with normal selection.
     */
    "triggerDelay": number;
    /**
     * Array of language IDs to enable html smartClicks
     */
    "htmlLanguageIds": string[];
    /**
     * Pair to inner content of brackets.
     *
     * ```js
     * ▽
     * (foo, bar)
     *  └──────┘
     * ```
     */
    "rules.bracket-pair": boolean;
    /**
     * `-` to identifier.
     *
     * ```css
     *    ▽
     * foo-bar
     * └─────┘
     * ```
     */
    "rules.dash": boolean;
    /**
     * `=` to HTML attribute.
     *
     * ```html
     *           ▽
     * <div class="btn"></div>
     *      └─────────┘
     * ```
     */
    "rules.html-attr": boolean;
    /**
     * `<` to the entire element.
     *
     * ```html
     * ▽
     * <div><div></div></div>
     * └────────────────────┘
     * ```
     */
    "rules.html-element": boolean;
    /**
     * Open and close tags of a HTML element.
     *
     * ```html
     *  ▽
     * <div><div></div></div>
     *  └─┘              └─┘
     * ```
     */
    "rules.html-tag-pair": boolean;
    /**
     * `=>` to arrow function.
     *
     * ```js
     *        ▽
     * (a, b) => a + b
     * └─────────────┘
     * ```
     */
    "rules.js-arrow-fn": boolean;
    /**
     * `=` to assignment.
     *
     * ```js
     *         ▽
     * const a = []
     * └──────────┘
     * ```
     */
    "rules.js-assign": boolean;
    /**
     * Blocks like `if`, `for`, `while`, etc. in JavaScript.
     *
     * ```js
     * ▽
     * function () {     }
     * └─────────────────┘
     * ```
     *
     * ```js
     * ▽
     * import { ref } from 'vue'
     * └───────────────────────┘
     * ```
     */
    "rules.js-block": boolean;
    /**
     * `:` to the value.
     *
     * ```js
     *      ▽
     * { foo: { bar } }
     *        └─────┘
     * ```
     */
    "rules.js-colon": boolean;
    /**
     * Matches JSX elements' start and end tags.
     *
     * ```jsx
     *   ▽
     * (<Flex.Item>Hi</Flex.Item>)
     *   └───────┘     └───────┘
     * ```
     */
    "rules.jsx-tag-pair": boolean;
}
/**
 * Section Type of `smartClicks.rules`
 */
export interface Rules {
    /**
     * Pair to inner content of brackets.
     *
     * ```js
     * ▽
     * (foo, bar)
     *  └──────┘
     * ```
     */
    "bracket-pair": boolean;
    /**
     * `-` to identifier.
     *
     * ```css
     *    ▽
     * foo-bar
     * └─────┘
     * ```
     */
    "dash": boolean;
    /**
     * `=` to HTML attribute.
     *
     * ```html
     *           ▽
     * <div class="btn"></div>
     *      └─────────┘
     * ```
     */
    "html-attr": boolean;
    /**
     * `<` to the entire element.
     *
     * ```html
     * ▽
     * <div><div></div></div>
     * └────────────────────┘
     * ```
     */
    "html-element": boolean;
    /**
     * Open and close tags of a HTML element.
     *
     * ```html
     *  ▽
     * <div><div></div></div>
     *  └─┘              └─┘
     * ```
     */
    "html-tag-pair": boolean;
    /**
     * `=>` to arrow function.
     *
     * ```js
     *        ▽
     * (a, b) => a + b
     * └─────────────┘
     * ```
     */
    "js-arrow-fn": boolean;
    /**
     * `=` to assignment.
     *
     * ```js
     *         ▽
     * const a = []
     * └──────────┘
     * ```
     */
    "js-assign": boolean;
    /**
     * Blocks like `if`, `for`, `while`, etc. in JavaScript.
     *
     * ```js
     * ▽
     * function () {     }
     * └─────────────────┘
     * ```
     *
     * ```js
     * ▽
     * import { ref } from 'vue'
     * └───────────────────────┘
     * ```
     */
    "js-block": boolean;
    /**
     * `:` to the value.
     *
     * ```js
     *      ▽
     * { foo: { bar } }
     *        └─────┘
     * ```
     */
    "js-colon": boolean;
    /**
     * Matches JSX elements' start and end tags.
     *
     * ```jsx
     *   ▽
     * (<Flex.Item>Hi</Flex.Item>)
     *   └───────┘     └───────┘
     * ```
     */
    "jsx-tag-pair": boolean;
}
const smartClicksDefaults = {
    /**
     * Config defaults of `smartClicks`
     */
    "smartClicks": {
        /**
         * The interval between clicks in milliseconds.
         */
        "clicksInterval": 600,
        /**
         * The delay after triggering the selection. To prevent conflicting with normal selection.
         */
        "triggerDelay": 150,
        /**
         * Array of language IDs to enable html smartClicks
         */
        "htmlLanguageIds": ["html", "vue", "svelte"],
        /**
         * Pair to inner content of brackets.
         *
         * ```js
         * ▽
         * (foo, bar)
         *  └──────┘
         * ```
         */
        "rules.bracket-pair": true,
        /**
         * `-` to identifier.
         *
         * ```css
         *    ▽
         * foo-bar
         * └─────┘
         * ```
         */
        "rules.dash": true,
        /**
         * `=` to HTML attribute.
         *
         * ```html
         *           ▽
         * <div class="btn"></div>
         *      └─────────┘
         * ```
         */
        "rules.html-attr": true,
        /**
         * `<` to the entire element.
         *
         * ```html
         * ▽
         * <div><div></div></div>
         * └────────────────────┘
         * ```
         */
        "rules.html-element": true,
        /**
         * Open and close tags of a HTML element.
         *
         * ```html
         *  ▽
         * <div><div></div></div>
         *  └─┘              └─┘
         * ```
         */
        "rules.html-tag-pair": true,
        /**
         * `=>` to arrow function.
         *
         * ```js
         *        ▽
         * (a, b) => a + b
         * └─────────────┘
         * ```
         */
        "rules.js-arrow-fn": true,
        /**
         * `=` to assignment.
         *
         * ```js
         *         ▽
         * const a = []
         * └──────────┘
         * ```
         */
        "rules.js-assign": true,
        /**
         * Blocks like `if`, `for`, `while`, etc. in JavaScript.
         *
         * ```js
         * ▽
         * function () {     }
         * └─────────────────┘
         * ```
         *
         * ```js
         * ▽
         * import { ref } from 'vue'
         * └───────────────────────┘
         * ```
         */
        "rules.js-block": false,
        /**
         * `:` to the value.
         *
         * ```js
         *      ▽
         * { foo: { bar } }
         *        └─────┘
         * ```
         */
        "rules.js-colon": true,
        /**
         * Matches JSX elements' start and end tags.
         *
         * ```jsx
         *   ▽
         * (<Flex.Item>Hi</Flex.Item>)
         *   └───────┘     └───────┘
         * ```
         */
        "rules.jsx-tag-pair": true,
    } satisfies SmartClicks as SmartClicks,
    /**
     * Config defaults of `smartClicks.rules`
     */
    "smartClicks.rules": {
        /**
         * Pair to inner content of brackets.
         *
         * ```js
         * ▽
         * (foo, bar)
         *  └──────┘
         * ```
         */
        "bracket-pair": true,
        /**
         * `-` to identifier.
         *
         * ```css
         *    ▽
         * foo-bar
         * └─────┘
         * ```
         */
        "dash": true,
        /**
         * `=` to HTML attribute.
         *
         * ```html
         *           ▽
         * <div class="btn"></div>
         *      └─────────┘
         * ```
         */
        "html-attr": true,
        /**
         * `<` to the entire element.
         *
         * ```html
         * ▽
         * <div><div></div></div>
         * └────────────────────┘
         * ```
         */
        "html-element": true,
        /**
         * Open and close tags of a HTML element.
         *
         * ```html
         *  ▽
         * <div><div></div></div>
         *  └─┘              └─┘
         * ```
         */
        "html-tag-pair": true,
        /**
         * `=>` to arrow function.
         *
         * ```js
         *        ▽
         * (a, b) => a + b
         * └─────────────┘
         * ```
         */
        "js-arrow-fn": true,
        /**
         * `=` to assignment.
         *
         * ```js
         *         ▽
         * const a = []
         * └──────────┘
         * ```
         */
        "js-assign": true,
        /**
         * Blocks like `if`, `for`, `while`, etc. in JavaScript.
         *
         * ```js
         * ▽
         * function () {     }
         * └─────────────────┘
         * ```
         *
         * ```js
         * ▽
         * import { ref } from 'vue'
         * └───────────────────────┘
         * ```
         */
        "js-block": false,
        /**
         * `:` to the value.
         *
         * ```js
         *      ▽
         * { foo: { bar } }
         *        └─────┘
         * ```
         */
        "js-colon": true,
        /**
         * Matches JSX elements' start and end tags.
         *
         * ```jsx
         *   ▽
         * (<Flex.Item>Hi</Flex.Item>)
         *   └───────┘     └───────┘
         * ```
         */
        "jsx-tag-pair": true,
    } satisfies Rules as Rules,
};
export type ConfigSecionKey = keyof typeof smartClicksDefaults;
/**
 * Shorthand of config section name.
 */
export const configs = {
    smartClicks: "smartClicks",
    rules: "smartClicks.rules",
} satisfies Record<string, ConfigSecionKey>;
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfig = <K extends ConfigSecionKey>(section: K) => defineConfigs<typeof smartClicksDefaults[K]>(section, smartClicksDefaults[section]);
/**
 * Define configurations of an extension. See `vscode::workspace.getConfiguration`.
 */
export const useConfigObject = <K extends ConfigSecionKey>(section: K) => defineConfigObject<typeof smartClicksDefaults[K]>(section, smartClicksDefaults[section]);
/**
 * ConfigObject of `smartClicks`
 * @example
 * const smartClicks = useConfigObjectSmartClicks()
 * const oldVal:number = smartClicks.clicksInterval //get value
 * smartClicks.$update("clicksInterval", oldVal) //update value
 */
export const useConfigObjectSmartClicks = () => useConfigObject(configs.smartClicks);
/**
 * ToConfigRefs of `smartClicks`
 * @example
 * const smartClicks = useConfigSmartClicks()
 * const oldVal:number = smartClicks.clicksInterval.value //get value
 * smartClicks.clicksInterval.update(oldVal) //update value
 */
export const useConfigSmartClicks = () => useConfig(configs.smartClicks);
/**
 * ConfigObject of `smartClicks.rules`
 * @example
 * const rules = useConfigObjectRules()
 * const oldVal:boolean = rules.bracket-pair //get value
 * rules.$update("bracket-pair", oldVal) //update value
 */
export const useConfigObjectRules = () => useConfigObject(configs.rules);
/**
 * ToConfigRefs of `smartClicks.rules`
 * @example
 * const rules = useConfigRules()
 * const oldVal:boolean = rules.bracket-pair.value //get value
 * rules.bracket-pair.update(oldVal) //update value
 */
export const useConfigRules = () => useConfig(configs.rules);
