// This file is generated by `reactive-meta-gen`. Do not modify manually.
// @see https://github.com/calmripple/reactive-meta-gen

// Meta info

import { defineConfigObject, defineConfigs, useCommand } from 'reactive-vscode'

export const publisher = 'cnjimbo'
export const name = 'project-config'
export const version = '1.1.2'
export const displayName = 'Project Config Updater'
export const description = 'Export current settings to workspace config file '
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey =
  | 'project-config.manualUpdate'
  | 'project-config.remove-watch-dir'
  | 'project-config.add-watch-dir'
  | 'extension.emeraldwalk.enableRunOnSave'
  | 'extension.emeraldwalk.disableRunOnSave'

/**
 * Commands map registed by `cnjimbo.project-config`
 */
export const commands = {
  /**
   * Update config now
   * @value `project-config.manualUpdate`
   */
  manualUpdate: 'project-config.manualUpdate',
  /**
   * remove watch dir
   * @value `project-config.remove-watch-dir`
   */
  removeWatchDir: 'project-config.remove-watch-dir',
  /**
   * add watch dir
   * @value `project-config.add-watch-dir`
   */
  addWatchDir: 'project-config.add-watch-dir',
  /**
   * Run On Save: Enable
   * @value `extension.emeraldwalk.enableRunOnSave`
   */
  extensionEmeraldwalkEnableRunOnSave: 'extension.emeraldwalk.enableRunOnSave',
  /**
   * Run On Save: Disable
   * @value `extension.emeraldwalk.disableRunOnSave`
   */
  extensionEmeraldwalkDisableRunOnSave: 'extension.emeraldwalk.disableRunOnSave',
} satisfies Record<string, CommandKey>

/**
 * Type union of Deprecated all configs
 */
export type DeprecatedConfigKey =
  | 'ww_should_not_show_up'

/**
 * Section Type of `project-config`
 */
export interface ProjectConfig {
  /**
   * The branch name of upstream repo
   */
  'fileNestingUpdater.upstreamBranch': string
  /**
   * The upstream repo you want to update from
   */
  'fileNestingUpdater.upstreamRepo': string
  /**
   * Enabled project-config inline annotations
   */
  'test.annotations': boolean
  /**
   * Position the icon before or after the icon name
   */
  'test.position': ('after' | 'before')
}

/**
 * Section Type of `project-config.fileNestingUpdater`
 */
export interface ProjectConfigFileNestingUpdater {
  /**
   * The branch name of upstream repo
   */
  upstreamBranch: string
  /**
   * The upstream repo you want to update from
   */
  upstreamRepo: string
}

/**
 * Section Type of `project-config.test`
 */
export interface ProjectConfigTest {
  /**
   * Enabled project-config inline annotations
   */
  annotations: boolean
  /**
   * Position the icon before or after the icon name
   */
  position: ('after' | 'before')
}

/**
 * Section Type of `virtual(Keys in the root)`
 */
export interface Root {
  /**
   * Enabled project-config inline annotations
   */
  xxx: boolean
}

/**
 * Section Type of `emeraldwalk`
 */
export interface Emeraldwalk {
  runonsave: {
    /**
     * Automatically clear the console on each save before running commands.
     * @default `false`
     */
    autoClearConsole: boolean
    /**
     * Shell to execute the command with (gets passed to child_process.exec as an options arg. e.g. child_process(cmd, { shell }).
     * @default `undefined`
     */
    shell?: string
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    delimiters: string[]
    /**
     * Delimiters for separating between collection id and icon id
     * @default `[":","--","-","/"]`
     */
    delimiters1: string[]
    /**
     *
     * @default `undefined`
     */
    commands?: {
      /**
       * Regex for matching files to run commands on
       *
       * NOTE: This is a regex and not a file path spce, so backslashes have to be escaped. They also have to be escaped in json strings, so you may have to double escape them in certain cases such as targetting contents of folders.
       *
       * e.g.
       * "match": "some\\\\directory\\\\.*"
       * @default `".*"`
       */
      match: string
      /**
       * Regex for matching files *not* to run commands on.
       * @default `".*"`
       */
      notMatch: string
      /**
       * Command to execute on save.
       * @default `"echo ${file}"`
       */
      cmd: string
      /**
       * Run command asynchronously.
       * @default `false`
       */
      isAsync: boolean
    }[]
  }
}
const projectConfigConfig = {

  /**
   * Section defaults of `project-config`
   */
  'project-config': {
    /**
     * The branch name of upstream repo
     */
    'fileNestingUpdater.upstreamBranch': 'main',
    /**
     * The upstream repo you want to update from
     */
    'fileNestingUpdater.upstreamRepo': 'antfu/vscode-file-nesting-config',
    /**
     * Enabled project-config inline annotations
     */
    'test.annotations': true,
    /**
     * Position the icon before or after the icon name
     */
    'test.position': 'before',
  } satisfies ProjectConfig,

  /**
   * Section defaults of `project-config.fileNestingUpdater`
   */
  'project-config.fileNestingUpdater': {
    /**
     * The branch name of upstream repo
     */
    upstreamBranch: 'main',
    /**
     * The upstream repo you want to update from
     */
    upstreamRepo: 'antfu/vscode-file-nesting-config',
  } satisfies ProjectConfigFileNestingUpdater,

  /**
   * Section defaults of `project-config.test`
   */
  'project-config.test': {
    /**
     * Enabled project-config inline annotations
     */
    annotations: true,
    /**
     * Position the icon before or after the icon name
     */
    position: 'before',
  } satisfies ProjectConfigTest,

  /**
   * Section defaults of `virtual(Keys in the root)`
   */
  '': {
    /**
     * Enabled project-config inline annotations
     */
    xxx: true,
  } satisfies Root,

  /**
   * Section defaults of `emeraldwalk`
   */
  'emeraldwalk': {
    runonsave: { autoClearConsole: false, shell: undefined, delimiters: [':', '--', '-', '/'], delimiters1: [':', '--', '-', '/'], commands: undefined },
  } satisfies Emeraldwalk,

}
export type ConfigKey = 'project-config' | 'project-config.fileNestingUpdater' | 'project-config.test' | '' | 'emeraldwalk'

export function useConfig<K extends ConfigKey>(section: K) {
  return defineConfigs<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}

export function useConfigObject<K extends ConfigKey>(section: K) {
  return defineConfigObject<typeof projectConfigConfig[K]>(section, projectConfigConfig[section])
}

export function useCommandProjectConfig(cmd: CommandKey, callback: (...args: any[]) => any): void {
  return useCommand(cmd, callback)
}

function getRightDotSection(str: string, rightIdx: number): string {
  if (typeof str !== 'string' || typeof rightIdx !== 'number') {
    throw new TypeError('Invalid input')
  }
  const parts = str.split('.')
  let indexFromRight = 0
  if (rightIdx === 0)
    rightIdx = -1
  if (rightIdx < 0) {
    indexFromRight = parts.length + rightIdx
  }
  else if (rightIdx > 0) {
    indexFromRight = parts.length - rightIdx
  }
  if (indexFromRight < 0) {
    return str
  }
  return parts.slice(indexFromRight).join('.')
}

console.log(getRightDotSection('example.com/path/to/file.txt', 2))
console.log(getRightDotSection('example.com/path.to/file.txt', 3))
console.log(getRightDotSection('example.com/path.to/file.txt', 5))
